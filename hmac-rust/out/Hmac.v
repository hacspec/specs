(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Sha256.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_helper.

Class Hash Self := {
  BLOCK_LEN:uint_size ;
  HASH_LEN:uint_size ;
  hash:seq int8 -> Vec_t (int8) (Global_t) ;
}.

Record Sha256_tSha256 : Type :={
}.

Instance Sha256_t_Hash : Hash Sha256_t := {
  BLOCK_LEN := (@repr WORDSIZE32 64);
  HASH_LEN := (@repr WORDSIZE32 32);
  hash (bytes : seq int8) := to_vec (unsize (sha256 bytes));
}.

Definition o_pad : Vec_t (int8) (Global_t) :=
  from_elem (@repr WORDSIZE8 92) BLOCK_LEN.

Definition i_pad : Vec_t (int8) (Global_t) :=
  from_elem (@repr WORDSIZE8 54) BLOCK_LEN.

Definition k_block (k : seq int8) : Vec_t (int8) (Global_t) :=
  let k := (if
      (len k)>.?BLOCK_LEN
    then
      hash k
    else
      to_vec k) : Vec_t (int8) (Global_t) in
  let block := (from_elem (@repr WORDSIZE8 0) BLOCK_LEN) : Vec_t (int8) (Global_t) in
  let block := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)(len k))) block (fun i block =>
      update_at block i (k.[i]))) : Vec_t (int8) (Global_t) in
  block.

Definition hmac (k : seq int8) (txt : seq int8) : Vec_t (int8) (Global_t) :=
  let k_block := (k_block k) : Vec_t (int8) (Global_t) in
  let h_in := (xor_slice (clone k_block) (deref i_pad)) : Vec_t (int8) (Global_t) in
  let h_in := (extend_from_slice h_in txt) : Vec_t (int8) (Global_t) in
  let h_inner := (hash (deref h_in)) : nseq int8 TODO: Int.to_string length in
  let h_in := (xor_slice k_block (deref o_pad)) : Vec_t (int8) (Global_t) in
  let h_in := (extend_from_slice h_in (unsize h_inner)) : Vec_t (int8) (Global_t) in
  to_vec (unsize (hash (deref h_in))).
