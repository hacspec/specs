(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
From Jasmin Require Import word.

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

Require Import Hacspec_lib.
Export Hacspec_lib.

Notation "'t_Block'" := (nseq int8 BLOCK_SIZE).
Definition Block {L : {fset Location}} {I : Interface} : both L I (t_Block) -> both L I (t_Block) :=
  id.

Notation "'t_Hash'" := (nseq int64 8).
Definition Hash {L : {fset Location}} {I : Interface} : both L I (t_Hash) -> both L I (t_Hash) :=
  id.

Notation "'t_OpTableType'" := (nseq int32 12).
Definition OpTableType {L : {fset Location}} {I : Interface} : both L I (t_OpTableType) -> both L I (t_OpTableType) :=
  id.

Notation "'t_RoundConstantsTable'" := (nseq int64 K_SIZE).
Definition RoundConstantsTable {L : {fset Location}} {I : Interface} : both L I (t_RoundConstantsTable) -> both L I (t_RoundConstantsTable) :=
  id.

Notation "'t_Sha512Digest'" := (nseq int8 HASH_SIZE).
Definition Sha512Digest {L : {fset Location}} {I : Interface} : both L I (t_Sha512Digest) -> both L I (t_Sha512Digest) :=
  id.

(*Not implemented yet? todo(item)*)

Equations v_BLOCK_SIZE {L : {fset Location}} {I : Interface} : both L I (uint_size) :=
  v_BLOCK_SIZE  :=
    solve_lift (ret_both (128 : uint_size)) : both L I (uint_size).
Fail Next Obligation.

Equations v_HASH_SIZE {L : {fset Location}} {I : Interface} : both L I (uint_size) :=
  v_HASH_SIZE  :=
    solve_lift ((ret_both (512 : uint_size)) ./ (ret_both (8 : uint_size))) : both L I (uint_size).
Fail Next Obligation.

Equations v_K_SIZE {L : {fset Location}} {I : Interface} : both L I (uint_size) :=
  v_K_SIZE  :=
    solve_lift (ret_both (80 : uint_size)) : both L I (uint_size).
Fail Next Obligation.

Equations v_LEN_SIZE {L : {fset Location}} {I : Interface} : both L I (uint_size) :=
  v_LEN_SIZE  :=
    solve_lift (ret_both (16 : uint_size)) : both L I (uint_size).
Fail Next Obligation.

Equations v_OP_TABLE {L : {fset Location}} {I : Interface} : both L I (t_OpTableType) :=
  v_OP_TABLE  :=
    OpTableType (array_from_list [solve_lift (ret_both (28 : uint_size));
      solve_lift (ret_both (34 : uint_size));
      solve_lift (ret_both (39 : uint_size));
      solve_lift (ret_both (14 : uint_size));
      solve_lift (ret_both (18 : uint_size));
      solve_lift (ret_both (41 : uint_size));
      solve_lift (ret_both (1 : uint_size));
      solve_lift (ret_both (8 : uint_size));
      solve_lift (ret_both (7 : uint_size));
      solve_lift (ret_both (19 : uint_size));
      solve_lift (ret_both (61 : uint_size));
      solve_lift (ret_both (6 : uint_size))]) : both L I (t_OpTableType).
Fail Next Obligation.

Equations ch {L1 : {fset Location}} {L2 : {fset Location}} {L3 : {fset Location}} {I1 : Interface} {I2 : Interface} {I3 : Interface} (x : both L1 I1 (t_U64)) (y : both L2 I2 (t_U64)) (z : both L3 I3 (t_U64)) : both (L1 :|: L2 :|: L3) (I1 :|: I2 :|: I3) (t_U64) :=
  ch x y z  :=
    solve_lift ((x .& y) .^ ((f_not x) .& z)) : both (L1 :|: L2 :|: L3) (I1 :|: I2 :|: I3) (t_U64).
Fail Next Obligation.

Equations maj {L1 : {fset Location}} {L2 : {fset Location}} {L3 : {fset Location}} {I1 : Interface} {I2 : Interface} {I3 : Interface} (x : both L1 I1 (t_U64)) (y : both L2 I2 (t_U64)) (z : both L3 I3 (t_U64)) : both (L1 :|: L2 :|: L3) (I1 :|: I2 :|: I3) (t_U64) :=
  maj x y z  :=
    solve_lift ((x .& y) .^ ((x .& z) .^ (y .& z))) : both (L1 :|: L2 :|: L3) (I1 :|: I2 :|: I3) (t_U64).
Fail Next Obligation.

Definition tmp_loc : Location :=
  (t_U64;0%nat).
Equations sigma {L1 : {fset Location}} {L2 : {fset Location}} {L3 : {fset Location}} {I1 : Interface} {I2 : Interface} {I3 : Interface} (x : both L1 I1 (t_U64)) (i : both L2 I2 (uint_size)) (op : both L3 I3 (uint_size)) : both (L1 :|: L2 :|: L3 :|: fset [tmp_loc]) (I1 :|: I2 :|: I3) (t_U64) :=
  sigma x i op  :=
    letb (tmp : t_U64) loc(tmp_loc) := impl__U64__rotate_right x (v_OP_TABLE.a[(((ret_both (3 : uint_size)) .* i) .+ (ret_both (2 : uint_size)))]) in
    letb _ := ifb op =.? (ret_both (0 : uint_size))
    then assign todo(term)
    else () in
    solve_lift (((impl__U64__rotate_right x (v_OP_TABLE.a[((ret_both (3 : uint_size)) .* i)])) .^ (impl__U64__rotate_right x (v_OP_TABLE.a[(((ret_both (3 : uint_size)) .* i) .+ (ret_both (1 : uint_size)))]))) .^ tmp) : both (L1 :|: L2 :|: L3 :|: fset [tmp_loc]) (I1 :|: I2 :|: I3) (t_U64).
Fail Next Obligation.

Definition s_loc : Location :=
  (t_RoundConstantsTable;1%nat).
Equations schedule {L1 : {fset Location}} {I1 : Interface} (block : both L1 I1 (t_Block)) : both (L1 :|: fset [s_loc;tmp_loc]) I1 (t_RoundConstantsTable) :=
  schedule block  :=
    letb b := impl__Block__to_be_U64s block in
    letb s loc(s_loc) := impl__RoundConstantsTable__new (ret_both (tt : 'unit)) in
    letb _ := foldi_both_list (f_into_iter (Build_t_Range (f_start := ret_both (0 : uint_size)) (f_end := v_K_SIZE))) (fun i =>
      ssp (fun _ =>
        solve_lift (ifb i <.? (ret_both (16 : uint_size))
        then letb _ := assign todo(term) in
        ret_both (tt : 'unit)
        else letb t16 := s.a[(i .- (ret_both (16 : uint_size)))] in
        letb t15 := s.a[(i .- (ret_both (15 : uint_size)))] in
        letb t7 := s.a[(i .- (ret_both (7 : uint_size)))] in
        letb t2 := s.a[(i .- (ret_both (2 : uint_size)))] in
        letb s1 := sigma t2 (ret_both (3 : uint_size)) (ret_both (0 : uint_size)) in
        letb s0 := sigma t15 (ret_both (2 : uint_size)) (ret_both (0 : uint_size)) in
        letb _ := assign todo(term) in
        ret_both (tt : 'unit)) : both (*2*)(L1:|:fset [s_loc;tmp_loc]) (I1) ('unit))) (ret_both (tt : 'unit)) in
    solve_lift s : both (L1 :|: fset [s_loc;tmp_loc]) I1 (t_RoundConstantsTable).
Fail Next Obligation.

Equations v_HASH_INIT {L : {fset Location}} {I : Interface} : both L I (t_Hash) :=
  v_HASH_INIT  :=
    Hash (array_from_list [U64 (solve_lift (ret_both (7640891576956012808 : int64)));
      U64 (solve_lift (ret_both (13503953896175478587 : int64)));
      U64 (solve_lift (ret_both (4354685564936845355 : int64)));
      U64 (solve_lift (ret_both (11912009170470909681 : int64)));
      U64 (solve_lift (ret_both (5840696475078001361 : int64)));
      U64 (solve_lift (ret_both (11170449401992604703 : int64)));
      U64 (solve_lift (ret_both (2270897969802886507 : int64)));
      U64 (solve_lift (ret_both (6620516959819538809 : int64)))]) : both L I (t_Hash).
Fail Next Obligation.

Equations v_K_TABLE {L : {fset Location}} {I : Interface} : both L I (t_RoundConstantsTable) :=
  v_K_TABLE  :=
    RoundConstantsTable (array_from_list [U64 (solve_lift (ret_both (4794697086780616226 : int64)));
      U64 (solve_lift (ret_both (8158064640168781261 : int64)));
      U64 (solve_lift (ret_both (13096744586834688815 : int64)));
      U64 (solve_lift (ret_both (16840607885511220156 : int64)));
      U64 (solve_lift (ret_both (4131703408338449720 : int64)));
      U64 (solve_lift (ret_both (6480981068601479193 : int64)));
      U64 (solve_lift (ret_both (10538285296894168987 : int64)));
      U64 (solve_lift (ret_both (12329834152419229976 : int64)));
      U64 (solve_lift (ret_both (15566598209576043074 : int64)));
      U64 (solve_lift (ret_both (1334009975649890238 : int64)));
      U64 (solve_lift (ret_both (2608012711638119052 : int64)));
      U64 (solve_lift (ret_both (6128411473006802146 : int64)));
      U64 (solve_lift (ret_both (8268148722764581231 : int64)));
      U64 (solve_lift (ret_both (9286055187155687089 : int64)));
      U64 (solve_lift (ret_both (11230858885718282805 : int64)));
      U64 (solve_lift (ret_both (13951009754708518548 : int64)));
      U64 (solve_lift (ret_both (16472876342353939154 : int64)));
      U64 (solve_lift (ret_both (17275323862435702243 : int64)));
      U64 (solve_lift (ret_both (1135362057144423861 : int64)));
      U64 (solve_lift (ret_both (2597628984639134821 : int64)));
      U64 (solve_lift (ret_both (3308224258029322869 : int64)));
      U64 (solve_lift (ret_both (5365058923640841347 : int64)));
      U64 (solve_lift (ret_both (6679025012923562964 : int64)));
      U64 (solve_lift (ret_both (8573033837759648693 : int64)));
      U64 (solve_lift (ret_both (10970295158949994411 : int64)));
      U64 (solve_lift (ret_both (12119686244451234320 : int64)));
      U64 (solve_lift (ret_both (12683024718118986047 : int64)));
      U64 (solve_lift (ret_both (13788192230050041572 : int64)));
      U64 (solve_lift (ret_both (14330467153632333762 : int64)));
      U64 (solve_lift (ret_both (15395433587784984357 : int64)));
      U64 (solve_lift (ret_both (489312712824947311 : int64)));
      U64 (solve_lift (ret_both (1452737877330783856 : int64)));
      U64 (solve_lift (ret_both (2861767655752347644 : int64)));
      U64 (solve_lift (ret_both (3322285676063803686 : int64)));
      U64 (solve_lift (ret_both (5560940570517711597 : int64)));
      U64 (solve_lift (ret_both (5996557281743188959 : int64)));
      U64 (solve_lift (ret_both (7280758554555802590 : int64)));
      U64 (solve_lift (ret_both (8532644243296465576 : int64)));
      U64 (solve_lift (ret_both (9350256976987008742 : int64)));
      U64 (solve_lift (ret_both (10552545826968843579 : int64)));
      U64 (solve_lift (ret_both (11727347734174303076 : int64)));
      U64 (solve_lift (ret_both (12113106623233404929 : int64)));
      U64 (solve_lift (ret_both (14000437183269869457 : int64)));
      U64 (solve_lift (ret_both (14369950271660146224 : int64)));
      U64 (solve_lift (ret_both (15101387698204529176 : int64)));
      U64 (solve_lift (ret_both (15463397548674623760 : int64)));
      U64 (solve_lift (ret_both (17586052441742319658 : int64)));
      U64 (solve_lift (ret_both (1182934255886127544 : int64)));
      U64 (solve_lift (ret_both (1847814050463011016 : int64)));
      U64 (solve_lift (ret_both (2177327727835720531 : int64)));
      U64 (solve_lift (ret_both (2830643537854262169 : int64)));
      U64 (solve_lift (ret_both (3796741975233480872 : int64)));
      U64 (solve_lift (ret_both (4115178125766777443 : int64)));
      U64 (solve_lift (ret_both (5681478168544905931 : int64)));
      U64 (solve_lift (ret_both (6601373596472566643 : int64)));
      U64 (solve_lift (ret_both (7507060721942968483 : int64)));
      U64 (solve_lift (ret_both (8399075790359081724 : int64)));
      U64 (solve_lift (ret_both (8693463985226723168 : int64)));
      U64 (solve_lift (ret_both (9568029438360202098 : int64)));
      U64 (solve_lift (ret_both (10144078919501101548 : int64)));
      U64 (solve_lift (ret_both (10430055236837252648 : int64)));
      U64 (solve_lift (ret_both (11840083180663258601 : int64)));
      U64 (solve_lift (ret_both (13761210420658862357 : int64)));
      U64 (solve_lift (ret_both (14299343276471374635 : int64)));
      U64 (solve_lift (ret_both (14566680578165727644 : int64)));
      U64 (solve_lift (ret_both (15097957966210449927 : int64)));
      U64 (solve_lift (ret_both (16922976911328602910 : int64)));
      U64 (solve_lift (ret_both (17689382322260857208 : int64)));
      U64 (solve_lift (ret_both (500013540394364858 : int64)));
      U64 (solve_lift (ret_both (748580250866718886 : int64)));
      U64 (solve_lift (ret_both (1242879168328830382 : int64)));
      U64 (solve_lift (ret_both (1977374033974150939 : int64)));
      U64 (solve_lift (ret_both (2944078676154940804 : int64)));
      U64 (solve_lift (ret_both (3659926193048069267 : int64)));
      U64 (solve_lift (ret_both (4368137639120453308 : int64)));
      U64 (solve_lift (ret_both (4836135668995329356 : int64)));
      U64 (solve_lift (ret_both (5532061633213252278 : int64)));
      U64 (solve_lift (ret_both (6448918945643986474 : int64)));
      U64 (solve_lift (ret_both (6902733635092675308 : int64)));
      U64 (solve_lift (ret_both (7801388544844847127 : int64)))]) : both L I (t_RoundConstantsTable).
Fail Next Obligation.

Definition h_loc : Location :=
  (t_Hash;2%nat).
Equations shuffle {L1 : {fset Location}} {L2 : {fset Location}} {I1 : Interface} {I2 : Interface} (ws : both L1 I1 (t_RoundConstantsTable)) (hashi : both L2 I2 (t_Hash)) : both (L1 :|: L2 :|: fset [h_loc;tmp_loc]) (I1 :|: I2) (t_Hash) :=
  shuffle ws hashi  :=
    letb h loc(h_loc) := hashi in
    letb _ := foldi_both_list (f_into_iter (Build_t_Range (f_start := ret_both (0 : uint_size)) (f_end := v_K_SIZE))) (fun i =>
      ssp (fun _ =>
        letb a0 := h.a[(ret_both (0 : int32))] in
        letb b0 := h.a[(ret_both (1 : int32))] in
        letb c0 := h.a[(ret_both (2 : int32))] in
        letb d0 := h.a[(ret_both (3 : int32))] in
        letb e0 := h.a[(ret_both (4 : int32))] in
        letb f0 := h.a[(ret_both (5 : int32))] in
        letb g0 := h.a[(ret_both (6 : int32))] in
        letb (h0 : t_U64) := h.a[(ret_both (7 : int32))] in
        letb t1 := (((h0 .+ (sigma e0 (ret_both (1 : uint_size)) (ret_both (1 : uint_size)))) .+ (ch e0 f0 g0)) .+ (v_K_TABLE.a[i])) .+ (ws.a[i]) in
        letb t2 := (sigma a0 (ret_both (0 : uint_size)) (ret_both (1 : uint_size))) .+ (maj a0 b0 c0) in
        letb _ := assign todo(term) in
        letb _ := assign todo(term) in
        letb _ := assign todo(term) in
        letb _ := assign todo(term) in
        letb _ := assign todo(term) in
        letb _ := assign todo(term) in
        letb _ := assign todo(term) in
        letb _ := assign todo(term) in
        solve_lift (ret_both (tt : 'unit)) : both (*2*)(L1:|:L2:|:fset [h_loc;tmp_loc]) (I1:|:I2) ('unit))) (ret_both (tt : 'unit)) in
    solve_lift h : both (L1 :|: L2 :|: fset [h_loc;tmp_loc]) (I1 :|: I2) (t_Hash).
Fail Next Obligation.

Definition h_loc : Location :=
  (t_Hash;3%nat).
Equations compress {L1 : {fset Location}} {L2 : {fset Location}} {I1 : Interface} {I2 : Interface} (block : both L1 I1 (t_Block)) (h_in : both L2 I2 (t_Hash)) : both (L1 :|: L2 :|: fset [h_loc;s_loc;tmp_loc;h_loc;tmp_loc]) (I1 :|: I2) (t_Hash) :=
  compress block h_in  :=
    letb s := schedule block in
    letb h loc(h_loc) := shuffle s h_in in
    letb _ := foldi_both_list (f_into_iter (Build_t_Range (f_start := ret_both (0 : int32)) (f_end := ret_both (8 : int32)))) (fun i =>
      ssp (fun _ =>
        assign todo(term) : both (*4*)(L1:|:L2:|:fset [h_loc;h_loc;s_loc;tmp_loc]) (I1:|:I2) ('unit))) (ret_both (tt : 'unit)) in
    solve_lift h : both (L1 :|: L2 :|: fset [h_loc;s_loc;tmp_loc;h_loc;tmp_loc]) (I1 :|: I2) (t_Hash).
Fail Next Obligation.

Definition h_loc : Location :=
  (t_Hash;4%nat).
Definition last_block_loc : Location :=
  (t_Block;5%nat).
Definition last_block_len_loc : Location :=
  (uint_size;6%nat).
Definition pad_block_loc : Location :=
  (t_Block;7%nat).
Equations hash {L1 : {fset Location}} {I1 : Interface} (msg : both L1 I1 (t_Seq (t_U8))) : both (L1 :|: fset [h_loc;last_block_loc;last_block_len_loc;pad_block_loc;h_loc;s_loc;tmp_loc;h_loc;tmp_loc]) I1 (t_Sha512Digest) :=
  hash msg  :=
    letb h loc(h_loc) := v_HASH_INIT in
    letb last_block loc(last_block_loc) := impl__Block__new (ret_both (tt : 'unit)) in
    letb last_block_len loc(last_block_len_loc) := ret_both (0 : uint_size) in
    letb _ := foldi_both_list (f_into_iter (Build_t_Range (f_start := ret_both (0 : uint_size)) (f_end := impl_41__num_chunks msg v_BLOCK_SIZE))) (fun i =>
      ssp (fun _ =>
        letb '(block_len,block) := impl_41__get_chunk msg v_BLOCK_SIZE i in
        solve_lift (ifb block_len <.? v_BLOCK_SIZE
        then letb _ := assign todo(term) in
        letb _ := assign todo(term) in
        ret_both (tt : 'unit)
        else letb compress_input := impl__Block__from_seq block in
        letb _ := assign todo(term) in
        ret_both (tt : 'unit)) : both (*5*)(L1:|:L1:|:fset [h_loc;h_loc;h_loc;s_loc;tmp_loc]) (I1:|:I1) ('unit))) (ret_both (tt : 'unit)) in
    letb _ := assign todo(term) in
    letb len_bist := U128 (cast_int (WS2 := _) ((impl_41__len msg) .* (ret_both (8 : uint_size)))) in
    letb _ := ifb last_block_len <.? (v_BLOCK_SIZE .- v_LEN_SIZE)
    then letb _ := assign todo(term) in
    letb _ := assign todo(term) in
    ret_both (tt : 'unit)
    else letb pad_block loc(pad_block_loc) := impl__Block__new (ret_both (tt : 'unit)) in
    letb _ := assign todo(term) in
    letb _ := assign todo(term) in
    letb _ := assign todo(term) in
    ret_both (tt : 'unit) in
    solve_lift (impl__Sha512Digest__from_seq (impl__Hash__to_be_bytes h)) : both (L1 :|: fset [h_loc;last_block_loc;last_block_len_loc;pad_block_loc;h_loc;s_loc;tmp_loc;h_loc;tmp_loc]) I1 (t_Sha512Digest).
Fail Next Obligation.

Equations sha512 {L1 : {fset Location}} {I1 : Interface} (msg : both L1 I1 (t_Seq (t_U8))) : both (L1 :|: fset [h_loc;last_block_loc;last_block_len_loc;pad_block_loc;h_loc;s_loc;tmp_loc;h_loc;tmp_loc]) I1 (t_Sha512Digest) :=
  sha512 msg  :=
    solve_lift (hash msg) : both (L1 :|: fset [h_loc;last_block_loc;last_block_len_loc;pad_block_loc;h_loc;s_loc;tmp_loc;h_loc;tmp_loc]) I1 (t_Sha512Digest).
Fail Next Obligation.
