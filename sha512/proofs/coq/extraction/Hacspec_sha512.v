(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Hacspec_lib.

Notation Block_t := (nseq int8 BLOCK_SIZE).
Definition Block : Block_t -> Block_t :=
  id.

Notation Hash_t := (nseq int64 8).
Definition Hash : Hash_t -> Hash_t :=
  id.

Notation OpTableType_t := (nseq int32 12).
Definition OpTableType : OpTableType_t -> OpTableType_t :=
  id.

Notation RoundConstantsTable_t := (nseq int64 K_SIZE).
Definition RoundConstantsTable : RoundConstantsTable_t -> RoundConstantsTable_t :=
  id.

Notation Sha512Digest_t := (nseq int8 HASH_SIZE).
Definition Sha512Digest : Sha512Digest_t -> Sha512Digest_t :=
  id.

(*Not implemented yet? todo(item)*)

Definition v_BLOCK_SIZE : uint_size :=
  (@repr WORDSIZE32 128).

Definition v_HASH_SIZE : uint_size :=
  (@repr WORDSIZE32 512)./(@repr WORDSIZE32 8).

Definition v_K_SIZE : uint_size :=
  (@repr WORDSIZE32 80).

Definition v_LEN_SIZE : uint_size :=
  (@repr WORDSIZE32 16).

Definition v_OP_TABLE : t_OpTableType_t :=
  OpTableType (array_from_list [(@repr WORDSIZE32 28);
    (@repr WORDSIZE32 34);
    (@repr WORDSIZE32 39);
    (@repr WORDSIZE32 14);
    (@repr WORDSIZE32 18);
    (@repr WORDSIZE32 41);
    (@repr WORDSIZE32 1);
    (@repr WORDSIZE32 8);
    (@repr WORDSIZE32 7);
    (@repr WORDSIZE32 19);
    (@repr WORDSIZE32 61);
    (@repr WORDSIZE32 6)]).

Definition ch (x : t_U64_t) (y : t_U64_t) (z : t_U64_t) : t_U64_t :=
  (x.&y).^((f_not x).&z).

Definition maj (x : t_U64_t) (y : t_U64_t) (z : t_U64_t) : t_U64_t :=
  (x.&y).^((x.&z).^(y.&z)).

Definition sigma (x : t_U64_t) (i : uint_size) (op : uint_size) : t_U64_t :=
  let tmp := (impl__U64__rotate_right x (v_OP_TABLE.[(((@repr WORDSIZE32 3).*i).+(@repr WORDSIZE32 2))])) : t_U64_t in
  let tmp := (if
      op=.?(@repr WORDSIZE32 0)
    then
      x shift_right (v_OP_TABLE.[(((@repr WORDSIZE32 3).*i).+(@repr WORDSIZE32 2))])
    else
      tmp) : t_U64_t in
  ((impl__U64__rotate_right x (v_OP_TABLE.[((@repr WORDSIZE32 3).*i)])).^(impl__U64__rotate_right x (v_OP_TABLE.[(((@repr WORDSIZE32 3).*i).+(@repr WORDSIZE32 1))]))).^tmp.

Definition schedule (block : t_Block_t) : t_RoundConstantsTable_t :=
  let b := (impl__Block__to_be_U64s block) : t_Seq_t t_U64_t in
  let s := (impl__RoundConstantsTable__new) : t_RoundConstantsTable_t in
  let s := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)v_K_SIZE)) s (fun s i =>
      if
        i<.?(@repr WORDSIZE32 16)
      then
        let s := (update_at_usize s i (b.[i])) : t_RoundConstantsTable_t in
        s
      else
        let t16 := (s.[(i.-(@repr WORDSIZE32 16))]) : t_U64_t in
        let t15 := (s.[(i.-(@repr WORDSIZE32 15))]) : t_U64_t in
        let t7 := (s.[(i.-(@repr WORDSIZE32 7))]) : t_U64_t in
        let t2 := (s.[(i.-(@repr WORDSIZE32 2))]) : t_U64_t in
        let s1 := (sigma t2 (@repr WORDSIZE32 3) (@repr WORDSIZE32 0)) : t_U64_t in
        let s0 := (sigma t15 (@repr WORDSIZE32 2) (@repr WORDSIZE32 0)) : t_U64_t in
        let s := (update_at_usize s i (((s1.+t7).+s0).+t16)) : t_RoundConstantsTable_t in
        s)) : t_RoundConstantsTable_t in
  s.

Definition v_HASH_INIT : t_Hash_t :=
  Hash (array_from_list [U64 (@repr WORDSIZE64 7640891576956012808);
    U64 (@repr WORDSIZE64 13503953896175478587);
    U64 (@repr WORDSIZE64 4354685564936845355);
    U64 (@repr WORDSIZE64 11912009170470909681);
    U64 (@repr WORDSIZE64 5840696475078001361);
    U64 (@repr WORDSIZE64 11170449401992604703);
    U64 (@repr WORDSIZE64 2270897969802886507);
    U64 (@repr WORDSIZE64 6620516959819538809)]).

Definition v_K_TABLE : t_RoundConstantsTable_t :=
  RoundConstantsTable (array_from_list [U64 (@repr WORDSIZE64 4794697086780616226);
    U64 (@repr WORDSIZE64 8158064640168781261);
    U64 (@repr WORDSIZE64 13096744586834688815);
    U64 (@repr WORDSIZE64 16840607885511220156);
    U64 (@repr WORDSIZE64 4131703408338449720);
    U64 (@repr WORDSIZE64 6480981068601479193);
    U64 (@repr WORDSIZE64 10538285296894168987);
    U64 (@repr WORDSIZE64 12329834152419229976);
    U64 (@repr WORDSIZE64 15566598209576043074);
    U64 (@repr WORDSIZE64 1334009975649890238);
    U64 (@repr WORDSIZE64 2608012711638119052);
    U64 (@repr WORDSIZE64 6128411473006802146);
    U64 (@repr WORDSIZE64 8268148722764581231);
    U64 (@repr WORDSIZE64 9286055187155687089);
    U64 (@repr WORDSIZE64 11230858885718282805);
    U64 (@repr WORDSIZE64 13951009754708518548);
    U64 (@repr WORDSIZE64 16472876342353939154);
    U64 (@repr WORDSIZE64 17275323862435702243);
    U64 (@repr WORDSIZE64 1135362057144423861);
    U64 (@repr WORDSIZE64 2597628984639134821);
    U64 (@repr WORDSIZE64 3308224258029322869);
    U64 (@repr WORDSIZE64 5365058923640841347);
    U64 (@repr WORDSIZE64 6679025012923562964);
    U64 (@repr WORDSIZE64 8573033837759648693);
    U64 (@repr WORDSIZE64 10970295158949994411);
    U64 (@repr WORDSIZE64 12119686244451234320);
    U64 (@repr WORDSIZE64 12683024718118986047);
    U64 (@repr WORDSIZE64 13788192230050041572);
    U64 (@repr WORDSIZE64 14330467153632333762);
    U64 (@repr WORDSIZE64 15395433587784984357);
    U64 (@repr WORDSIZE64 489312712824947311);
    U64 (@repr WORDSIZE64 1452737877330783856);
    U64 (@repr WORDSIZE64 2861767655752347644);
    U64 (@repr WORDSIZE64 3322285676063803686);
    U64 (@repr WORDSIZE64 5560940570517711597);
    U64 (@repr WORDSIZE64 5996557281743188959);
    U64 (@repr WORDSIZE64 7280758554555802590);
    U64 (@repr WORDSIZE64 8532644243296465576);
    U64 (@repr WORDSIZE64 9350256976987008742);
    U64 (@repr WORDSIZE64 10552545826968843579);
    U64 (@repr WORDSIZE64 11727347734174303076);
    U64 (@repr WORDSIZE64 12113106623233404929);
    U64 (@repr WORDSIZE64 14000437183269869457);
    U64 (@repr WORDSIZE64 14369950271660146224);
    U64 (@repr WORDSIZE64 15101387698204529176);
    U64 (@repr WORDSIZE64 15463397548674623760);
    U64 (@repr WORDSIZE64 17586052441742319658);
    U64 (@repr WORDSIZE64 1182934255886127544);
    U64 (@repr WORDSIZE64 1847814050463011016);
    U64 (@repr WORDSIZE64 2177327727835720531);
    U64 (@repr WORDSIZE64 2830643537854262169);
    U64 (@repr WORDSIZE64 3796741975233480872);
    U64 (@repr WORDSIZE64 4115178125766777443);
    U64 (@repr WORDSIZE64 5681478168544905931);
    U64 (@repr WORDSIZE64 6601373596472566643);
    U64 (@repr WORDSIZE64 7507060721942968483);
    U64 (@repr WORDSIZE64 8399075790359081724);
    U64 (@repr WORDSIZE64 8693463985226723168);
    U64 (@repr WORDSIZE64 9568029438360202098);
    U64 (@repr WORDSIZE64 10144078919501101548);
    U64 (@repr WORDSIZE64 10430055236837252648);
    U64 (@repr WORDSIZE64 11840083180663258601);
    U64 (@repr WORDSIZE64 13761210420658862357);
    U64 (@repr WORDSIZE64 14299343276471374635);
    U64 (@repr WORDSIZE64 14566680578165727644);
    U64 (@repr WORDSIZE64 15097957966210449927);
    U64 (@repr WORDSIZE64 16922976911328602910);
    U64 (@repr WORDSIZE64 17689382322260857208);
    U64 (@repr WORDSIZE64 500013540394364858);
    U64 (@repr WORDSIZE64 748580250866718886);
    U64 (@repr WORDSIZE64 1242879168328830382);
    U64 (@repr WORDSIZE64 1977374033974150939);
    U64 (@repr WORDSIZE64 2944078676154940804);
    U64 (@repr WORDSIZE64 3659926193048069267);
    U64 (@repr WORDSIZE64 4368137639120453308);
    U64 (@repr WORDSIZE64 4836135668995329356);
    U64 (@repr WORDSIZE64 5532061633213252278);
    U64 (@repr WORDSIZE64 6448918945643986474);
    U64 (@repr WORDSIZE64 6902733635092675308);
    U64 (@repr WORDSIZE64 7801388544844847127)]).

Definition shuffle (ws : t_RoundConstantsTable_t) (hashi : t_Hash_t) : t_Hash_t :=
  let h := (hashi) : t_Hash_t in
  let h := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)v_K_SIZE)) h (fun h i =>
      let a0 := (h.[(@repr WORDSIZE32 0)]) : t_U64_t in
      let b0 := (h.[(@repr WORDSIZE32 1)]) : t_U64_t in
      let c0 := (h.[(@repr WORDSIZE32 2)]) : t_U64_t in
      let d0 := (h.[(@repr WORDSIZE32 3)]) : t_U64_t in
      let e0 := (h.[(@repr WORDSIZE32 4)]) : t_U64_t in
      let f0 := (h.[(@repr WORDSIZE32 5)]) : t_U64_t in
      let g0 := (h.[(@repr WORDSIZE32 6)]) : t_U64_t in
      let h0 := (h.[(@repr WORDSIZE32 7)]) : t_U64_t in
      let t1 := ((((h0.+(sigma e0 (@repr WORDSIZE32 1) (@repr WORDSIZE32 1))).+(ch e0 f0 g0)).+(v_K_TABLE.[i])).+(ws.[i])) : t_U64_t in
      let t2 := ((sigma a0 (@repr WORDSIZE32 0) (@repr WORDSIZE32 1)).+(maj a0 b0 c0)) : t_U64_t in
      let h := (update_at h (@repr WORDSIZE32 0) (t1.+t2)) : t_Hash_t in
      let h := (update_at h (@repr WORDSIZE32 1) a0) : t_Hash_t in
      let h := (update_at h (@repr WORDSIZE32 2) b0) : t_Hash_t in
      let h := (update_at h (@repr WORDSIZE32 3) c0) : t_Hash_t in
      let h := (update_at h (@repr WORDSIZE32 4) (d0.+t1)) : t_Hash_t in
      let h := (update_at h (@repr WORDSIZE32 5) e0) : t_Hash_t in
      let h := (update_at h (@repr WORDSIZE32 6) f0) : t_Hash_t in
      let h := (update_at h (@repr WORDSIZE32 7) g0) : t_Hash_t in
      h)) : t_Hash_t in
  h.

Definition compress (block : t_Block_t) (h_in : t_Hash_t) : t_Hash_t :=
  let s := (schedule block) : t_RoundConstantsTable_t in
  let h := (shuffle s h_in) : t_Hash_t in
  let h := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 8))) h (fun h i =>
      update_at h i ((h.[i]).+(h_in.[i])))) : t_Hash_t in
  h.

Definition hash (msg : t_Seq_t t_U8_t) : t_Sha512Digest_t :=
  let h := (v_HASH_INIT) : t_Hash_t in
  let last_block := (impl__Block__new) : t_Block_t in
  let last_block_len := ((@repr WORDSIZE32 0)) : uint_size in
  let '(h,last_block,last_block_len) := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(impl_41__num_chunks msg v_BLOCK_SIZE))) (h,last_block,last_block_len) (fun '(h,last_block,last_block_len) i =>
      let '(block_len,block) := (impl_41__get_chunk msg v_BLOCK_SIZE i) : (uint_size Ã— t_Seq_t t_U8_t) in
      if
        block_len<.?v_BLOCK_SIZE
      then
        let last_block := (f_update_start impl__Block__new block) : t_Block_t in
        let last_block_len := (block_len) : uint_size in
        (h,last_block,last_block_len)
      else
        let compress_input := (impl__Block__from_seq block) : t_Block_t in
        let h := (compress compress_input h) : t_Hash_t in
        (h,last_block,last_block_len))) : (t_Hash_t Ã— t_Block_t Ã— uint_size) in
  let last_block := (update_at_usize last_block last_block_len (U8 (@repr WORDSIZE8 128))) : t_Block_t in
  let len_bist := (U128 (cast ((impl_41__len msg).*(@repr WORDSIZE32 8)))) : t_U128_t in
  let '(h,last_block) := (if
      last_block_len<.?(v_BLOCK_SIZE.-v_LEN_SIZE)
    then
      let last_block := (f_update last_block (v_BLOCK_SIZE.-v_LEN_SIZE) (v_U128_to_be_bytes len_bist)) : t_Block_t in
      let h := (compress last_block h) : t_Hash_t in
      (h,last_block)
    else
      let pad_block := (impl__Block__new) : t_Block_t in
      let pad_block := (f_update pad_block (v_BLOCK_SIZE.-v_LEN_SIZE) (v_U128_to_be_bytes len_bist)) : t_Block_t in
      let h := (compress last_block h) : t_Hash_t in
      let h := (compress pad_block h) : t_Hash_t in
      (h,last_block)) : (t_Hash_t Ã— t_Block_t) in
  impl__Sha512Digest__from_seq (impl__Hash__to_be_bytes h).

Definition sha512 (msg : t_Seq_t t_U8_t) : t_Sha512Digest_t :=
  hash msg.
