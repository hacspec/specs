(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Hacspec_lib.

(*Not implemented yet? todo(item)*)

Notation Constants_t := (nseq int32 4).
Definition Constants : Constants_t -> Constants_t :=
  id.

Notation State_t := (nseq int32 16).
Definition State : State_t -> State_t :=
  id.

Notation Block_t := (nseq int8 64).
Definition Block : Block_t -> Block_t :=
  id.

Notation ChaChaIV_t := (nseq int8 12).
Definition ChaChaIV : ChaChaIV_t -> ChaChaIV_t :=
  id.

Notation ChaChaKey_t := (nseq int8 32).
Definition ChaChaKey : ChaChaKey_t -> ChaChaKey_t :=
  id.

Definition chacha20_line (a : uint_size) (b : uint_size) (d : uint_size) (s : uint_size) (m : t_State_t) : t_State_t :=
  let state := (m) : t_State_t in
  let state := (update_at_usize state a ((state.[a]).+(state.[b]))) : t_State_t in
  let state := (update_at_usize state d ((state.[d]).^(state.[a]))) : t_State_t in
  let state := (update_at_usize state d (impl__U32__rotate_left (state.[d]) s)) : t_State_t in
  state.

Definition chacha20_quarter_round (a : uint_size) (b : uint_size) (c : uint_size) (d : uint_size) (state : t_State_t) : t_State_t :=
  let state := (chacha20_line a b d (@repr WORDSIZE32 16) state) : t_State_t in
  let state := (chacha20_line c d b (@repr WORDSIZE32 12) state) : t_State_t in
  let state := (chacha20_line a b d (@repr WORDSIZE32 8) state) : t_State_t in
  chacha20_line c d b (@repr WORDSIZE32 7) state.

Definition chacha20_double_round (state : t_State_t) : t_State_t :=
  let state := (chacha20_quarter_round (@repr WORDSIZE32 0) (@repr WORDSIZE32 4) (@repr WORDSIZE32 8) (@repr WORDSIZE32 12) state) : t_State_t in
  let state := (chacha20_quarter_round (@repr WORDSIZE32 1) (@repr WORDSIZE32 5) (@repr WORDSIZE32 9) (@repr WORDSIZE32 13) state) : t_State_t in
  let state := (chacha20_quarter_round (@repr WORDSIZE32 2) (@repr WORDSIZE32 6) (@repr WORDSIZE32 10) (@repr WORDSIZE32 14) state) : t_State_t in
  let state := (chacha20_quarter_round (@repr WORDSIZE32 3) (@repr WORDSIZE32 7) (@repr WORDSIZE32 11) (@repr WORDSIZE32 15) state) : t_State_t in
  let state := (chacha20_quarter_round (@repr WORDSIZE32 0) (@repr WORDSIZE32 5) (@repr WORDSIZE32 10) (@repr WORDSIZE32 15) state) : t_State_t in
  let state := (chacha20_quarter_round (@repr WORDSIZE32 1) (@repr WORDSIZE32 6) (@repr WORDSIZE32 11) (@repr WORDSIZE32 12) state) : t_State_t in
  let state := (chacha20_quarter_round (@repr WORDSIZE32 2) (@repr WORDSIZE32 7) (@repr WORDSIZE32 8) (@repr WORDSIZE32 13) state) : t_State_t in
  chacha20_quarter_round (@repr WORDSIZE32 3) (@repr WORDSIZE32 4) (@repr WORDSIZE32 9) (@repr WORDSIZE32 14) state.

Definition chacha20_rounds (state : t_State_t) : t_State_t :=
  let st := (state) : t_State_t in
  let st := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 10))) st (fun st _i =>
      chacha20_double_round st)) : t_State_t in
  st.

Definition chacha20_core (ctr : t_U32_t) (st0 : t_State_t) : t_State_t :=
  let state := (st0) : t_State_t in
  let state := (update_at state (@repr WORDSIZE32 12) ((state.[(@repr WORDSIZE32 12)]).+ctr)) : t_State_t in
  let k := (chacha20_rounds state) : t_State_t in
  k.+state.

Definition chacha20_constants_init : t_Constants_t :=
  let constants := (impl__Constants__new) : t_Constants_t in
  let constants := (update_at constants (@repr WORDSIZE32 0) (U32 (@repr WORDSIZE32 1634760805))) : t_Constants_t in
  let constants := (update_at constants (@repr WORDSIZE32 1) (U32 (@repr WORDSIZE32 857760878))) : t_Constants_t in
  let constants := (update_at constants (@repr WORDSIZE32 2) (U32 (@repr WORDSIZE32 2036477234))) : t_Constants_t in
  let constants := (update_at constants (@repr WORDSIZE32 3) (U32 (@repr WORDSIZE32 1797285236))) : t_Constants_t in
  constants.

Definition chacha20_init (key : t_ChaChaKey_t) (iv : t_ChaChaIV_t) (ctr : t_U32_t) : t_State_t :=
  let st := (impl__State__new) : t_State_t in
  let st := (f_update st (@repr WORDSIZE32 0) chacha20_constants_init) : t_State_t in
  let st := (f_update st (@repr WORDSIZE32 4) (impl__ChaChaKey__to_le_U32s key)) : t_State_t in
  let st := (update_at st (@repr WORDSIZE32 12) ctr) : t_State_t in
  let st := (f_update st (@repr WORDSIZE32 13) (impl__ChaChaIV__to_le_U32s iv)) : t_State_t in
  st.

Definition chacha20_encrypt_block (st0 : t_State_t) (ctr : t_U32_t) (plain : t_Block_t) : t_Block_t :=
  let st := (chacha20_core ctr st0) : t_State_t in
  let pl := (impl__State__from_seq (impl__Block__to_le_U32s plain)) : t_State_t in
  let st := (pl.^st) : t_State_t in
  impl__Block__from_seq (impl__State__to_le_bytes st).

Definition chacha20_encrypt_last (st0 : t_State_t) (ctr : t_U32_t) (plain : t_Seq_t t_U8_t) : t_Seq_t t_U8_t :=
  let b := (impl__Block__new) : t_Block_t in
  let b := (f_update b (@repr WORDSIZE32 0) plain) : t_Block_t in
  let b := (chacha20_encrypt_block st0 ctr b) : t_Block_t in
  impl__Block__slice b (@repr WORDSIZE32 0) (impl_41__len plain).

Definition chacha20_key_block (state : t_State_t) : t_Block_t :=
  let state := (chacha20_core (U32 (@repr WORDSIZE32 0)) state) : t_State_t in
  impl__Block__from_seq (impl__State__to_le_bytes state).

Definition chacha20_key_block0 (key : t_ChaChaKey_t) (iv : t_ChaChaIV_t) : t_Block_t :=
  let state := (chacha20_init key iv (U32 (@repr WORDSIZE32 0))) : t_State_t in
  chacha20_key_block state.

Definition chacha20_update (st0 : t_State_t) (m : t_Seq_t t_U8_t) : t_Seq_t t_U8_t :=
  let blocks_out := (impl_41__new (impl_41__len m)) : t_Seq_t t_U8_t in
  let n_blocks := (impl_41__num_exact_chunks m (@repr WORDSIZE32 64)) : uint_size in
  let blocks_out := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)n_blocks)) blocks_out (fun blocks_out i =>
      let msg_block := (impl_41__get_exact_chunk m (@repr WORDSIZE32 64) i) : t_Seq_t t_U8_t in
      let b := (chacha20_encrypt_block st0 (U32 (cast i)) (impl__Block__from_seq msg_block)) : t_Block_t in
      let blocks_out := (impl_41__set_exact_chunk blocks_out (@repr WORDSIZE32 64) i b) : t_Seq_t t_U8_t in
      blocks_out)) : t_Seq_t t_U8_t in
  let last_block := (impl_41__get_remainder_chunk m (@repr WORDSIZE32 64)) : t_Seq_t t_U8_t in
  let blocks_out := (if
      (impl_41__len last_block)<>(@repr WORDSIZE32 0)
    then
      let b := (chacha20_encrypt_last st0 (U32 (cast n_blocks)) last_block) : t_Seq_t t_U8_t in
      let blocks_out := (impl_41__set_chunk blocks_out (@repr WORDSIZE32 64) n_blocks b) : t_Seq_t t_U8_t in
      blocks_out
    else
      blocks_out) : t_Seq_t t_U8_t in
  blocks_out.

Definition chacha20 (key : t_ChaChaKey_t) (iv : t_ChaChaIV_t) (ctr : int32) (m : t_Seq_t t_U8_t) : t_Seq_t t_U8_t :=
  let state := (chacha20_init key iv (U32 ctr)) : t_State_t in
  chacha20_update state m.
