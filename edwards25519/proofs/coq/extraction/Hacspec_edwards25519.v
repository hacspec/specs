(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Hacspec_lib.

Notation t_EdPoint_t := ((t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t)).

Inductive t_Error : Type :=
| Error_InvalidPublickeyt_Error
| Error_InvalidSignaturet_Error
| Error_InvalidSt_Error
| Error_InvalidRt_Error
| Error_SmallOrderPointt_Error
| Error_NotEnoughRandomnesst_Error.

Notation t_VerifyResult_t := (t_Result_t (unit) (t_Error_t)).

(*Not implemented yet? todo(item)*)

Definition point_eq (p : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t)) (q : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t)) : bool :=
  let '(x1,y1,z1,_) := (p) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let '(x2,y2,z2,_) := (q) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  andb ((x1.*z2)=.?(x2.*z1)) ((y1.*z2)=.?(y2.*z1)).

Notation CompressedEdPoint_t := (nseq int8 32).
Definition CompressedEdPoint : CompressedEdPoint_t -> CompressedEdPoint_t :=
  id.

Notation t_PublicKey_t := (t_CompressedEdPoint_t).

Notation SerializedScalar_t := (nseq int8 32).
Definition SerializedScalar : SerializedScalar_t -> SerializedScalar_t :=
  id.

Notation t_SecretKey_t := (t_SerializedScalar_t).

Notation Signature_t := (nseq int8 64).
Definition Signature : Signature_t -> Signature_t :=
  id.

Notation BigIntegerCanvas := (nseq int8 256).
Notation BigInteger_t := (nat_mod 0x8000000000000000000000000000000080000000000000000000000000000000).
Definition BigInteger : BigInteger_t -> BigInteger_t :=
  id.

Notation BigScalarCanvas := (nseq int8 512).
Notation BigScalar_t := (nat_mod 0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed).
Definition BigScalar : BigScalar_t -> BigScalar_t :=
  id.

Notation FieldCanvas := (nseq int8 256).
Notation Ed25519FieldElement_t := (nat_mod 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed).
Definition Ed25519FieldElement : Ed25519FieldElement_t -> Ed25519FieldElement_t :=
  id.

Notation ScalarCanvas := (nseq int8 256).
Notation Scalar_t := (nat_mod 0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed).
Definition Scalar : Scalar_t -> Scalar_t :=
  id.

Definition point_normalize (q : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) :=
  let '(qx,qy,qz,_) := (q) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let px := (qx.*(impl__Ed25519FieldElement__inv qz)) : t_Ed25519FieldElement_t in
  let py := (qy.*(impl__Ed25519FieldElement__inv qz)) : t_Ed25519FieldElement_t in
  let pz := (f_ONE) : t_Ed25519FieldElement_t in
  let pt := (px.*py) : t_Ed25519FieldElement_t in
  (px,py,pz,pt).

Definition point_identity : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) :=
  (f_ZERO,f_ONE,f_ONE,f_ZERO).

Definition point_neg (p : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) :=
  let '(x,y,z,t) := (p) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  (f_ZERO.-x,y,z,f_ZERO.-t).

Definition secret_expand : t_Never_t :=
  failure (AST import) Fatal error: something we considered as impossible occurred! Please report this by submitting an issue on GitHub!
Details: [import_thir:literal] got an error literal: this means the Rust compiler or Hax's frontend probably reported errors above.
 { Types.attributes = [];
  contents =
  Types.Literal {
    lit =
    { Types.node = Types.Err;
      span =
      { Types.filename =
        (Types.Real (Types.LocalPath "edwards25519/src/edwards25519.rs"));
        hi = { Types.col = "0"; line = "1" };
        lo = { Types.col = "0"; line = "1" } }
      };
    neg = false};
  hir_id = None;
  span =
  { Types.filename =
    (Types.Real (Types.LocalPath "edwards25519/src/edwards25519.rs"));
    hi = { Types.col = "75"; line = "297" };
    lo = { Types.col = "0"; line = "297" } };
  ty = Types.Never }.

Definition v_BASE : t_CompressedEdPoint_t :=
  CompressedEdPoint (array_from_list [U8 (@repr WORDSIZE8 88);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 102)]).

Definition v_CONSTANT_D : t_SerializedScalar_t :=
  SerializedScalar (array_from_list [U8 (@repr WORDSIZE8 163);
    U8 (@repr WORDSIZE8 120);
    U8 (@repr WORDSIZE8 89);
    U8 (@repr WORDSIZE8 19);
    U8 (@repr WORDSIZE8 202);
    U8 (@repr WORDSIZE8 77);
    U8 (@repr WORDSIZE8 235);
    U8 (@repr WORDSIZE8 117);
    U8 (@repr WORDSIZE8 171);
    U8 (@repr WORDSIZE8 216);
    U8 (@repr WORDSIZE8 65);
    U8 (@repr WORDSIZE8 65);
    U8 (@repr WORDSIZE8 77);
    U8 (@repr WORDSIZE8 10);
    U8 (@repr WORDSIZE8 112);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 152);
    U8 (@repr WORDSIZE8 232);
    U8 (@repr WORDSIZE8 121);
    U8 (@repr WORDSIZE8 119);
    U8 (@repr WORDSIZE8 121);
    U8 (@repr WORDSIZE8 64);
    U8 (@repr WORDSIZE8 199);
    U8 (@repr WORDSIZE8 140);
    U8 (@repr WORDSIZE8 115);
    U8 (@repr WORDSIZE8 254);
    U8 (@repr WORDSIZE8 111);
    U8 (@repr WORDSIZE8 43);
    U8 (@repr WORDSIZE8 238);
    U8 (@repr WORDSIZE8 108);
    U8 (@repr WORDSIZE8 3);
    U8 (@repr WORDSIZE8 82)]).

Definition v_CONSTANT_L : t_SerializedScalar_t :=
  SerializedScalar (array_from_list [U8 (@repr WORDSIZE8 237);
    U8 (@repr WORDSIZE8 211);
    U8 (@repr WORDSIZE8 245);
    U8 (@repr WORDSIZE8 92);
    U8 (@repr WORDSIZE8 26);
    U8 (@repr WORDSIZE8 99);
    U8 (@repr WORDSIZE8 18);
    U8 (@repr WORDSIZE8 88);
    U8 (@repr WORDSIZE8 214);
    U8 (@repr WORDSIZE8 156);
    U8 (@repr WORDSIZE8 247);
    U8 (@repr WORDSIZE8 162);
    U8 (@repr WORDSIZE8 222);
    U8 (@repr WORDSIZE8 249);
    U8 (@repr WORDSIZE8 222);
    U8 (@repr WORDSIZE8 20);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 16)]).

Definition v_CONSTANT_P : t_SerializedScalar_t :=
  SerializedScalar (array_from_list [U8 (@repr WORDSIZE8 237);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 127)]).

Definition v_CONSTANT_P1_4_ : t_SerializedScalar_t :=
  SerializedScalar (array_from_list [U8 (@repr WORDSIZE8 251);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 31)]).

Definition v_CONSTANT_P3_8_ : t_SerializedScalar_t :=
  SerializedScalar (array_from_list [U8 (@repr WORDSIZE8 254);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 15)]).

Definition check_canonical_point (x : t_CompressedEdPoint_t) : bool :=
  let x := (update_at x (@repr WORDSIZE32 31) ((x.[(@repr WORDSIZE32 31)]).&(U8 (@repr WORDSIZE8 127)))) : t_CompressedEdPoint_t in
  let x := (impl__BigInteger__from_byte_seq_le x) : t_BigInteger_t in
  x<.?(impl__BigInteger__from_byte_seq_le v_CONSTANT_P).

Definition check_canonical_scalar (s : t_SerializedScalar_t) : bool :=
  if
    (impl__U8__declassify ((s.[(@repr WORDSIZE32 31)]).&(U8 (@repr WORDSIZE8 224))))<>(@repr WORDSIZE8 0)
  then
    false
  else
    (impl__BigInteger__from_byte_seq_le s)<.?(impl__BigInteger__from_byte_seq_le v_CONSTANT_L).

Definition is_negative (x : t_Ed25519FieldElement_t) : t_U8_t :=
  if
    impl__Ed25519FieldElement__bit x (@repr WORDSIZE32 0)
  then
    U8 (@repr WORDSIZE8 1)
  else
    U8 (@repr WORDSIZE8 0).

Definition compress (p : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t)) : t_CompressedEdPoint_t :=
  let '(x,y,z,_) := (p) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let z_inv := (impl__Ed25519FieldElement__inv z) : t_Ed25519FieldElement_t in
  let x := (x.*z_inv) : t_Ed25519FieldElement_t in
  let y := (y.*z_inv) : t_Ed25519FieldElement_t in
  let s := (impl__Ed25519FieldElement__to_byte_seq_le y) : t_Seq_t t_U8_t in
  let s := (update_at s (@repr WORDSIZE32 31) ((s.[(@repr WORDSIZE32 31)]).^((is_negative x) shift_left (@repr WORDSIZE32 7)))) : t_Seq_t t_U8_t in
  impl__CompressedEdPoint__from_slice s (@repr WORDSIZE32 0) (@repr WORDSIZE32 32).

Definition encode (p : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t)) : t_Seq_t t_U8_t :=
  let '(x,y,z,_) := (p) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let z_inv := (impl__Ed25519FieldElement__inv z) : t_Ed25519FieldElement_t in
  let x := (x.*z_inv) : t_Ed25519FieldElement_t in
  let y := (y.*z_inv) : t_Ed25519FieldElement_t in
  let s := (impl__Ed25519FieldElement__to_byte_seq_le y) : t_Seq_t t_U8_t in
  let s := (update_at s (@repr WORDSIZE32 31) ((s.[(@repr WORDSIZE32 31)]).^((is_negative x) shift_left (@repr WORDSIZE32 7)))) : t_Seq_t t_U8_t in
  s.

Definition point_add (p : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t)) (q : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) :=
  let d_c := (impl__Ed25519FieldElement__from_byte_seq_le v_CONSTANT_D) : t_Ed25519FieldElement_t in
  let two := (f_TWO) : t_Ed25519FieldElement_t in
  let '(x1,y1,z1,t1) := (p) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let '(x2,y2,z2,t2) := (q) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let a := ((y1.-x1).*(y2.-x2)) : t_Ed25519FieldElement_t in
  let b := ((y1.+x1).*(y2.+x2)) : t_Ed25519FieldElement_t in
  let c := (((t1.*two).*d_c).*t2) : t_Ed25519FieldElement_t in
  let d := ((z1.*two).*z2) : t_Ed25519FieldElement_t in
  let e := (b.-a) : t_Ed25519FieldElement_t in
  let f := (d.-c) : t_Ed25519FieldElement_t in
  let g := (d.+c) : t_Ed25519FieldElement_t in
  let h := (b.+a) : t_Ed25519FieldElement_t in
  let x3 := (e.*f) : t_Ed25519FieldElement_t in
  let y3 := (g.*h) : t_Ed25519FieldElement_t in
  let t3 := (e.*h) : t_Ed25519FieldElement_t in
  let z3 := (f.*g) : t_Ed25519FieldElement_t in
  (x3,y3,z3,t3).

Definition point_mul (s : t_Scalar_t) (p : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) :=
  let p := (p) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let q := (point_identity) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let '(p,q) := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 256))) (p,q) (fun '(p,q) i =>
      let q := (if
          impl__Scalar__bit s i
        then
          let q := (point_add q p) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
          q
        else
          q) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
      let p := (point_add p p) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
      (p,q))) : ((t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) × (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t)) in
  q.

Definition point_mul_by_cofactor (p : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) :=
  let p2 := (point_add p p) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let p4 := (point_add p2 p2) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  point_add p4 p4.

Definition sqrt (a : t_Ed25519FieldElement_t) : t_Option_t t_Ed25519FieldElement_t :=
  let p3_8 := (impl__Ed25519FieldElement__from_byte_seq_le v_CONSTANT_P3_8_) : t_Ed25519FieldElement_t in
  let p1_4 := (impl__Ed25519FieldElement__from_byte_seq_le v_CONSTANT_P1_4_) : t_Ed25519FieldElement_t in
  let x_c := (f_pow_self a p3_8) : t_Ed25519FieldElement_t in
  let result := (Option_Nonet_Option_t t_Ed25519FieldElement_t) : t_Option_t t_Ed25519FieldElement_t in
  let result := (if
      (x_c.*x_c)=.?a
    then
      let result := (Option_Some x_c) : t_Option_t t_Ed25519FieldElement_t in
      result
    else
      result) : t_Option_t t_Ed25519FieldElement_t in
  let result := (if
      (x_c.*x_c)=.?(f_ZERO.-a)
    then
      let x := ((f_pow_self f_TWO p1_4).*x_c) : t_Ed25519FieldElement_t in
      let result := (Option_Some x) : t_Option_t t_Ed25519FieldElement_t in
      result
    else
      result) : t_Option_t t_Ed25519FieldElement_t in
  result.

Definition decompress (q : t_CompressedEdPoint_t) : t_Option_t (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) :=
  run (let d := (impl__Ed25519FieldElement__from_byte_seq_le v_CONSTANT_D) : t_Ed25519FieldElement_t in
  let x_s := (((q.[(@repr WORDSIZE32 31)]).&(U8 (@repr WORDSIZE8 128))) shift_right (@repr WORDSIZE32 7)) : t_U8_t in
  let y_s := (q) : t_CompressedEdPoint_t in
  let y_s := (update_at y_s (@repr WORDSIZE32 31) ((y_s.[(@repr WORDSIZE32 31)]).&(U8 (@repr WORDSIZE8 127)))) : t_CompressedEdPoint_t in
  let _ := (if
      not (check_canonical_point y_s)
    then
      let _ := (match f_branch Option_Nonet_Option_t (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) with
        | ControlFlow_Break residual => let hoist1 := (v_Break (f_from_residual residual)) : t_Never_t in
          ControlFlow_Continue (never_to_any hoist1)
        | ControlFlow_Continue val => ControlFlow_Continue val
        end) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
      ControlFlow_Continue tt
    else
      ControlFlow_Continue tt) : unit in
  let y := (impl__Ed25519FieldElement__from_byte_seq_le y_s) : t_Ed25519FieldElement_t in
  let z := (f_ONE) : t_Ed25519FieldElement_t in
  let yy := (y.*y) : t_Ed25519FieldElement_t in
  let u := (yy.-z) : t_Ed25519FieldElement_t in
  let v := ((d.*yy).+z) : t_Ed25519FieldElement_t in
  let xx := (u.*(impl__Ed25519FieldElement__inv v)) : t_Ed25519FieldElement_t in
  let x := (match f_branch (sqrt xx) with
    | ControlFlow_Break residual => let hoist2 := (v_Break (f_from_residual residual)) : t_Never_t in
      ControlFlow_Continue (never_to_any hoist2)
    | ControlFlow_Continue val => ControlFlow_Continue val
    end) : t_Ed25519FieldElement_t in
  let x_r := (is_negative x) : t_U8_t in
  let _ := (if
      andb (x=.?f_ZERO) ((impl__U8__declassify x_s)=.?(@repr WORDSIZE8 1))
    then
      let _ := (match f_branch Option_Nonet_Option_t (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) with
        | ControlFlow_Break residual => let hoist3 := (v_Break (f_from_residual residual)) : t_Never_t in
          ControlFlow_Continue (never_to_any hoist3)
        | ControlFlow_Continue val => ControlFlow_Continue val
        end) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
      ControlFlow_Continue tt
    else
      ControlFlow_Continue tt) : unit in
  ControlFlow_Continue (let x := (if
      (impl__U8__declassify x_r)<>(impl__U8__declassify x_s)
    then
      let x := (f_ZERO.-x) : t_Ed25519FieldElement_t in
      x
    else
      x) : t_Ed25519FieldElement_t in
  Option_Some (x,y,z,x.*y))).

Definition decode (q_s : t_Seq_t t_U8_t) : t_Option_t (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) :=
  let q := (impl__CompressedEdPoint__from_slice q_s (@repr WORDSIZE32 0) (@repr WORDSIZE32 32)) : t_CompressedEdPoint_t in
  decompress q.

Definition decompress_non_canonical (p : t_CompressedEdPoint_t) : t_Option_t (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) :=
  run (let d := (impl__Ed25519FieldElement__from_byte_seq_le v_CONSTANT_D) : t_Ed25519FieldElement_t in
  let x_s := (((p.[(@repr WORDSIZE32 31)]).&(U8 (@repr WORDSIZE8 128))) shift_right (@repr WORDSIZE32 7)) : t_U8_t in
  let y_s := (p) : t_CompressedEdPoint_t in
  let y_s := (update_at y_s (@repr WORDSIZE32 31) ((y_s.[(@repr WORDSIZE32 31)]).&(U8 (@repr WORDSIZE8 127)))) : t_CompressedEdPoint_t in
  let y := (impl__Ed25519FieldElement__from_byte_seq_le y_s) : t_Ed25519FieldElement_t in
  let z := (f_ONE) : t_Ed25519FieldElement_t in
  let yy := (y.*y) : t_Ed25519FieldElement_t in
  let u := (yy.-z) : t_Ed25519FieldElement_t in
  let v := ((d.*yy).+z) : t_Ed25519FieldElement_t in
  let xx := (u.*(impl__Ed25519FieldElement__inv v)) : t_Ed25519FieldElement_t in
  let x := (match f_branch (sqrt xx) with
    | ControlFlow_Break residual => let hoist4 := (v_Break (f_from_residual residual)) : t_Never_t in
      ControlFlow_Continue (never_to_any hoist4)
    | ControlFlow_Continue val => ControlFlow_Continue val
    end) : t_Ed25519FieldElement_t in
  ControlFlow_Continue (let x_r := (is_negative x) : t_U8_t in
  let x := (if
      (impl__U8__declassify x_r)<>(impl__U8__declassify x_s)
    then
      let x := (f_ZERO.-x) : t_Ed25519FieldElement_t in
      x
    else
      x) : t_Ed25519FieldElement_t in
  Option_Some (x,y,z,x.*y))).

Definition secret_to_public (sk : t_SerializedScalar_t) : t_CompressedEdPoint_t :=
  let '(s,_) := (secret_expand sk) : (t_SerializedScalar_t × t_SerializedScalar_t) in
  let base := (impl__unwrap (decompress v_BASE)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let ss := (impl__Scalar__from_byte_seq_le s) : t_Scalar_t in
  let a := (point_mul ss base) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  compress a.
