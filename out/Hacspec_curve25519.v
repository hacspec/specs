(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_lib.

Notation FieldCanvas := (nseq int8 256).
Notation X25519FieldElement_t := (nat_mod 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed).
Definition X25519FieldElement : X25519FieldElement_t -> X25519FieldElement_t :=
  id.

Notation ScalarCanvas := (nseq int8 256).
Notation Scalar_t := (nat_mod 0x8000000000000000000000000000000000000000000000000000000000000000).
Definition Scalar : Scalar_t -> Scalar_t :=
  id.

Notation t_Point_t := ((t_X25519FieldElement_t × t_X25519FieldElement_t)).

Notation X25519SerializedPoint_t := (nseq int8 32).
Definition X25519SerializedPoint : X25519SerializedPoint_t -> X25519SerializedPoint_t :=
  id.

Notation X25519SerializedScalar_t := (nseq int8 32).
Definition X25519SerializedScalar : X25519SerializedScalar_t -> X25519SerializedScalar_t :=
  id.

Definition mask_scalar (s : t_X25519SerializedScalar_t) : t_X25519SerializedScalar_t :=
  let k := (s) : t_X25519SerializedScalar_t in
  let k := (update_at k (@repr WORDSIZE32 0) ((k.[(@repr WORDSIZE32 0)]).&(U8 (@repr WORDSIZE8 248)))) : t_X25519SerializedScalar_t in
  let k := (update_at k (@repr WORDSIZE32 31) ((k.[(@repr WORDSIZE32 31)]).&(U8 (@repr WORDSIZE8 127)))) : t_X25519SerializedScalar_t in
  let k := (update_at k (@repr WORDSIZE32 31) ((k.[(@repr WORDSIZE32 31)]).|(U8 (@repr WORDSIZE8 64)))) : t_X25519SerializedScalar_t in
  k.

Definition decode_scalar (s : t_X25519SerializedScalar_t) : t_Scalar_t :=
  let k := (mask_scalar s) : t_X25519SerializedScalar_t in
  from_byte_seq_le_under_impl_67 k.

Definition decode_point (u : t_X25519SerializedPoint_t) : (t_X25519FieldElement_t × t_X25519FieldElement_t) :=
  let u_ := (u) : t_X25519SerializedPoint_t in
  let u_ := (update_at u_ (@repr WORDSIZE32 31) ((u_.[(@repr WORDSIZE32 31)]).&(U8 (@repr WORDSIZE8 127)))) : t_X25519SerializedPoint_t in
  (from_byte_seq_le_under_impl u_,from_literal_under_impl_63 (@repr WORDSIZE128 1)).

Definition encode_point (p : (t_X25519FieldElement_t × t_X25519FieldElement_t)) : t_X25519SerializedPoint_t :=
  let '(x,y) := (p) : (t_X25519FieldElement_t × t_X25519FieldElement_t) in
  let b := (x.*(inv_under_impl_57 y)) : _ in
  update_start new_under_impl_139 (to_byte_seq_le_under_impl b).

Definition point_add_and_double (q : (t_X25519FieldElement_t × t_X25519FieldElement_t)) (np : ((t_X25519FieldElement_t × t_X25519FieldElement_t) × (t_X25519FieldElement_t × t_X25519FieldElement_t))) : ((t_X25519FieldElement_t × t_X25519FieldElement_t) × (t_X25519FieldElement_t × t_X25519FieldElement_t)) :=
  let '(nq,nqp1) := (np) : ((t_X25519FieldElement_t × t_X25519FieldElement_t) × (t_X25519FieldElement_t × t_X25519FieldElement_t)) in
  let '(x_1,_z_1) := (q) : (t_X25519FieldElement_t × t_X25519FieldElement_t) in
  let '(x_2,z_2) := (nq) : (t_X25519FieldElement_t × t_X25519FieldElement_t) in
  let '(x_3,z_3) := (nqp1) : (t_X25519FieldElement_t × t_X25519FieldElement_t) in
  let a := (x_2.+z_2) : _ in
  let aa := (pow_under_impl_57 a (@repr WORDSIZE128 2)) : t_X25519FieldElement_t in
  let b := (x_2.-z_2) : _ in
  let bb := (b.*b) : _ in
  let e := (aa.-bb) : _ in
  let c := (x_3.+z_3) : _ in
  let d := (x_3.-z_3) : _ in
  let da := (d.*a) : _ in
  let cb := (c.*b) : _ in
  let x_3 := (pow_under_impl_57 (da.+cb) (@repr WORDSIZE128 2)) : t_X25519FieldElement_t in
  let z_3 := (x_1.*(pow_under_impl_57 (da.-cb) (@repr WORDSIZE128 2))) : _ in
  let x_2 := (aa.*bb) : _ in
  let e121665 := (from_literal_under_impl_63 (@repr WORDSIZE128 121665)) : t_X25519FieldElement_t in
  let z_2 := (e.*(aa.+(e121665.*e))) : _ in
  ((x_2,z_2),(x_3,z_3)).

Definition swap (x : ((t_X25519FieldElement_t × t_X25519FieldElement_t) × (t_X25519FieldElement_t × t_X25519FieldElement_t))) : ((t_X25519FieldElement_t × t_X25519FieldElement_t) × (t_X25519FieldElement_t × t_X25519FieldElement_t)) :=
  let '(x0,x1) := (x) : ((t_X25519FieldElement_t × t_X25519FieldElement_t) × (t_X25519FieldElement_t × t_X25519FieldElement_t)) in
  (x1,x0).

Definition montgomery_ladder (k : t_Scalar_t) (init : (t_X25519FieldElement_t × t_X25519FieldElement_t)) : (t_X25519FieldElement_t × t_X25519FieldElement_t) :=
  let inf := ((from_literal_under_impl_63 (@repr WORDSIZE128 1),from_literal_under_impl_63 (@repr WORDSIZE128 0))) : (t_X25519FieldElement_t × t_X25519FieldElement_t) in
  let acc := ((inf,init)) : ((t_X25519FieldElement_t × t_X25519FieldElement_t) × (t_X25519FieldElement_t × t_X25519FieldElement_t)) in
  let acc := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 256))) acc (fun acc i =>
      if
        bit_under_impl_130 k ((@repr WORDSIZE32 255).-i)
      then
        let acc := (swap acc) : ((t_X25519FieldElement_t × t_X25519FieldElement_t) × (t_X25519FieldElement_t × t_X25519FieldElement_t)) in
        let acc := (point_add_and_double init acc) : ((t_X25519FieldElement_t × t_X25519FieldElement_t) × (t_X25519FieldElement_t × t_X25519FieldElement_t)) in
        let acc := (swap acc) : ((t_X25519FieldElement_t × t_X25519FieldElement_t) × (t_X25519FieldElement_t × t_X25519FieldElement_t)) in
        acc
      else
        let acc := (point_add_and_double init acc) : ((t_X25519FieldElement_t × t_X25519FieldElement_t) × (t_X25519FieldElement_t × t_X25519FieldElement_t)) in
        acc)) : ((t_X25519FieldElement_t × t_X25519FieldElement_t) × (t_X25519FieldElement_t × t_X25519FieldElement_t)) in
  let '(out,_) := (acc) : ((t_X25519FieldElement_t × t_X25519FieldElement_t) × (t_X25519FieldElement_t × t_X25519FieldElement_t)) in
  out.

Definition x25519_scalarmult (s : t_X25519SerializedScalar_t) (p : t_X25519SerializedPoint_t) : t_X25519SerializedPoint_t :=
  let s_ := (decode_scalar s) : t_Scalar_t in
  let p_ := (decode_point p) : (t_X25519FieldElement_t × t_X25519FieldElement_t) in
  let r := (montgomery_ladder s_ p_) : (t_X25519FieldElement_t × t_X25519FieldElement_t) in
  encode_point r.

Definition x25519_secret_to_public (s : t_X25519SerializedScalar_t) : t_X25519SerializedPoint_t :=
  let base := (new_under_impl_139) : t_X25519SerializedPoint_t in
  let base := (update_at base (@repr WORDSIZE32 0) (U8 (@repr WORDSIZE8 9))) : t_X25519SerializedPoint_t in
  x25519_scalarmult s base.
