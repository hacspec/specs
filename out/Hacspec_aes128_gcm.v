(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_lib.

Require Import Hacspec_aes.

Require Import Hacspec_gf128.

Notation t_AesGcmByteSeqResult_t := (t_Result_t (t_Seq_t t_U8_t) (int8)).

Definition v_INVALID_TAG : int8 :=
  (@repr WORDSIZE8 1).

Definition pad_aad_msg (aad : t_Seq_t t_U8_t) (msg : t_Seq_t t_U8_t) : t_Seq_t t_U8_t :=
  let laad := (len_under_impl_41 aad) : uint_size in
  let lmsg := (len_under_impl_41 msg) : uint_size in
  let pad_aad := (if
      (laad.%(@repr WORDSIZE32 16))=.?(@repr WORDSIZE32 0)
    then
      laad
    else
      laad.+((@repr WORDSIZE32 16).-(laad.%(@repr WORDSIZE32 16)))) : uint_size in
  let pad_msg := (if
      (lmsg.%(@repr WORDSIZE32 16))=.?(@repr WORDSIZE32 0)
    then
      lmsg
    else
      lmsg.+((@repr WORDSIZE32 16).-(lmsg.%(@repr WORDSIZE32 16)))) : uint_size in
  let padded_msg := (new_under_impl_41 ((pad_aad.+pad_msg).+(@repr WORDSIZE32 16))) : t_Seq_t t_U8_t in
  let padded_msg := (update padded_msg (@repr WORDSIZE32 0) aad) : t_Seq_t t_U8_t in
  let padded_msg := (update padded_msg pad_aad msg) : t_Seq_t t_U8_t in
  let padded_msg := (update padded_msg (pad_aad.+pad_msg) (v_U64_to_be_bytes ((U64 (cast laad)).*(U64 (@repr WORDSIZE64 8))))) : t_Seq_t t_U8_t in
  let padded_msg := (update padded_msg ((pad_aad.+pad_msg).+(@repr WORDSIZE32 8)) (v_U64_to_be_bytes ((U64 (cast lmsg)).*(U64 (@repr WORDSIZE64 8))))) : t_Seq_t t_U8_t in
  padded_msg.

Definition encrypt_aes (key : t_Seq_t t_U8_t) (iv : t_AesNonce_t) (aad : t_Seq_t t_U8_t) (msg : t_Seq_t t_U8_t) : (t_Seq_t t_U8_t × t_Gf128Tag_t) :=
  let iv0 := (new_under_impl_110) : t_AesNonce_t in
  let mac_key := (unwrap_under_impl (aes_ctr_key_block key iv0 (U32 (@repr WORDSIZE32 0)) v_KEY_LENGTH v_ROUNDS v_KEY_SCHEDULE_LENGTH v_KEY_LENGTH v_ITERATIONS)) : t_Block_t in
  let tag_mix := (unwrap_under_impl (aes_ctr_key_block key (clone iv) (U32 (@repr WORDSIZE32 1)) v_KEY_LENGTH v_ROUNDS v_KEY_SCHEDULE_LENGTH v_KEY_LENGTH v_ITERATIONS)) : t_Block_t in
  let cipher_text := (aes128_encrypt (from_seq_under_impl_298 key) iv (U32 (@repr WORDSIZE32 2)) msg) : t_Seq_t t_U8_t in
  let padded_msg := (pad_aad_msg aad cipher_text) : t_Seq_t t_U8_t in
  let tag := (gmac padded_msg (from_seq_under_impl_53 mac_key)) : t_Gf128Tag_t in
  let tag := (xor_block (from_seq_under_impl_18 tag) tag_mix) : t_Block_t in
  (cipher_text,from_seq_under_impl_88 tag).

Definition encrypt_aes128 (key : t_Key128_t) (iv : t_AesNonce_t) (aad : t_Seq_t t_U8_t) (msg : t_Seq_t t_U8_t) : (t_Seq_t t_U8_t × t_Gf128Tag_t) :=
  encrypt_aes (from_seq_under_impl_52 key) iv aad msg.

Definition decrypt_aes (key : t_Seq_t t_U8_t) (iv : t_AesNonce_t) (aad : t_Seq_t t_U8_t) (cipher_text : t_Seq_t t_U8_t) (tag : t_Gf128Tag_t) : t_Result_t (t_Seq_t t_U8_t) (int8) :=
  let iv0 := (new_under_impl_110) : t_AesNonce_t in
  let mac_key := (from_residual (aes_ctr_key_block key iv0 (U32 (@repr WORDSIZE32 0)) v_KEY_LENGTH v_ROUNDS v_KEY_SCHEDULE_LENGTH v_KEY_LENGTH v_ITERATIONS)) : t_Result_t (t_Seq_t t_U8_t) (int8) in
  let tag_mix := (from_residual (aes_ctr_key_block key (clone iv) (U32 (@repr WORDSIZE32 1)) v_KEY_LENGTH v_ROUNDS v_KEY_SCHEDULE_LENGTH v_KEY_LENGTH v_ITERATIONS)) : t_Result_t (t_Seq_t t_U8_t) (int8) in
  let padded_msg := (pad_aad_msg aad cipher_text) : t_Seq_t t_U8_t in
  let my_tag := (gmac padded_msg (from_seq_under_impl_53 mac_key)) : t_Gf128Tag_t in
  let my_tag := (xor_block (from_seq_under_impl_18 my_tag) tag_mix) : t_Block_t in
  let ptxt := (aes128_decrypt (from_seq_under_impl_298 key) iv (U32 (@repr WORDSIZE32 2)) cipher_text) : t_Seq_t t_U8_t in
  if
    declassify_eq_under_impl_2 my_tag (from_seq_under_impl_18 tag)
  then
    v_Ok ptxt
  else
    v_Err v_INVALID_TAG.

Definition decrypt_aes128 (key : t_Key128_t) (iv : t_AesNonce_t) (aad : t_Seq_t t_U8_t) (cipher_text : t_Seq_t t_U8_t) (tag : t_Gf128Tag_t) : t_Result_t (t_Seq_t t_U8_t) (int8) :=
  decrypt_aes (from_seq_under_impl_52 key) iv aad cipher_text tag.
