(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_lib.

Require Import Hacspec_sha512.

Require Import Hacspec_edwards25519.

Definition scalar_from_hash (h : t_Sha512Digest_t) : t_Scalar_t :=
  let s := (from_byte_seq_le_under_impl_134 h) : t_BigScalar_t in
  from_byte_seq_le_under_impl_67 (slice_under_impl_41 (to_byte_seq_le_under_impl_134 s) (@repr WORDSIZE32 0) (@repr WORDSIZE32 32)).

Definition sign (sk : t_SerializedScalar_t) (msg : t_Seq_t t_U8_t) : t_Signature_t :=
  let '(a,prefix) := (secret_expand sk) : (t_SerializedScalar_t × t_SerializedScalar_t) in
  let a := (from_byte_seq_le_under_impl_67 a) : t_Scalar_t in
  let b := (unwrap_under_impl (decompress v_BASE)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let a_p := (compress (point_mul a b)) : t_CompressedEdPoint_t in
  let r := (scalar_from_hash (sha512 (concat_under_impl_309 prefix msg))) : t_Scalar_t in
  let r_p := (point_mul r b) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let r_s := (compress r_p) : t_CompressedEdPoint_t in
  let h := (scalar_from_hash (sha512 (concat_under_impl_41 (concat_under_impl_274 r_s a_p) msg))) : t_Scalar_t in
  let s := (r.+(h.*a)) : _ in
  let s_bytes := (slice_under_impl_41 (to_byte_seq_le_under_impl_67 s) (@repr WORDSIZE32 0) (@repr WORDSIZE32 32)) : t_Seq_t t_U8_t in
  update (update new_under_impl_343 (@repr WORDSIZE32 0) r_s) (@repr WORDSIZE32 32) s_bytes.

Definition zcash_verify (pk : t_CompressedEdPoint_t) (signature : t_Signature_t) (msg : t_Seq_t t_U8_t) : t_Result_t (unit) (t_Error_t) :=
  run (let b := (unwrap_under_impl (decompress_non_canonical v_BASE)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let a := (from_residual (ok_or_under_impl (decompress_non_canonical pk) Error_InvalidPublickeyt_Error_t)) : t_Result_t (unit) (t_Error_t) in
  let r_bytes := (from_slice_under_impl_274 signature (@repr WORDSIZE32 0) (@repr WORDSIZE32 32)) : t_CompressedEdPoint_t in
  let s_bytes := (from_slice_under_impl_309 signature (@repr WORDSIZE32 32) (@repr WORDSIZE32 32)) : t_SerializedScalar_t in
  let _ := (if
      not (check_canonical_scalar s_bytes)
    then
      let _ := (v_Err Error_InvalidSt_Error_t) : unit in
      Result_Ok tt
    else
      Result_Ok tt) : unit in
  Result_Ok (let r := (from_residual (ok_or_under_impl (decompress_non_canonical r_bytes) Error_InvalidRt_Error_t)) : t_Result_t (unit) (t_Error_t) in
  let s := (from_byte_seq_le_under_impl_67 s_bytes) : t_Scalar_t in
  let k := (scalar_from_hash (sha512 (concat_under_impl_41 (concat_under_impl_274 r_bytes pk) msg))) : t_Scalar_t in
  let sb := (point_mul_by_cofactor (point_mul s b)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let rc := (point_mul_by_cofactor r) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let ka := (point_mul_by_cofactor (point_mul k a)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  if
    point_eq sb (point_add rc ka)
  then
    v_Ok tt
  else
    v_Err Error_InvalidSignaturet_Error_t)).

Definition ietf_cofactored_verify (pk : t_CompressedEdPoint_t) (signature : t_Signature_t) (msg : t_Seq_t t_U8_t) : t_Result_t (unit) (t_Error_t) :=
  run (let b := (unwrap_under_impl (decompress v_BASE)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let a := (from_residual (ok_or_under_impl (decompress pk) Error_InvalidPublickeyt_Error_t)) : t_Result_t (unit) (t_Error_t) in
  let r_bytes := (from_slice_under_impl_274 signature (@repr WORDSIZE32 0) (@repr WORDSIZE32 32)) : t_CompressedEdPoint_t in
  let s_bytes := (from_slice_under_impl_309 signature (@repr WORDSIZE32 32) (@repr WORDSIZE32 32)) : t_SerializedScalar_t in
  let _ := (if
      not (check_canonical_scalar s_bytes)
    then
      let _ := (v_Err Error_InvalidSt_Error_t) : unit in
      Result_Ok tt
    else
      Result_Ok tt) : unit in
  Result_Ok (let r := (from_residual (ok_or_under_impl (decompress r_bytes) Error_InvalidRt_Error_t)) : t_Result_t (unit) (t_Error_t) in
  let s := (from_byte_seq_le_under_impl_67 s_bytes) : t_Scalar_t in
  let k := (scalar_from_hash (sha512 (concat_under_impl_41 (concat_under_impl_274 r_bytes pk) msg))) : t_Scalar_t in
  let sb := (point_mul_by_cofactor (point_mul s b)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let rc := (point_mul_by_cofactor r) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let ka := (point_mul_by_cofactor (point_mul k a)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  if
    point_eq sb (point_add rc ka)
  then
    v_Ok tt
  else
    v_Err Error_InvalidSignaturet_Error_t)).

Definition ietf_cofactorless_verify (pk : t_CompressedEdPoint_t) (signature : t_Signature_t) (msg : t_Seq_t t_U8_t) : t_Result_t (unit) (t_Error_t) :=
  run (let b := (unwrap_under_impl (decompress v_BASE)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let a := (from_residual (ok_or_under_impl (decompress pk) Error_InvalidPublickeyt_Error_t)) : t_Result_t (unit) (t_Error_t) in
  let r_bytes := (from_slice_under_impl_274 signature (@repr WORDSIZE32 0) (@repr WORDSIZE32 32)) : t_CompressedEdPoint_t in
  let s_bytes := (from_slice_under_impl_309 signature (@repr WORDSIZE32 32) (@repr WORDSIZE32 32)) : t_SerializedScalar_t in
  let _ := (if
      not (check_canonical_scalar s_bytes)
    then
      let _ := (v_Err Error_InvalidSt_Error_t) : unit in
      Result_Ok tt
    else
      Result_Ok tt) : unit in
  Result_Ok (let r := (from_residual (ok_or_under_impl (decompress r_bytes) Error_InvalidRt_Error_t)) : t_Result_t (unit) (t_Error_t) in
  let s := (from_byte_seq_le_under_impl_67 s_bytes) : t_Scalar_t in
  let k := (scalar_from_hash (sha512 (concat_under_impl_41 (concat_under_impl_274 r_bytes pk) msg))) : t_Scalar_t in
  let sb := (point_mul s b) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let ka := (point_mul k a) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  if
    point_eq sb (point_add r ka)
  then
    v_Ok tt
  else
    v_Err Error_InvalidSignaturet_Error_t)).

Definition is_identity (p : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t)) : bool :=
  point_eq p point_identity.

Definition alg2_verify (pk : t_CompressedEdPoint_t) (signature : t_Signature_t) (msg : t_Seq_t t_U8_t) : t_Result_t (unit) (t_Error_t) :=
  run (let b := (unwrap_under_impl (decompress v_BASE)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let a := (from_residual (ok_or_under_impl (decompress pk) Error_InvalidPublickeyt_Error_t)) : t_Result_t (unit) (t_Error_t) in
  let _ := (if
      is_identity (point_mul_by_cofactor a)
    then
      let _ := (v_Err Error_SmallOrderPointt_Error_t) : unit in
      Result_Ok tt
    else
      Result_Ok tt) : unit in
  let r_bytes := (from_slice_under_impl_274 signature (@repr WORDSIZE32 0) (@repr WORDSIZE32 32)) : t_CompressedEdPoint_t in
  let s_bytes := (from_slice_under_impl_309 signature (@repr WORDSIZE32 32) (@repr WORDSIZE32 32)) : t_SerializedScalar_t in
  let _ := (if
      not (check_canonical_scalar s_bytes)
    then
      let _ := (v_Err Error_InvalidSt_Error_t) : unit in
      Result_Ok tt
    else
      Result_Ok tt) : unit in
  Result_Ok (let r := (from_residual (ok_or_under_impl (decompress r_bytes) Error_InvalidRt_Error_t)) : t_Result_t (unit) (t_Error_t) in
  let s := (from_byte_seq_le_under_impl_67 s_bytes) : t_Scalar_t in
  let k := (scalar_from_hash (sha512 (concat_under_impl_41 (concat_under_impl_274 r_bytes pk) msg))) : t_Scalar_t in
  let sb := (point_mul_by_cofactor (point_mul s b)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let rc := (point_mul_by_cofactor r) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let ka := (point_mul_by_cofactor (point_mul k a)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  if
    point_eq sb (point_add rc ka)
  then
    v_Ok tt
  else
    v_Err Error_InvalidSignaturet_Error_t)).

(*item error backend*)

Definition zcash_batch_verify (entries : t_Seq_t t_BatchEntry_t) (entropy : t_Seq_t t_U8_t) : t_Result_t (unit) (t_Error_t) :=
  run (let _ := (if
      (len_under_impl_41 entropy)<.?((@repr WORDSIZE32 16).*(len_under_impl_41 entries))
    then
      let _ := (v_Err Error_NotEnoughRandomnesst_Error_t) : unit in
      Result_Ok tt
    else
      Result_Ok tt) : unit in
  Result_Ok (let s_sum := (v_ZERO) : t_Scalar_t in
  let r_sum := (point_identity) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let a_sum := (point_identity) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let '(a_sum,r_sum,s_sum) := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(len_under_impl_41 entries))) (a_sum,r_sum,s_sum) (fun '(a_sum,r_sum,s_sum) i =>
      let BatchEntry pk msg signature := (clone (entries.[i])) : t_BatchEntry_t in
      let a := (from_residual (ok_or_under_impl (decompress_non_canonical pk) Error_InvalidPublickeyt_Error_t)) : t_Result_t (unit) (t_Error_t) in
      let r_bytes := (from_slice_under_impl_274 signature (@repr WORDSIZE32 0) (@repr WORDSIZE32 32)) : t_CompressedEdPoint_t in
      let s_bytes := (from_slice_under_impl_309 signature (@repr WORDSIZE32 32) (@repr WORDSIZE32 32)) : t_SerializedScalar_t in
      let _ := (if
          not (check_canonical_scalar s_bytes)
        then
          let _ := (v_Err Error_InvalidSt_Error_t) : unit in
          Result_Ok tt
        else
          Result_Ok tt) : unit in
      Result_Ok (let r := (from_residual (ok_or_under_impl (decompress_non_canonical r_bytes) Error_InvalidRt_Error_t)) : t_Result_t (unit) (t_Error_t) in
      let s := (from_byte_seq_le_under_impl_67 s_bytes) : t_Scalar_t in
      let c := (scalar_from_hash (sha512 (concat_under_impl_41 (concat_under_impl_274 r_bytes pk) msg))) : t_Scalar_t in
      let z := (slice_under_impl_41 entropy ((@repr WORDSIZE32 16).*i) (@repr WORDSIZE32 16)) : t_Seq_t t_U8_t in
      let z := (from_byte_seq_le_under_impl_67 (concat_under_impl_41 z (new_under_impl_41 (@repr WORDSIZE32 16)))) : t_Scalar_t in
      let s_sum := (s_sum.+(s.*z)) : _ in
      let r_sum := (point_add r_sum (point_mul z r)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
      (point_add a_sum (point_mul (z.*c) a),r_sum,s_sum)))) : ((t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) × (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) × _) in
  let b := (unwrap_under_impl (decompress v_BASE)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let sb := (point_mul s_sum b) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let check := (point_mul_by_cofactor (point_add (point_neg sb) (point_add r_sum a_sum))) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  if
    is_identity check
  then
    v_Ok tt
  else
    v_Err Error_InvalidSignaturet_Error_t)).

Definition ietf_cofactored_batch_verify (entries : t_Seq_t t_BatchEntry_t) (entropy : t_Seq_t t_U8_t) : t_Result_t (unit) (t_Error_t) :=
  run (let _ := (if
      (len_under_impl_41 entropy)<.?((@repr WORDSIZE32 16).*(len_under_impl_41 entries))
    then
      let _ := (v_Err Error_NotEnoughRandomnesst_Error_t) : unit in
      Result_Ok tt
    else
      Result_Ok tt) : unit in
  Result_Ok (let s_sum := (v_ZERO) : t_Scalar_t in
  let r_sum := (point_identity) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let a_sum := (point_identity) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let '(a_sum,r_sum,s_sum) := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(len_under_impl_41 entries))) (a_sum,r_sum,s_sum) (fun '(a_sum,r_sum,s_sum) i =>
      let BatchEntry pk msg signature := (clone (entries.[i])) : t_BatchEntry_t in
      let a := (from_residual (ok_or_under_impl (decompress pk) Error_InvalidPublickeyt_Error_t)) : t_Result_t (unit) (t_Error_t) in
      let r_bytes := (from_slice_under_impl_274 signature (@repr WORDSIZE32 0) (@repr WORDSIZE32 32)) : t_CompressedEdPoint_t in
      let s_bytes := (from_slice_under_impl_309 signature (@repr WORDSIZE32 32) (@repr WORDSIZE32 32)) : t_SerializedScalar_t in
      let _ := (if
          not (check_canonical_scalar s_bytes)
        then
          let _ := (v_Err Error_InvalidSt_Error_t) : unit in
          Result_Ok tt
        else
          Result_Ok tt) : unit in
      Result_Ok (let r := (from_residual (ok_or_under_impl (decompress r_bytes) Error_InvalidRt_Error_t)) : t_Result_t (unit) (t_Error_t) in
      let s := (from_byte_seq_le_under_impl_67 s_bytes) : t_Scalar_t in
      let c := (scalar_from_hash (sha512 (concat_under_impl_41 (concat_under_impl_274 r_bytes pk) msg))) : t_Scalar_t in
      let z := (slice_under_impl_41 entropy ((@repr WORDSIZE32 16).*i) (@repr WORDSIZE32 16)) : t_Seq_t t_U8_t in
      let z := (from_byte_seq_le_under_impl_67 (concat_under_impl_41 z (new_under_impl_41 (@repr WORDSIZE32 16)))) : t_Scalar_t in
      let s_sum := (s_sum.+(s.*z)) : _ in
      let r_sum := (point_add r_sum (point_mul z r)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
      (point_add a_sum (point_mul (z.*c) a),r_sum,s_sum)))) : ((t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) × (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) × _) in
  let b := (unwrap_under_impl (decompress v_BASE)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let sb := (point_mul s_sum b) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let check := (point_mul_by_cofactor (point_add (point_neg sb) (point_add r_sum a_sum))) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  if
    is_identity check
  then
    v_Ok tt
  else
    v_Err Error_InvalidSignaturet_Error_t)).

Definition ietf_cofactorless_batch_verify (entries : t_Seq_t t_BatchEntry_t) (entropy : t_Seq_t t_U8_t) : t_Result_t (unit) (t_Error_t) :=
  run (let _ := (if
      (len_under_impl_41 entropy)<.?((@repr WORDSIZE32 16).*(len_under_impl_41 entries))
    then
      let _ := (v_Err Error_NotEnoughRandomnesst_Error_t) : unit in
      Result_Ok tt
    else
      Result_Ok tt) : unit in
  Result_Ok (let s_sum := (v_ZERO) : t_Scalar_t in
  let r_sum := (point_identity) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let a_sum := (point_identity) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let '(a_sum,r_sum,s_sum) := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(len_under_impl_41 entries))) (a_sum,r_sum,s_sum) (fun '(a_sum,r_sum,s_sum) i =>
      let BatchEntry pk msg signature := (clone (entries.[i])) : t_BatchEntry_t in
      let a := (from_residual (ok_or_under_impl (decompress pk) Error_InvalidPublickeyt_Error_t)) : t_Result_t (unit) (t_Error_t) in
      let r_bytes := (from_slice_under_impl_274 signature (@repr WORDSIZE32 0) (@repr WORDSIZE32 32)) : t_CompressedEdPoint_t in
      let s_bytes := (from_slice_under_impl_309 signature (@repr WORDSIZE32 32) (@repr WORDSIZE32 32)) : t_SerializedScalar_t in
      let _ := (if
          not (check_canonical_scalar s_bytes)
        then
          let _ := (v_Err Error_InvalidSt_Error_t) : unit in
          Result_Ok tt
        else
          Result_Ok tt) : unit in
      Result_Ok (let r := (from_residual (ok_or_under_impl (decompress r_bytes) Error_InvalidRt_Error_t)) : t_Result_t (unit) (t_Error_t) in
      let s := (from_byte_seq_le_under_impl_67 s_bytes) : t_Scalar_t in
      let c := (scalar_from_hash (sha512 (concat_under_impl_41 (concat_under_impl_274 r_bytes pk) msg))) : t_Scalar_t in
      let z := (slice_under_impl_41 entropy ((@repr WORDSIZE32 16).*i) (@repr WORDSIZE32 16)) : t_Seq_t t_U8_t in
      let z := (from_byte_seq_le_under_impl_67 (concat_under_impl_41 z (new_under_impl_41 (@repr WORDSIZE32 16)))) : t_Scalar_t in
      let s_sum := (s_sum.+(s.*z)) : _ in
      let r_sum := (point_add r_sum (point_mul z r)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
      (point_add a_sum (point_mul (z.*c) a),r_sum,s_sum)))) : ((t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) × (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) × _) in
  let b := (unwrap_under_impl (decompress v_BASE)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let sb := (point_mul s_sum b) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let check := (point_add (point_neg sb) (point_add r_sum a_sum)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  if
    is_identity check
  then
    v_Ok tt
  else
    v_Err Error_InvalidSignaturet_Error_t)).

Definition alg3_batch_verify (entries : t_Seq_t t_BatchEntry_t) (entropy : t_Seq_t t_U8_t) : t_Result_t (unit) (t_Error_t) :=
  run (let _ := (if
      (len_under_impl_41 entropy)<.?((@repr WORDSIZE32 16).*(len_under_impl_41 entries))
    then
      let _ := (v_Err Error_NotEnoughRandomnesst_Error_t) : unit in
      Result_Ok tt
    else
      Result_Ok tt) : unit in
  Result_Ok (let s_sum := (v_ZERO) : t_Scalar_t in
  let r_sum := (point_identity) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let a_sum := (point_identity) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let '(a_sum,r_sum,s_sum) := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(len_under_impl_41 entries))) (a_sum,r_sum,s_sum) (fun '(a_sum,r_sum,s_sum) i =>
      let BatchEntry pk msg signature := (clone (entries.[i])) : t_BatchEntry_t in
      let a := (from_residual (ok_or_under_impl (decompress pk) Error_InvalidPublickeyt_Error_t)) : t_Result_t (unit) (t_Error_t) in
      let _ := (if
          is_identity (point_mul_by_cofactor a)
        then
          let _ := (v_Err Error_SmallOrderPointt_Error_t) : unit in
          Result_Ok tt
        else
          Result_Ok tt) : unit in
      let r_bytes := (from_slice_under_impl_274 signature (@repr WORDSIZE32 0) (@repr WORDSIZE32 32)) : t_CompressedEdPoint_t in
      let s_bytes := (from_slice_under_impl_309 signature (@repr WORDSIZE32 32) (@repr WORDSIZE32 32)) : t_SerializedScalar_t in
      let _ := (if
          not (check_canonical_scalar s_bytes)
        then
          let _ := (v_Err Error_InvalidSt_Error_t) : unit in
          Result_Ok tt
        else
          Result_Ok tt) : unit in
      Result_Ok (let r := (from_residual (ok_or_under_impl (decompress r_bytes) Error_InvalidRt_Error_t)) : t_Result_t (unit) (t_Error_t) in
      let s := (from_byte_seq_le_under_impl_67 s_bytes) : t_Scalar_t in
      let c := (scalar_from_hash (sha512 (concat_under_impl_41 (concat_under_impl_274 r_bytes pk) msg))) : t_Scalar_t in
      let z := (slice_under_impl_41 entropy ((@repr WORDSIZE32 16).*i) (@repr WORDSIZE32 16)) : t_Seq_t t_U8_t in
      let z := (from_byte_seq_le_under_impl_67 (concat_under_impl_41 z (new_under_impl_41 (@repr WORDSIZE32 16)))) : t_Scalar_t in
      let s_sum := (s_sum.+(s.*z)) : _ in
      let r_sum := (point_add r_sum (point_mul z r)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
      (point_add a_sum (point_mul (z.*c) a),r_sum,s_sum)))) : ((t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) × (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) × _) in
  let b := (unwrap_under_impl (decompress v_BASE)) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let sb := (point_mul s_sum b) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  let check := (point_mul_by_cofactor (point_add (point_neg sb) (point_add r_sum a_sum))) : (t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t × t_Ed25519FieldElement_t) in
  if
    is_identity check
  then
    v_Ok tt
  else
    v_Err Error_InvalidSignaturet_Error_t)).
