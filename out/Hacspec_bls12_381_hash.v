(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_bls12_381.

Require Import Hacspec_lib.

Require Import Hacspec_sha256.

Notation FpHashCanvas := (nseq int8 512).
Notation FpHash_t := (nat_mod 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab).
Definition FpHash : FpHash_t -> FpHash_t :=
  id.

Notation ArrFp_t := (nseq int64 6).
Definition ArrFp : ArrFp_t -> ArrFp_t :=
  id.

Definition v_B_IN_BYTES : uint_size :=
  (@repr WORDSIZE32 32).

Definition v_S_IN_BYTES : uint_size :=
  (@repr WORDSIZE32 64).

Definition v_L : uint_size :=
  (@repr WORDSIZE32 64).

Definition v_P_1_2_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 936899308823769933);
    U64 (@repr WORDSIZE64 2706051889235351147);
    U64 (@repr WORDSIZE64 12843041017062132063);
    U64 (@repr WORDSIZE64 12941209323636816658);
    U64 (@repr WORDSIZE64 1105070755758604287);
    U64 (@repr WORDSIZE64 15924587544893707605)]).

Definition v_P_1_4_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 468449654411884966);
    U64 (@repr WORDSIZE64 10576397981472451381);
    U64 (@repr WORDSIZE64 15644892545385841839);
    U64 (@repr WORDSIZE64 15693976698673184137);
    U64 (@repr WORDSIZE64 552535377879302143);
    U64 (@repr WORDSIZE64 17185665809301629611)]).

Definition v_P_3_4_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 468449654411884966);
    U64 (@repr WORDSIZE64 10576397981472451381);
    U64 (@repr WORDSIZE64 15644892545385841839);
    U64 (@repr WORDSIZE64 15693976698673184137);
    U64 (@repr WORDSIZE64 552535377879302143);
    U64 (@repr WORDSIZE64 17185665809301629610)]).

Definition expand_message_xmd (msg : t_Seq_t t_U8_t) (dst : t_Seq_t t_U8_t) (len_in_bytes : uint_size) : t_Seq_t t_U8_t :=
  let ell := (((len_in_bytes.+v_B_IN_BYTES).-(@repr WORDSIZE32 1))./v_B_IN_BYTES) : uint_size in
  let dst_prime := (push_under_impl_41 dst (v_U8_from_usize (len_under_impl_41 dst))) : t_Seq_t t_U8_t in
  let z_pad := (new_under_impl_41 v_S_IN_BYTES) : t_Seq_t t_U8_t in
  let l_i_b_str := (new_under_impl_41 (@repr WORDSIZE32 2)) : t_Seq_t t_U8_t in
  let l_i_b_str := (update_at l_i_b_str (@repr WORDSIZE32 0) (v_U8_from_usize (len_in_bytes./(@repr WORDSIZE32 256)))) : t_Seq_t t_U8_t in
  let l_i_b_str := (update_at l_i_b_str (@repr WORDSIZE32 1) (v_U8_from_usize len_in_bytes)) : t_Seq_t t_U8_t in
  let msg_prime := (concat_under_impl_41 (concat_under_impl_41 (concat_under_impl_41 (concat_under_impl_41 z_pad msg) l_i_b_str) (new_under_impl_41 (@repr WORDSIZE32 1))) dst_prime) : t_Seq_t t_U8_t in
  let b_0 := (from_seq_under_impl_52 (hash msg_prime)) : t_Seq_t t_U8_t in
  let b_i := (from_seq_under_impl_52 (hash (concat_under_impl_41 (push_under_impl_41 b_0 (U8 (@repr WORDSIZE8 1))) dst_prime))) : t_Seq_t t_U8_t in
  let uniform_bytes := (from_seq_under_impl_52 b_i) : t_Seq_t t_U8_t in
  let '(b_i,uniform_bytes) := (fold (into_iter (Build_Range (@repr WORDSIZE32 2)(ell.+(@repr WORDSIZE32 1)))) (b_i,uniform_bytes) (fun '(b_i,uniform_bytes) i =>
      let t := (from_seq_under_impl_52 b_0) : t_Seq_t t_U8_t in
      let b_i := (from_seq_under_impl_52 (hash (concat_under_impl_41 (push_under_impl_41 (t.^b_i) (v_U8_from_usize i)) dst_prime))) : t_Seq_t t_U8_t in
      let uniform_bytes := (concat_under_impl_41 uniform_bytes b_i) : t_Seq_t t_U8_t in
      (b_i,uniform_bytes))) : (t_Seq_t t_U8_t × t_Seq_t t_U8_t) in
  truncate_under_impl_41 uniform_bytes len_in_bytes.

Definition fp_hash_to_field (msg : t_Seq_t t_U8_t) (dst : t_Seq_t t_U8_t) (count : uint_size) : t_Seq_t t_Fp_t :=
  let len_in_bytes := (count.*v_L) : uint_size in
  let uniform_bytes := (expand_message_xmd msg dst len_in_bytes) : t_Seq_t t_U8_t in
  let output := (new_under_impl_41 count) : t_Seq_t t_Fp_t in
  let output := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)count)) output (fun output i =>
      let elm_offset := (v_L.*i) : uint_size in
      let tv := (slice_under_impl_41 uniform_bytes elm_offset v_L) : t_Seq_t t_U8_t in
      let u_i := (from_byte_seq_be_under_impl (slice_under_impl_41 (to_byte_seq_be_under_impl (from_byte_seq_be_under_impl tv)) (@repr WORDSIZE32 16) (@repr WORDSIZE32 48))) : t_Fp_t in
      let output := (update_at output i u_i) : t_Seq_t t_Fp_t in
      output)) : t_Seq_t t_Fp_t in
  output.

Definition fp_sgn0 (x : t_Fp_t) : bool :=
  (x.%v_TWO)=.?v_ONE.

Definition fp_is_square (x : t_Fp_t) : bool :=
  let c1 := (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_P_1_2_)) : t_Fp_t in
  let tv := (pow_self x c1) : t_Fp_t in
  orb (tv=.?v_ZERO) (tv=.?v_ONE).

Definition fp_sqrt (x : t_Fp_t) : t_Fp_t :=
  let c1 := (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_P_1_4_)) : t_Fp_t in
  pow_self x c1.

Definition g1_curve_func (x : t_Fp_t) : _ :=
  ((x.*x).*x).+(from_literal_under_impl_63 (@repr WORDSIZE128 4)).

Definition g1_map_to_curve_svdw (u : t_Fp_t) : (t_Fp_t × t_Fp_t × bool) :=
  let z := (v_ZERO.-(from_literal_under_impl_63 (@repr WORDSIZE128 3))) : _ in
  let gz := (g1_curve_func z) : t_Fp_t in
  let tv1 := ((u.*u).*gz) : _ in
  let tv2 := (v_ONE.+tv1) : _ in
  let tv1 := (v_ONE.-tv1) : _ in
  let tv3 := (inv_under_impl_57 (tv1.*tv2)) : t_Fp_t in
  let tv4 := (fp_sqrt ((v_ZERO.-gz).*(((from_literal_under_impl_63 (@repr WORDSIZE128 3)).*z).*z))) : t_Fp_t in
  let tv4 := (if
      fp_sgn0 tv4
    then
      let tv4 := (v_ZERO.-tv4) : _ in
      tv4
    else
      tv4) : _ in
  let tv5 := (((u.*tv1).*tv3).*tv4) : _ in
  let tv6 := (((v_ZERO.-(from_literal_under_impl_63 (@repr WORDSIZE128 4))).*gz).*(inv_under_impl_57 (((from_literal_under_impl_63 (@repr WORDSIZE128 3)).*z).*z))) : _ in
  let x1 := (((v_ZERO.-z).*(inv_under_impl_57 v_TWO)).-tv5) : _ in
  let x2 := (((v_ZERO.-z).*(inv_under_impl_57 v_TWO)).+tv5) : _ in
  let x3 := (z.+((tv6.*((tv2.*tv2).*tv3)).*((tv2.*tv2).*tv3))) : _ in
  let x := (if
      fp_is_square (g1_curve_func x1)
    then
      x1
    else
      if
        fp_is_square (g1_curve_func x2)
      then
        x2
      else
        x3) : t_Fp_t in
  let y := (fp_sqrt (g1_curve_func x)) : t_Fp_t in
  let y := (if
      (fp_sgn0 u)<>(fp_sgn0 y)
    then
      let y := (v_ZERO.-y) : _ in
      y
    else
      y) : _ in
  (x,y,false).

Definition g1_clear_cofactor (x : (t_Fp_t × t_Fp_t × bool)) : (t_Fp_t × t_Fp_t × bool) :=
  let h_eff := (from_literal_under_impl_199 (@repr WORDSIZE128 15132376222941642753)) : t_Scalar_t in
  g1mul h_eff x.

Definition g1_hash_to_curve_svdw (msg : t_Seq_t t_U8_t) (dst : t_Seq_t t_U8_t) : (t_Fp_t × t_Fp_t × bool) :=
  let u := (fp_hash_to_field msg dst (@repr WORDSIZE32 2)) : t_Seq_t t_Fp_t in
  let q0 := (g1_map_to_curve_svdw (u.[(@repr WORDSIZE32 0)])) : (t_Fp_t × t_Fp_t × bool) in
  let q1 := (g1_map_to_curve_svdw (u.[(@repr WORDSIZE32 1)])) : (t_Fp_t × t_Fp_t × bool) in
  let r := (g1add q0 q1) : (t_Fp_t × t_Fp_t × bool) in
  g1_clear_cofactor r.

Definition g1_encode_to_curve_svdw (msg : t_Seq_t t_U8_t) (dst : t_Seq_t t_U8_t) : (t_Fp_t × t_Fp_t × bool) :=
  let u := (fp_hash_to_field msg dst (@repr WORDSIZE32 1)) : t_Seq_t t_Fp_t in
  let q := (g1_map_to_curve_svdw (u.[(@repr WORDSIZE32 0)])) : (t_Fp_t × t_Fp_t × bool) in
  g1_clear_cofactor q.

Definition fp2_hash_to_field (msg : t_Seq_t t_U8_t) (dst : t_Seq_t t_U8_t) (count : uint_size) : t_Seq_t (t_Fp_t × t_Fp_t) :=
  let len_in_bytes := ((count.*(@repr WORDSIZE32 2)).*v_L) : uint_size in
  let uniform_bytes := (expand_message_xmd msg dst len_in_bytes) : t_Seq_t t_U8_t in
  let output := (new_under_impl_41 count) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let output := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)count)) output (fun output i =>
      let elm_offset := ((v_L.*i).*(@repr WORDSIZE32 2)) : uint_size in
      let tv := (slice_under_impl_41 uniform_bytes elm_offset v_L) : t_Seq_t t_U8_t in
      let e_1 := (from_byte_seq_be_under_impl (slice_under_impl_41 (to_byte_seq_be_under_impl (from_byte_seq_be_under_impl tv)) (@repr WORDSIZE32 16) (@repr WORDSIZE32 48))) : t_Fp_t in
      let elm_offset := (v_L.*((@repr WORDSIZE32 1).+(i.*(@repr WORDSIZE32 2)))) : uint_size in
      let tv := (slice_under_impl_41 uniform_bytes elm_offset v_L) : t_Seq_t t_U8_t in
      let e_2 := (from_byte_seq_be_under_impl (slice_under_impl_41 (to_byte_seq_be_under_impl (from_byte_seq_be_under_impl tv)) (@repr WORDSIZE32 16) (@repr WORDSIZE32 48))) : t_Fp_t in
      let output := (update_at output i (e_1,e_2)) : t_Seq_t (t_Fp_t × t_Fp_t) in
      output)) : t_Seq_t (t_Fp_t × t_Fp_t) in
  output.

Definition fp2_sgn0 (x : (t_Fp_t × t_Fp_t)) : bool :=
  let '(x0,x1) := (x) : (t_Fp_t × t_Fp_t) in
  let sign_0 := (fp_sgn0 x0) : bool in
  let zero_0 := (x0=.?v_ZERO) : bool in
  let sign_1 := (fp_sgn0 x1) : bool in
  orb sign_0 (andb zero_0 sign_1).

Definition fp2_is_square (x : (t_Fp_t × t_Fp_t)) : bool :=
  let c1 := (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_P_1_2_)) : t_Fp_t in
  let '(x1,x2) := (x) : (t_Fp_t × t_Fp_t) in
  let tv1 := (x1.*x1) : _ in
  let tv2 := (x2.*x2) : _ in
  let tv1 := (tv1.+tv2) : _ in
  let tv1 := (pow_self tv1 c1) : t_Fp_t in
  let neg1 := (v_ZERO.-v_ONE) : _ in
  tv1<>neg1.

Definition fp2exp (n : (t_Fp_t × t_Fp_t)) (k : t_Fp_t) : (t_Fp_t × t_Fp_t) :=
  let c := (fp2fromfp v_ONE) : (t_Fp_t × t_Fp_t) in
  let c := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 381))) c (fun c i =>
      let c := (fp2mul c c) : (t_Fp_t × t_Fp_t) in
      if
        bit_under_impl_63 k ((@repr WORDSIZE32 380).-i)
      then
        let c := (fp2mul c n) : (t_Fp_t × t_Fp_t) in
        c
      else
        c)) : (t_Fp_t × t_Fp_t) in
  c.

Definition fp2_sqrt (a : (t_Fp_t × t_Fp_t)) : (t_Fp_t × t_Fp_t) :=
  let c1 := (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_P_3_4_)) : t_Fp_t in
  let c2 := (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_P_1_2_)) : t_Fp_t in
  let a1 := (fp2exp a c1) : (t_Fp_t × t_Fp_t) in
  let alpha := (fp2mul a1 (fp2mul a1 a)) : (t_Fp_t × t_Fp_t) in
  let x0 := (fp2mul a1 a) : (t_Fp_t × t_Fp_t) in
  let neg1 := ((v_ZERO.-v_ONE,v_ZERO)) : (t_Fp_t × t_Fp_t) in
  let b := (fp2exp (fp2add (fp2fromfp v_ONE) alpha) c2) : (t_Fp_t × t_Fp_t) in
  if
    alpha=.?neg1
  then
    fp2mul (v_ZERO,v_ONE) x0
  else
    fp2mul b x0.

Definition g2_curve_func (x : (t_Fp_t × t_Fp_t)) : (t_Fp_t × t_Fp_t) :=
  fp2add (fp2mul x (fp2mul x x)) (from_literal_under_impl_63 (@repr WORDSIZE128 4),from_literal_under_impl_63 (@repr WORDSIZE128 4)).

Definition g2_map_to_curve_svdw (u : (t_Fp_t × t_Fp_t)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) :=
  let z := (fp2neg (fp2fromfp v_ONE)) : (t_Fp_t × t_Fp_t) in
  let gz := (g2_curve_func z) : (t_Fp_t × t_Fp_t) in
  let tv1 := (fp2mul (fp2mul u u) gz) : (t_Fp_t × t_Fp_t) in
  let tv2 := (fp2add (fp2fromfp v_ONE) tv1) : (t_Fp_t × t_Fp_t) in
  let tv1 := (fp2sub (fp2fromfp v_ONE) tv1) : (t_Fp_t × t_Fp_t) in
  let tv3 := (fp2inv (fp2mul tv1 tv2)) : (t_Fp_t × t_Fp_t) in
  let tv4 := (fp2_sqrt (fp2mul (fp2neg gz) (fp2mul (fp2fromfp (from_literal_under_impl_63 (@repr WORDSIZE128 3))) (fp2mul z z)))) : (t_Fp_t × t_Fp_t) in
  let tv4 := (if
      fp2_sgn0 tv4
    then
      let tv4 := (fp2neg tv4) : (t_Fp_t × t_Fp_t) in
      tv4
    else
      tv4) : (t_Fp_t × t_Fp_t) in
  let tv5 := (fp2mul (fp2mul (fp2mul u tv1) tv3) tv4) : (t_Fp_t × t_Fp_t) in
  let tv6 := (fp2mul (fp2mul (fp2neg (fp2fromfp (from_literal_under_impl_63 (@repr WORDSIZE128 4)))) gz) (fp2inv (fp2mul (fp2fromfp (from_literal_under_impl_63 (@repr WORDSIZE128 3))) (fp2mul z z)))) : (t_Fp_t × t_Fp_t) in
  let x1 := (fp2sub (fp2mul (fp2neg z) (fp2inv (fp2fromfp v_TWO))) tv5) : (t_Fp_t × t_Fp_t) in
  let x2 := (fp2add (fp2mul (fp2neg z) (fp2inv (fp2fromfp v_TWO))) tv5) : (t_Fp_t × t_Fp_t) in
  let tv7 := (fp2mul (fp2mul tv2 tv2) tv3) : (t_Fp_t × t_Fp_t) in
  let x3 := (fp2add z (fp2mul tv6 (fp2mul tv7 tv7))) : (t_Fp_t × t_Fp_t) in
  let x := (if
      fp2_is_square (g2_curve_func x1)
    then
      x1
    else
      if
        fp2_is_square (g2_curve_func x2)
      then
        x2
      else
        x3) : (t_Fp_t × t_Fp_t) in
  let y := (fp2_sqrt (g2_curve_func x)) : (t_Fp_t × t_Fp_t) in
  let y := (if
      (fp2_sgn0 u)<>(fp2_sgn0 y)
    then
      let y := (fp2neg y) : (t_Fp_t × t_Fp_t) in
      y
    else
      y) : (t_Fp_t × t_Fp_t) in
  (x,y,false).

Definition psi (p : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) :=
  let c1 := (fp2inv (fp2exp (v_ONE,v_ONE) ((v_ZERO.-v_ONE).*(inv_under_impl_57 (from_literal_under_impl_63 (@repr WORDSIZE128 3)))))) : (t_Fp_t × t_Fp_t) in
  let c2 := (fp2inv (fp2exp (v_ONE,v_ONE) ((v_ZERO.-v_ONE).*(inv_under_impl_57 v_TWO)))) : (t_Fp_t × t_Fp_t) in
  let '(x,y,inf) := (p) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let qx := (fp2mul c1 (fp2conjugate x)) : (t_Fp_t × t_Fp_t) in
  let qy := (fp2mul c2 (fp2conjugate y)) : (t_Fp_t × t_Fp_t) in
  (qx,qy,inf).

Definition g2_clear_cofactor (p : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) :=
  let c1 := (from_literal_under_impl_199 (@repr WORDSIZE128 15132376222941642752)) : t_Scalar_t in
  let t1 := (g2mul c1 p) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let t1 := (g2neg t1) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let t2 := (psi p) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let t3 := (g2double p) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let t3 := (psi (psi t3)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let t3 := (g2add t3 (g2neg t2)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let t2 := (g2add t1 t2) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let t2 := (g2mul c1 t2) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let t2 := (g2neg t2) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let t3 := (g2add t3 t2) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let t3 := (g2add t3 (g2neg t1)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  g2add t3 (g2neg p).

Definition g2_hash_to_curve_svdw (msg : t_Seq_t t_U8_t) (dst : t_Seq_t t_U8_t) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) :=
  let u := (fp2_hash_to_field msg dst (@repr WORDSIZE32 2)) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let q0 := (g2_map_to_curve_svdw (u.[(@repr WORDSIZE32 0)])) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let q1 := (g2_map_to_curve_svdw (u.[(@repr WORDSIZE32 1)])) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let r := (g2add q0 q1) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  g2_clear_cofactor r.

Definition g2_encode_to_curve_svdw (msg : t_Seq_t t_U8_t) (dst : t_Seq_t t_U8_t) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) :=
  let u := (fp2_hash_to_field msg dst (@repr WORDSIZE32 1)) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let q := (g2_map_to_curve_svdw (u.[(@repr WORDSIZE32 0)])) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  g2_clear_cofactor q.

Definition v_G1_ISO_A : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 5707120929990979);
    U64 (@repr WORDSIZE64 4425131892511951234);
    U64 (@repr WORDSIZE64 12748169179688756904);
    U64 (@repr WORDSIZE64 15629909748249821612);
    U64 (@repr WORDSIZE64 10994253769421683071);
    U64 (@repr WORDSIZE64 6698022561392380957)]).

Definition v_G1_ISO_B : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1360808972976160816);
    U64 (@repr WORDSIZE64 111203405409480251);
    U64 (@repr WORDSIZE64 2312248699302920304);
    U64 (@repr WORDSIZE64 11581500465278574325);
    U64 (@repr WORDSIZE64 6495071758858381989);
    U64 (@repr WORDSIZE64 15117538217124375520)]).

Definition v_G1_XNUM_K_0_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1270119733718627136);
    U64 (@repr WORDSIZE64 13261148298159854981);
    U64 (@repr WORDSIZE64 7723742117508874335);
    U64 (@repr WORDSIZE64 17465657917644792520);
    U64 (@repr WORDSIZE64 6201670911048166766);
    U64 (@repr WORDSIZE64 12586459670690286007)]).

Definition v_G1_XNUM_K_1_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1668951808976071471);
    U64 (@repr WORDSIZE64 398773841247578140);
    U64 (@repr WORDSIZE64 8941869963990959127);
    U64 (@repr WORDSIZE64 17682789360670468203);
    U64 (@repr WORDSIZE64 5204176168283587414);
    U64 (@repr WORDSIZE64 16732261237459223483)]).

Definition v_G1_XNUM_K_2_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 960393023080265964);
    U64 (@repr WORDSIZE64 2094253841180170779);
    U64 (@repr WORDSIZE64 14844748873776858085);
    U64 (@repr WORDSIZE64 7528018573573808732);
    U64 (@repr WORDSIZE64 10776056440809943711);
    U64 (@repr WORDSIZE64 16147550488514976944)]).

Definition v_G1_XNUM_K_3_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1691355743628586423);
    U64 (@repr WORDSIZE64 5622191986793862162);
    U64 (@repr WORDSIZE64 15561595211679121189);
    U64 (@repr WORDSIZE64 17416319752018800771);
    U64 (@repr WORDSIZE64 5996228842464768403);
    U64 (@repr WORDSIZE64 14245880009877842017)]).

Definition v_G1_XNUM_K_4_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1051997788391994435);
    U64 (@repr WORDSIZE64 7368650625050054228);
    U64 (@repr WORDSIZE64 11086623519836470079);
    U64 (@repr WORDSIZE64 607681821319080984);
    U64 (@repr WORDSIZE64 10978131499682789316);
    U64 (@repr WORDSIZE64 5842660658088809945)]).

Definition v_G1_XNUM_K_5_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1598992431623377919);
    U64 (@repr WORDSIZE64 130921168661596853);
    U64 (@repr WORDSIZE64 15797696746983946651);
    U64 (@repr WORDSIZE64 11444679715590672272);
    U64 (@repr WORDSIZE64 11567228658253249817);
    U64 (@repr WORDSIZE64 14777367860349315459)]).

Definition v_G1_XNUM_K_6_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 967946631563726121);
    U64 (@repr WORDSIZE64 7653628713030275775);
    U64 (@repr WORDSIZE64 12760252618317466849);
    U64 (@repr WORDSIZE64 10378793938173061930);
    U64 (@repr WORDSIZE64 10205808941053849290);
    U64 (@repr WORDSIZE64 15985511645807504772)]).

Definition v_G1_XNUM_K_7_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1709149555065084898);
    U64 (@repr WORDSIZE64 16750075057192140371);
    U64 (@repr WORDSIZE64 3849985779734105521);
    U64 (@repr WORDSIZE64 11998370262181639475);
    U64 (@repr WORDSIZE64 4159013751748851119);
    U64 (@repr WORDSIZE64 11298218755092433038)]).

Definition v_G1_XNUM_K_8_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 580186936973955012);
    U64 (@repr WORDSIZE64 8903813505199544589);
    U64 (@repr WORDSIZE64 14140024565662700916);
    U64 (@repr WORDSIZE64 11728946595272970718);
    U64 (@repr WORDSIZE64 5738313744366653077);
    U64 (@repr WORDSIZE64 7886252005760951063)]).

Definition v_G1_XNUM_K_9_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1628930385436977092);
    U64 (@repr WORDSIZE64 3318087848058654498);
    U64 (@repr WORDSIZE64 15937899882900905113);
    U64 (@repr WORDSIZE64 7449821001803307903);
    U64 (@repr WORDSIZE64 11752436998487615353);
    U64 (@repr WORDSIZE64 9161465579737517214)]).

Definition v_G1_XNUM_K_10_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1167027828517898210);
    U64 (@repr WORDSIZE64 8275623842221021965);
    U64 (@repr WORDSIZE64 18049808134997311382);
    U64 (@repr WORDSIZE64 15351349873550116966);
    U64 (@repr WORDSIZE64 17769927732099571180);
    U64 (@repr WORDSIZE64 14584871380308065147)]).

Definition v_G1_XNUM_K_11_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 495550047642324592);
    U64 (@repr WORDSIZE64 13627494601717575229);
    U64 (@repr WORDSIZE64 3591512392926246844);
    U64 (@repr WORDSIZE64 2576269112800734056);
    U64 (@repr WORDSIZE64 14000314106239596831);
    U64 (@repr WORDSIZE64 12234233096825917993)]).

Definition v_G1_XDEN_K_0_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 633474091881273774);
    U64 (@repr WORDSIZE64 1779737893574802031);
    U64 (@repr WORDSIZE64 132274872219551930);
    U64 (@repr WORDSIZE64 11283074393783708770);
    U64 (@repr WORDSIZE64 13067430171545714168);
    U64 (@repr WORDSIZE64 11041975239630265116)]).

Definition v_G1_XDEN_K_1_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1321272531362356291);
    U64 (@repr WORDSIZE64 5238936591227237942);
    U64 (@repr WORDSIZE64 8089002360232247308);
    U64 (@repr WORDSIZE64 82967328719421271);
    U64 (@repr WORDSIZE64 1430641118356186857);
    U64 (@repr WORDSIZE64 16557527386785790975)]).

Definition v_G1_XDEN_K_2_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 804282852993868382);
    U64 (@repr WORDSIZE64 9311163821600184607);
    U64 (@repr WORDSIZE64 8037026956533927121);
    U64 (@repr WORDSIZE64 18205324308570099372);
    U64 (@repr WORDSIZE64 15466434890074226396);
    U64 (@repr WORDSIZE64 18213183315621985817)]).

Definition v_G1_XDEN_K_3_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 234844145893171966);
    U64 (@repr WORDSIZE64 14428037799351479124);
    U64 (@repr WORDSIZE64 6559532710647391569);
    U64 (@repr WORDSIZE64 6110444250091843536);
    U64 (@repr WORDSIZE64 5293652763671852484);
    U64 (@repr WORDSIZE64 1373009181854280920)]).

Definition v_G1_XDEN_K_4_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1416629893867312296);
    U64 (@repr WORDSIZE64 751851957792514173);
    U64 (@repr WORDSIZE64 18437674587247370939);
    U64 (@repr WORDSIZE64 10190314345946351322);
    U64 (@repr WORDSIZE64 11228207967368476701);
    U64 (@repr WORDSIZE64 6025034940388909598)]).

Definition v_G1_XDEN_K_5_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1041270466333271993);
    U64 (@repr WORDSIZE64 6140956605115975401);
    U64 (@repr WORDSIZE64 4131830461445745997);
    U64 (@repr WORDSIZE64 739642499118176303);
    U64 (@repr WORDSIZE64 8358912131254619921);
    U64 (@repr WORDSIZE64 13847998906088228005)]).

Definition v_G1_XDEN_K_6_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 536714149743900185);
    U64 (@repr WORDSIZE64 1098328982230230817);
    U64 (@repr WORDSIZE64 6273329123533496713);
    U64 (@repr WORDSIZE64 5633448088282521244);
    U64 (@repr WORDSIZE64 16894043798660571244);
    U64 (@repr WORDSIZE64 17016134625831438906)]).

Definition v_G1_XDEN_K_7_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1488347500898461874);
    U64 (@repr WORDSIZE64 3509418672874520985);
    U64 (@repr WORDSIZE64 7962192351555381416);
    U64 (@repr WORDSIZE64 1843909372225399896);
    U64 (@repr WORDSIZE64 1127511003250156243);
    U64 (@repr WORDSIZE64 1294742680819751518)]).

Definition v_G1_XDEN_K_8_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 725340084226051970);
    U64 (@repr WORDSIZE64 6814521545734988748);
    U64 (@repr WORDSIZE64 16176803544133875307);
    U64 (@repr WORDSIZE64 8363199516777220149);
    U64 (@repr WORDSIZE64 252877309218538352);
    U64 (@repr WORDSIZE64 5149562959837648449)]).

Definition v_G1_XDEN_K_9_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 675470927100193492);
    U64 (@repr WORDSIZE64 5146891164735334016);
    U64 (@repr WORDSIZE64 17762958817130696759);
    U64 (@repr WORDSIZE64 8565656522589412373);
    U64 (@repr WORDSIZE64 10599026333335446784);
    U64 (@repr WORDSIZE64 3270603789344496906)]).

Definition v_G1_YNUM_K_0_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 652344406751465184);
    U64 (@repr WORDSIZE64 2710356675495255290);
    U64 (@repr WORDSIZE64 1273695771440998738);
    U64 (@repr WORDSIZE64 3121750372618945491);
    U64 (@repr WORDSIZE64 14775319642720936898);
    U64 (@repr WORDSIZE64 13733803417833814835)]).

Definition v_G1_YNUM_K_1_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1389807578337138705);
    U64 (@repr WORDSIZE64 15352831428748068483);
    U64 (@repr WORDSIZE64 1307144967559264317);
    U64 (@repr WORDSIZE64 1121505450578652468);
    U64 (@repr WORDSIZE64 15475889019760388287);
    U64 (@repr WORDSIZE64 16183658160488302230)]).

Definition v_G1_YNUM_K_2_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 57553299067792998);
    U64 (@repr WORDSIZE64 17628079362768849300);
    U64 (@repr WORDSIZE64 2689461337731570914);
    U64 (@repr WORDSIZE64 14070580367580990887);
    U64 (@repr WORDSIZE64 15162865775551710499);
    U64 (@repr WORDSIZE64 13321614990632673782)]).

Definition v_G1_YNUM_K_3_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 141972750621744161);
    U64 (@repr WORDSIZE64 8689824239172478807);
    U64 (@repr WORDSIZE64 15288216298323671324);
    U64 (@repr WORDSIZE64 712874875091754233);
    U64 (@repr WORDSIZE64 16014900032503684588);
    U64 (@repr WORDSIZE64 11976580453200426187)]).

Definition v_G1_YNUM_K_4_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 633886036738506515);
    U64 (@repr WORDSIZE64 6678644607214234052);
    U64 (@repr WORDSIZE64 1825425679455244472);
    U64 (@repr WORDSIZE64 8755912272271186652);
    U64 (@repr WORDSIZE64 3379943669301788840);
    U64 (@repr WORDSIZE64 4735212769449148123)]).

Definition v_G1_YNUM_K_5_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1612358804494830442);
    U64 (@repr WORDSIZE64 2454990789666711200);
    U64 (@repr WORDSIZE64 8405916841409361853);
    U64 (@repr WORDSIZE64 8525415512662168654);
    U64 (@repr WORDSIZE64 2323684950984523890);
    U64 (@repr WORDSIZE64 11074978966450447856)]).

Definition v_G1_YNUM_K_6_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 336375361001233340);
    U64 (@repr WORDSIZE64 12882959944969186108);
    U64 (@repr WORDSIZE64 16671121624101127371);
    U64 (@repr WORDSIZE64 5922586712221110071);
    U64 (@repr WORDSIZE64 5163511947597922654);
    U64 (@repr WORDSIZE64 14511152726087948018)]).

Definition v_G1_YNUM_K_7_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 686738286210365551);
    U64 (@repr WORDSIZE64 16039894141796533876);
    U64 (@repr WORDSIZE64 1660145734357211167);
    U64 (@repr WORDSIZE64 18231571463891878950);
    U64 (@repr WORDSIZE64 4825120264949852469);
    U64 (@repr WORDSIZE64 11627815551290637097)]).

Definition v_G1_YNUM_K_8_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 719520515476580427);
    U64 (@repr WORDSIZE64 16756942182913253819);
    U64 (@repr WORDSIZE64 10320769399998235244);
    U64 (@repr WORDSIZE64 2200974244968450750);
    U64 (@repr WORDSIZE64 7626373186594408355);
    U64 (@repr WORDSIZE64 6933025920263103879)]).

Definition v_G1_YNUM_K_9_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1016611174344998325);
    U64 (@repr WORDSIZE64 2466492548686891555);
    U64 (@repr WORDSIZE64 14135124294293452542);
    U64 (@repr WORDSIZE64 475233659467912251);
    U64 (@repr WORDSIZE64 11186783513499056751);
    U64 (@repr WORDSIZE64 3147922594245844016)]).

Definition v_G1_YNUM_K_10_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1833315000454533566);
    U64 (@repr WORDSIZE64 1007974600900082579);
    U64 (@repr WORDSIZE64 14785260176242854207);
    U64 (@repr WORDSIZE64 15066861003931772432);
    U64 (@repr WORDSIZE64 3584647998681889532);
    U64 (@repr WORDSIZE64 16722834201330696498)]).

Definition v_G1_YNUM_K_11_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1780164921828767454);
    U64 (@repr WORDSIZE64 13337622794239929804);
    U64 (@repr WORDSIZE64 5923739534552515142);
    U64 (@repr WORDSIZE64 3345046972101780530);
    U64 (@repr WORDSIZE64 5321510883028162054);
    U64 (@repr WORDSIZE64 14846055306840460686)]).

Definition v_G1_YNUM_K_12_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 799438051374502809);
    U64 (@repr WORDSIZE64 15083972834952036164);
    U64 (@repr WORDSIZE64 8838227588559581326);
    U64 (@repr WORDSIZE64 13846054168121598783);
    U64 (@repr WORDSIZE64 488730451382505970);
    U64 (@repr WORDSIZE64 958146249756188408)]).

Definition v_G1_YNUM_K_13_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 163716820423854747);
    U64 (@repr WORDSIZE64 8285498163857659356);
    U64 (@repr WORDSIZE64 8465424830341846400);
    U64 (@repr WORDSIZE64 1433942577299613084);
    U64 (@repr WORDSIZE64 14325828012864645732);
    U64 (@repr WORDSIZE64 4817114329354076467)]).

Definition v_G1_YNUM_K_14_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 414658151749832465);
    U64 (@repr WORDSIZE64 189531577938912252);
    U64 (@repr WORDSIZE64 6802473390048830824);
    U64 (@repr WORDSIZE64 15684647020317539556);
    U64 (@repr WORDSIZE64 7755485098777620407);
    U64 (@repr WORDSIZE64 9685868895687483979)]).

Definition v_G1_YNUM_K_15_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1578157964224562126);
    U64 (@repr WORDSIZE64 5666948055268535989);
    U64 (@repr WORDSIZE64 14634479491382401593);
    U64 (@repr WORDSIZE64 6317940024988860850);
    U64 (@repr WORDSIZE64 13142913832013798519);
    U64 (@repr WORDSIZE64 338991247778166276)]).

Definition v_G1_YDEN_K_0_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1590100849350973618);
    U64 (@repr WORDSIZE64 5915497081334721257);
    U64 (@repr WORDSIZE64 6924968209373727718);
    U64 (@repr WORDSIZE64 17204633670617869946);
    U64 (@repr WORDSIZE64 572916540828819565);
    U64 (@repr WORDSIZE64 92203205520679873)]).

Definition v_G1_YDEN_K_1_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1829261189398470686);
    U64 (@repr WORDSIZE64 1877083417397643448);
    U64 (@repr WORDSIZE64 9640042925497046428);
    U64 (@repr WORDSIZE64 11862766565471805471);
    U64 (@repr WORDSIZE64 8693114993904885301);
    U64 (@repr WORDSIZE64 3672140328108400701)]).

Definition v_G1_YDEN_K_2_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 400243331105348135);
    U64 (@repr WORDSIZE64 8046435537999802711);
    U64 (@repr WORDSIZE64 8702226981475745585);
    U64 (@repr WORDSIZE64 879791671491744492);
    U64 (@repr WORDSIZE64 11994630442058346377);
    U64 (@repr WORDSIZE64 2172204746352322546)]).

Definition v_G1_YDEN_K_3_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1637008473169220501);
    U64 (@repr WORDSIZE64 17441636237435581649);
    U64 (@repr WORDSIZE64 15066165676546511630);
    U64 (@repr WORDSIZE64 1314387578457599809);
    U64 (@repr WORDSIZE64 8247046336453711789);
    U64 (@repr WORDSIZE64 12164906044230685718)]).

Definition v_G1_YDEN_K_4_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 855930740911588324);
    U64 (@repr WORDSIZE64 12685735333705453020);
    U64 (@repr WORDSIZE64 14326404096614579120);
    U64 (@repr WORDSIZE64 6066025509460822294);
    U64 (@repr WORDSIZE64 11676450493790612973);
    U64 (@repr WORDSIZE64 15724621714793234461)]).

Definition v_G1_YDEN_K_5_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 637792788410719021);
    U64 (@repr WORDSIZE64 11507373155986977154);
    U64 (@repr WORDSIZE64 13186912195705886849);
    U64 (@repr WORDSIZE64 14262012144631372388);
    U64 (@repr WORDSIZE64 5328758613570342114);
    U64 (@repr WORDSIZE64 199925847119476652)]).

Definition v_G1_YDEN_K_6_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1612297190139091759);
    U64 (@repr WORDSIZE64 14103733843373163083);
    U64 (@repr WORDSIZE64 6840121186619029743);
    U64 (@repr WORDSIZE64 6760859324815900753);
    U64 (@repr WORDSIZE64 15418807805142572985);
    U64 (@repr WORDSIZE64 4402853133867972444)]).

Definition v_G1_YDEN_K_7_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1631410310868805610);
    U64 (@repr WORDSIZE64 269334146695233390);
    U64 (@repr WORDSIZE64 16547411811928854487);
    U64 (@repr WORDSIZE64 18353100669930795314);
    U64 (@repr WORDSIZE64 13339932232668798692);
    U64 (@repr WORDSIZE64 6984591927261867737)]).

Definition v_G1_YDEN_K_8_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1758313625630302499);
    U64 (@repr WORDSIZE64 1881349400343039172);
    U64 (@repr WORDSIZE64 18013005311323887904);
    U64 (@repr WORDSIZE64 12377427846571989832);
    U64 (@repr WORDSIZE64 5967237584920922243);
    U64 (@repr WORDSIZE64 7720081932193848650)]).

Definition v_G1_YDEN_K_9_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1619701357752249884);
    U64 (@repr WORDSIZE64 16898074901591262352);
    U64 (@repr WORDSIZE64 3609344159736760251);
    U64 (@repr WORDSIZE64 5983130161189999867);
    U64 (@repr WORDSIZE64 14355327869992416094);
    U64 (@repr WORDSIZE64 3778226018344582997)]).

Definition v_G1_YDEN_K_10_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 347606589330687421);
    U64 (@repr WORDSIZE64 5255719044972187933);
    U64 (@repr WORDSIZE64 11271894388753671721);
    U64 (@repr WORDSIZE64 1033887512062764488);
    U64 (@repr WORDSIZE64 8189165486932690436);
    U64 (@repr WORDSIZE64 70004379462101672)]).

Definition v_G1_YDEN_K_11_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 778202887894139711);
    U64 (@repr WORDSIZE64 17691595219776375879);
    U64 (@repr WORDSIZE64 9193253711563866834);
    U64 (@repr WORDSIZE64 10092455202333888821);
    U64 (@repr WORDSIZE64 1655469341950262250);
    U64 (@repr WORDSIZE64 10845992994110574738)]).

Definition v_G1_YDEN_K_12_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 781015344221683683);
    U64 (@repr WORDSIZE64 14078588081290548374);
    U64 (@repr WORDSIZE64 6067271023149908518);
    U64 (@repr WORDSIZE64 9033357708497886086);
    U64 (@repr WORDSIZE64 10592474449179118273);
    U64 (@repr WORDSIZE64 2204988348113831372)]).

Definition v_G1_YDEN_K_13_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 172830037692534587);
    U64 (@repr WORDSIZE64 7101012286790006514);
    U64 (@repr WORDSIZE64 13787308004332873665);
    U64 (@repr WORDSIZE64 14660498759553796110);
    U64 (@repr WORDSIZE64 4757234684169342080);
    U64 (@repr WORDSIZE64 15130647872920159991)]).

Definition v_G1_YDEN_K_14_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1013206390650290238);
    U64 (@repr WORDSIZE64 7720336747103001025);
    U64 (@repr WORDSIZE64 8197694151986493523);
    U64 (@repr WORDSIZE64 3625112747029342752);
    U64 (@repr WORDSIZE64 6675167463148394368);
    U64 (@repr WORDSIZE64 4905905684016745359)]).

Definition g1_simple_swu_iso (u : t_Fp_t) : (t_Fp_t × t_Fp_t) :=
  let z := (from_literal_under_impl_63 (@repr WORDSIZE128 11)) : t_Fp_t in
  let a := (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_ISO_A)) : t_Fp_t in
  let b := (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_ISO_B)) : t_Fp_t in
  let tv1 := (inv_under_impl_57 (((z.*z).*(exp u (@repr WORDSIZE32 4))).+((z.*u).*u))) : t_Fp_t in
  let x1 := (((v_ZERO.-b).*(inv_under_impl_57 a)).*(v_ONE.+tv1)) : _ in
  let x1 := (if
      tv1=.?v_ZERO
    then
      let x1 := (b.*(inv_under_impl_57 (z.*a))) : _ in
      x1
    else
      x1) : _ in
  let gx1 := (((exp x1 (@repr WORDSIZE32 3)).+(a.*x1)).+b) : _ in
  let x2 := (((z.*u).*u).*x1) : _ in
  let gx2 := (((exp x2 (@repr WORDSIZE32 3)).+(a.*x2)).+b) : _ in
  let '(x,y) := (if
      fp_is_square gx1
    then
      (x1,fp_sqrt gx1)
    else
      (x2,fp_sqrt gx2)) : (t_Fp_t × t_Fp_t) in
  let y := (if
      (fp_sgn0 u)<>(fp_sgn0 y)
    then
      let y := (v_ZERO.-y) : _ in
      y
    else
      y) : _ in
  (x,y).

Definition g1_isogeny_map (x : t_Fp_t) (y : t_Fp_t) : (t_Fp_t × t_Fp_t × bool) :=
  let xnum_k := (new_under_impl_41 (@repr WORDSIZE32 12)) : t_Seq_t t_Fp_t in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 0) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XNUM_K_0_))) : t_Seq_t t_Fp_t in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 1) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XNUM_K_1_))) : t_Seq_t t_Fp_t in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 2) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XNUM_K_2_))) : t_Seq_t t_Fp_t in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 3) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XNUM_K_3_))) : t_Seq_t t_Fp_t in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 4) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XNUM_K_4_))) : t_Seq_t t_Fp_t in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 5) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XNUM_K_5_))) : t_Seq_t t_Fp_t in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 6) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XNUM_K_6_))) : t_Seq_t t_Fp_t in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 7) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XNUM_K_7_))) : t_Seq_t t_Fp_t in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 8) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XNUM_K_8_))) : t_Seq_t t_Fp_t in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 9) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XNUM_K_9_))) : t_Seq_t t_Fp_t in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 10) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XNUM_K_10_))) : t_Seq_t t_Fp_t in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 11) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XNUM_K_11_))) : t_Seq_t t_Fp_t in
  let xden_k := (new_under_impl_41 (@repr WORDSIZE32 10)) : t_Seq_t t_Fp_t in
  let xden_k := (update_at xden_k (@repr WORDSIZE32 0) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XDEN_K_0_))) : t_Seq_t t_Fp_t in
  let xden_k := (update_at xden_k (@repr WORDSIZE32 1) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XDEN_K_1_))) : t_Seq_t t_Fp_t in
  let xden_k := (update_at xden_k (@repr WORDSIZE32 2) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XDEN_K_2_))) : t_Seq_t t_Fp_t in
  let xden_k := (update_at xden_k (@repr WORDSIZE32 3) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XDEN_K_3_))) : t_Seq_t t_Fp_t in
  let xden_k := (update_at xden_k (@repr WORDSIZE32 4) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XDEN_K_4_))) : t_Seq_t t_Fp_t in
  let xden_k := (update_at xden_k (@repr WORDSIZE32 5) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XDEN_K_5_))) : t_Seq_t t_Fp_t in
  let xden_k := (update_at xden_k (@repr WORDSIZE32 6) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XDEN_K_6_))) : t_Seq_t t_Fp_t in
  let xden_k := (update_at xden_k (@repr WORDSIZE32 7) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XDEN_K_7_))) : t_Seq_t t_Fp_t in
  let xden_k := (update_at xden_k (@repr WORDSIZE32 8) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XDEN_K_8_))) : t_Seq_t t_Fp_t in
  let xden_k := (update_at xden_k (@repr WORDSIZE32 9) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_XDEN_K_9_))) : t_Seq_t t_Fp_t in
  let ynum_k := (new_under_impl_41 (@repr WORDSIZE32 16)) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 0) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_0_))) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 1) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_1_))) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 2) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_2_))) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 3) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_3_))) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 4) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_4_))) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 5) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_5_))) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 6) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_6_))) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 7) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_7_))) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 8) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_8_))) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 9) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_9_))) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 10) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_10_))) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 11) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_11_))) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 12) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_12_))) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 13) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_13_))) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 14) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_14_))) : t_Seq_t t_Fp_t in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 15) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YNUM_K_15_))) : t_Seq_t t_Fp_t in
  let yden_k := (new_under_impl_41 (@repr WORDSIZE32 15)) : t_Seq_t t_Fp_t in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 0) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YDEN_K_0_))) : t_Seq_t t_Fp_t in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 1) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YDEN_K_1_))) : t_Seq_t t_Fp_t in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 2) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YDEN_K_2_))) : t_Seq_t t_Fp_t in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 3) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YDEN_K_3_))) : t_Seq_t t_Fp_t in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 4) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YDEN_K_4_))) : t_Seq_t t_Fp_t in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 5) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YDEN_K_5_))) : t_Seq_t t_Fp_t in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 6) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YDEN_K_6_))) : t_Seq_t t_Fp_t in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 7) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YDEN_K_7_))) : t_Seq_t t_Fp_t in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 8) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YDEN_K_8_))) : t_Seq_t t_Fp_t in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 9) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YDEN_K_9_))) : t_Seq_t t_Fp_t in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 10) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YDEN_K_10_))) : t_Seq_t t_Fp_t in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 11) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YDEN_K_11_))) : t_Seq_t t_Fp_t in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 12) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YDEN_K_12_))) : t_Seq_t t_Fp_t in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 13) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YDEN_K_13_))) : t_Seq_t t_Fp_t in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 14) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G1_YDEN_K_14_))) : t_Seq_t t_Fp_t in
  let xnum := (v_ZERO) : t_Fp_t in
  let xx := (v_ONE) : t_Fp_t in
  let '(xnum,xx) := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(len_under_impl_41 xnum_k))) (xnum,xx) (fun '(xnum,xx) i =>
      let xnum := (xnum.+(xx.*(xnum_k.[i]))) : _ in
      let xx := (xx.*x) : _ in
      (xnum,xx))) : (_ × _) in
  let xden := (v_ZERO) : t_Fp_t in
  let xx := (v_ONE) : t_Fp_t in
  let '(xden,xx) := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(len_under_impl_41 xden_k))) (xden,xx) (fun '(xden,xx) i =>
      let xden := (xden.+(xx.*(xden_k.[i]))) : _ in
      let xx := (xx.*x) : _ in
      (xden,xx))) : (_ × _) in
  let xden := (xden.+xx) : _ in
  let ynum := (v_ZERO) : t_Fp_t in
  let xx := (v_ONE) : t_Fp_t in
  let '(xx,ynum) := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(len_under_impl_41 ynum_k))) (xx,ynum) (fun '(xx,ynum) i =>
      let ynum := (ynum.+(xx.*(ynum_k.[i]))) : _ in
      let xx := (xx.*x) : _ in
      (xx,ynum))) : (_ × _) in
  let yden := (v_ZERO) : t_Fp_t in
  let xx := (v_ONE) : t_Fp_t in
  let '(xx,yden) := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(len_under_impl_41 yden_k))) (xx,yden) (fun '(xx,yden) i =>
      let yden := (yden.+(xx.*(yden_k.[i]))) : _ in
      let xx := (xx.*x) : _ in
      (xx,yden))) : (_ × _) in
  let yden := (yden.+xx) : _ in
  let xr := (xnum.*(inv_under_impl_57 xden)) : _ in
  let yr := ((y.*ynum).*(inv_under_impl_57 yden)) : _ in
  let inf := (false) : bool in
  let inf := (if
      orb (xden=.?v_ZERO) (yden=.?v_ZERO)
    then
      let inf := (true) : bool in
      inf
    else
      inf) : bool in
  (xr,yr,inf).

Definition g1_map_to_curve_sswu (u : t_Fp_t) : (t_Fp_t × t_Fp_t × bool) :=
  let '(xp,yp) := (g1_simple_swu_iso u) : (t_Fp_t × t_Fp_t) in
  g1_isogeny_map xp yp.

Definition g1_hash_to_curve_sswu (msg : t_Seq_t t_U8_t) (dst : t_Seq_t t_U8_t) : (t_Fp_t × t_Fp_t × bool) :=
  let u := (fp_hash_to_field msg dst (@repr WORDSIZE32 2)) : t_Seq_t t_Fp_t in
  let q0 := (g1_map_to_curve_sswu (u.[(@repr WORDSIZE32 0)])) : (t_Fp_t × t_Fp_t × bool) in
  let q1 := (g1_map_to_curve_sswu (u.[(@repr WORDSIZE32 1)])) : (t_Fp_t × t_Fp_t × bool) in
  let r := (g1add q0 q1) : (t_Fp_t × t_Fp_t × bool) in
  g1_clear_cofactor r.

Definition g1_encode_to_curve_sswu (msg : t_Seq_t t_U8_t) (dst : t_Seq_t t_U8_t) : (t_Fp_t × t_Fp_t × bool) :=
  let u := (fp_hash_to_field msg dst (@repr WORDSIZE32 1)) : t_Seq_t t_Fp_t in
  let q := (g1_map_to_curve_sswu (u.[(@repr WORDSIZE32 0)])) : (t_Fp_t × t_Fp_t × bool) in
  g1_clear_cofactor q.

Definition v_G2_XNUM_K_0_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 416399692810564414);
    U64 (@repr WORDSIZE64 13500519111022079365);
    U64 (@repr WORDSIZE64 3658379999393219626);
    U64 (@repr WORDSIZE64 9850925049107374429);
    U64 (@repr WORDSIZE64 6640057249351452444);
    U64 (@repr WORDSIZE64 7077594464397203414)]).

Definition v_G2_XNUM_K_1_I : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1249199078431693244);
    U64 (@repr WORDSIZE64 3608069185647134863);
    U64 (@repr WORDSIZE64 10975139998179658879);
    U64 (@repr WORDSIZE64 11106031073612571672);
    U64 (@repr WORDSIZE64 1473427674344805717);
    U64 (@repr WORDSIZE64 2786039319482058522)]).

Definition v_G2_XNUM_K_2_R : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1249199078431693244);
    U64 (@repr WORDSIZE64 3608069185647134863);
    U64 (@repr WORDSIZE64 10975139998179658879);
    U64 (@repr WORDSIZE64 11106031073612571672);
    U64 (@repr WORDSIZE64 1473427674344805717);
    U64 (@repr WORDSIZE64 2786039319482058526)]).

Definition v_G2_XNUM_K_2_I : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 624599539215846622);
    U64 (@repr WORDSIZE64 1804034592823567431);
    U64 (@repr WORDSIZE64 14710942035944605247);
    U64 (@repr WORDSIZE64 14776387573661061644);
    U64 (@repr WORDSIZE64 736713837172402858);
    U64 (@repr WORDSIZE64 10616391696595805069)]).

Definition v_G2_XNUM_K_3_R : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1665598771242257658);
    U64 (@repr WORDSIZE64 17108588296669214228);
    U64 (@repr WORDSIZE64 14633519997572878506);
    U64 (@repr WORDSIZE64 2510212049010394485);
    U64 (@repr WORDSIZE64 8113484923696258161);
    U64 (@repr WORDSIZE64 9863633783879261905)]).

Definition v_G2_XDEN_K_0_I : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1873798617647539866);
    U64 (@repr WORDSIZE64 5412103778470702295);
    U64 (@repr WORDSIZE64 7239337960414712511);
    U64 (@repr WORDSIZE64 7435674573564081700);
    U64 (@repr WORDSIZE64 2210141511517208575);
    U64 (@repr WORDSIZE64 13402431016077863523)]).

Definition v_G2_XDEN_K_1_I : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1873798617647539866);
    U64 (@repr WORDSIZE64 5412103778470702295);
    U64 (@repr WORDSIZE64 7239337960414712511);
    U64 (@repr WORDSIZE64 7435674573564081700);
    U64 (@repr WORDSIZE64 2210141511517208575);
    U64 (@repr WORDSIZE64 13402431016077863583)]).

Definition v_G2_YNUM_K_0_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1526798873638736187);
    U64 (@repr WORDSIZE64 6459500568425337235);
    U64 (@repr WORDSIZE64 1116230615302104219);
    U64 (@repr WORDSIZE64 17673314439684154624);
    U64 (@repr WORDSIZE64 18197961889718808424);
    U64 (@repr WORDSIZE64 1355520937843676934)]).

Definition v_G2_YNUM_K_1_I : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 416399692810564414);
    U64 (@repr WORDSIZE64 13500519111022079365);
    U64 (@repr WORDSIZE64 3658379999393219626);
    U64 (@repr WORDSIZE64 9850925049107374429);
    U64 (@repr WORDSIZE64 6640057249351452444);
    U64 (@repr WORDSIZE64 7077594464397203390)]).

Definition v_G2_YNUM_K_2_R : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1249199078431693244);
    U64 (@repr WORDSIZE64 3608069185647134863);
    U64 (@repr WORDSIZE64 10975139998179658879);
    U64 (@repr WORDSIZE64 11106031073612571672);
    U64 (@repr WORDSIZE64 1473427674344805717);
    U64 (@repr WORDSIZE64 2786039319482058524)]).

Definition v_G2_YNUM_K_2_I : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 624599539215846622);
    U64 (@repr WORDSIZE64 1804034592823567431);
    U64 (@repr WORDSIZE64 14710942035944605247);
    U64 (@repr WORDSIZE64 14776387573661061644);
    U64 (@repr WORDSIZE64 736713837172402858);
    U64 (@repr WORDSIZE64 10616391696595805071)]).

Definition v_G2_YNUM_K_3_R : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1318599027233453979);
    U64 (@repr WORDSIZE64 18155985086623849168);
    U64 (@repr WORDSIZE64 8510412652460270214);
    U64 (@repr WORDSIZE64 12747851915130467410);
    U64 (@repr WORDSIZE64 5654561228188306393);
    U64 (@repr WORDSIZE64 16263467779354626832)]).

Definition v_G2_YDEN_K_0_ : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1873798617647539866);
    U64 (@repr WORDSIZE64 5412103778470702295);
    U64 (@repr WORDSIZE64 7239337960414712511);
    U64 (@repr WORDSIZE64 7435674573564081700);
    U64 (@repr WORDSIZE64 2210141511517208575);
    U64 (@repr WORDSIZE64 13402431016077863163)]).

Definition v_G2_YDEN_K_1_I : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1873798617647539866);
    U64 (@repr WORDSIZE64 5412103778470702295);
    U64 (@repr WORDSIZE64 7239337960414712511);
    U64 (@repr WORDSIZE64 7435674573564081700);
    U64 (@repr WORDSIZE64 2210141511517208575);
    U64 (@repr WORDSIZE64 13402431016077863379)]).

Definition v_G2_YDEN_K_2_I : t_ArrFp_t :=
  ArrFp (array_from_list [U64 (@repr WORDSIZE64 1873798617647539866);
    U64 (@repr WORDSIZE64 5412103778470702295);
    U64 (@repr WORDSIZE64 7239337960414712511);
    U64 (@repr WORDSIZE64 7435674573564081700);
    U64 (@repr WORDSIZE64 2210141511517208575);
    U64 (@repr WORDSIZE64 13402431016077863577)]).

Definition g2_simple_swu_iso (u : (t_Fp_t × t_Fp_t)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) :=
  let z := (fp2neg (v_TWO,v_ONE)) : (t_Fp_t × t_Fp_t) in
  let a := ((v_ZERO,from_literal_under_impl_63 (@repr WORDSIZE128 240))) : (t_Fp_t × t_Fp_t) in
  let b := ((from_literal_under_impl_63 (@repr WORDSIZE128 1012),from_literal_under_impl_63 (@repr WORDSIZE128 1012))) : (t_Fp_t × t_Fp_t) in
  let tv1 := (fp2inv (fp2add (fp2mul (fp2mul z z) (fp2mul (fp2mul u u) (fp2mul u u))) (fp2mul z (fp2mul u u)))) : (t_Fp_t × t_Fp_t) in
  let x1 := (fp2mul (fp2mul (fp2neg b) (fp2inv a)) (fp2add (fp2fromfp v_ONE) tv1)) : (t_Fp_t × t_Fp_t) in
  let x1 := (if
      tv1=.?fp2zero
    then
      let x1 := (fp2mul b (fp2inv (fp2mul z a))) : (t_Fp_t × t_Fp_t) in
      x1
    else
      x1) : (t_Fp_t × t_Fp_t) in
  let gx1 := (fp2add (fp2add (fp2mul (fp2mul x1 x1) x1) (fp2mul a x1)) b) : (t_Fp_t × t_Fp_t) in
  let x2 := (fp2mul (fp2mul z (fp2mul u u)) x1) : (t_Fp_t × t_Fp_t) in
  let gx2 := (fp2add (fp2add (fp2mul (fp2mul x2 x2) x2) (fp2mul a x2)) b) : (t_Fp_t × t_Fp_t) in
  let '(x,y) := (if
      fp2_is_square gx1
    then
      (x1,fp2_sqrt gx1)
    else
      (x2,fp2_sqrt gx2)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let y := (if
      (fp2_sgn0 u)<>(fp2_sgn0 y)
    then
      let y := (fp2neg y) : (t_Fp_t × t_Fp_t) in
      y
    else
      y) : (t_Fp_t × t_Fp_t) in
  (x,y).

Definition g2_isogeny_map (x : (t_Fp_t × t_Fp_t)) (y : (t_Fp_t × t_Fp_t)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) :=
  let xnum_k := (new_under_impl_41 (@repr WORDSIZE32 4)) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 0) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_XNUM_K_0_),from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_XNUM_K_0_))) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 1) (v_ZERO,from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_XNUM_K_1_I))) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 2) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_XNUM_K_2_R),from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_XNUM_K_2_I))) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let xnum_k := (update_at xnum_k (@repr WORDSIZE32 3) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_XNUM_K_3_R),v_ZERO)) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let xden_k := (new_under_impl_41 (@repr WORDSIZE32 2)) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let xden_k := (update_at xden_k (@repr WORDSIZE32 0) (v_ZERO,from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_XDEN_K_0_I))) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let xden_k := (update_at xden_k (@repr WORDSIZE32 1) (from_literal_under_impl_63 (@repr WORDSIZE128 12),from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_XDEN_K_1_I))) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let ynum_k := (new_under_impl_41 (@repr WORDSIZE32 4)) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 0) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_YNUM_K_0_),from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_YNUM_K_0_))) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 1) (v_ZERO,from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_YNUM_K_1_I))) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 2) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_YNUM_K_2_R),from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_YNUM_K_2_I))) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let ynum_k := (update_at ynum_k (@repr WORDSIZE32 3) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_YNUM_K_3_R),v_ZERO)) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let yden_k := (new_under_impl_41 (@repr WORDSIZE32 3)) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 0) (from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_YDEN_K_0_),from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_YDEN_K_0_))) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 1) (v_ZERO,from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_YDEN_K_1_I))) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let yden_k := (update_at yden_k (@repr WORDSIZE32 2) (from_literal_under_impl_63 (@repr WORDSIZE128 18),from_byte_seq_be_under_impl (to_be_bytes_under_impl_69 v_G2_YDEN_K_2_I))) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let xnum := (fp2zero) : (t_Fp_t × t_Fp_t) in
  let xx := (fp2fromfp v_ONE) : (t_Fp_t × t_Fp_t) in
  let '(xnum,xx) := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(len_under_impl_41 xnum_k))) (xnum,xx) (fun '(xnum,xx) i =>
      let xnum := (fp2add xnum (fp2mul xx (xnum_k.[i]))) : (t_Fp_t × t_Fp_t) in
      let xx := (fp2mul xx x) : (t_Fp_t × t_Fp_t) in
      (xnum,xx))) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let xden := (fp2zero) : (t_Fp_t × t_Fp_t) in
  let xx := (fp2fromfp v_ONE) : (t_Fp_t × t_Fp_t) in
  let '(xden,xx) := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(len_under_impl_41 xden_k))) (xden,xx) (fun '(xden,xx) i =>
      let xden := (fp2add xden (fp2mul xx (xden_k.[i]))) : (t_Fp_t × t_Fp_t) in
      let xx := (fp2mul xx x) : (t_Fp_t × t_Fp_t) in
      (xden,xx))) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let xden := (fp2add xden xx) : (t_Fp_t × t_Fp_t) in
  let ynum := (fp2zero) : (t_Fp_t × t_Fp_t) in
  let xx := (fp2fromfp v_ONE) : (t_Fp_t × t_Fp_t) in
  let '(xx,ynum) := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(len_under_impl_41 ynum_k))) (xx,ynum) (fun '(xx,ynum) i =>
      let ynum := (fp2add ynum (fp2mul xx (ynum_k.[i]))) : (t_Fp_t × t_Fp_t) in
      let xx := (fp2mul xx x) : (t_Fp_t × t_Fp_t) in
      (xx,ynum))) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let yden := (fp2zero) : (t_Fp_t × t_Fp_t) in
  let xx := (fp2fromfp v_ONE) : (t_Fp_t × t_Fp_t) in
  let '(xx,yden) := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(len_under_impl_41 yden_k))) (xx,yden) (fun '(xx,yden) i =>
      let yden := (fp2add yden (fp2mul xx (yden_k.[i]))) : (t_Fp_t × t_Fp_t) in
      let xx := (fp2mul xx x) : (t_Fp_t × t_Fp_t) in
      (xx,yden))) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let yden := (fp2add yden xx) : (t_Fp_t × t_Fp_t) in
  let xr := (fp2mul xnum (fp2inv xden)) : (t_Fp_t × t_Fp_t) in
  let yr := (fp2mul y (fp2mul ynum (fp2inv yden))) : (t_Fp_t × t_Fp_t) in
  let inf := (false) : bool in
  let inf := (if
      orb (xden=.?fp2zero) (yden=.?fp2zero)
    then
      let inf := (true) : bool in
      inf
    else
      inf) : bool in
  (xr,yr,inf).

Definition g2_map_to_curve_sswu (u : (t_Fp_t × t_Fp_t)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) :=
  let '(xp,yp) := (g2_simple_swu_iso u) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  g2_isogeny_map xp yp.

Definition g2_hash_to_curve_sswu (msg : t_Seq_t t_U8_t) (dst : t_Seq_t t_U8_t) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) :=
  let u := (fp2_hash_to_field msg dst (@repr WORDSIZE32 2)) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let q0 := (g2_map_to_curve_sswu (u.[(@repr WORDSIZE32 0)])) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let q1 := (g2_map_to_curve_sswu (u.[(@repr WORDSIZE32 1)])) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let r := (g2add q0 q1) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  g2_clear_cofactor r.

Definition g2_encode_to_curve_sswu (msg : t_Seq_t t_U8_t) (dst : t_Seq_t t_U8_t) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) :=
  let u := (fp2_hash_to_field msg dst (@repr WORDSIZE32 1)) : t_Seq_t (t_Fp_t × t_Fp_t) in
  let q := (g2_map_to_curve_sswu (u.[(@repr WORDSIZE32 0)])) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  g2_clear_cofactor q.
