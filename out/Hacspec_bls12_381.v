(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_lib.

Notation FpCanvas := (nseq int8 384).
Notation Fp_t := (nat_mod 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab).
Definition Fp : Fp_t -> Fp_t :=
  id.

Notation SerializedFp_t := (nseq int8 48).
Definition SerializedFp : SerializedFp_t -> SerializedFp_t :=
  id.

Notation ArrayFp_t := (nseq int64 6).
Definition ArrayFp : ArrayFp_t -> ArrayFp_t :=
  id.

Notation ScalarCanvas := (nseq int8 256).
Notation Scalar_t := (nat_mod 0x8000000000000000000000000000000000000000000000000000000000000000).
Definition Scalar : Scalar_t -> Scalar_t :=
  id.

Notation t_G1_t := ((t_Fp_t × t_Fp_t × bool)).

Notation t_Fp2_t := ((t_Fp_t × t_Fp_t)).

Notation t_G2_t := (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)).

Notation t_Fp6_t := (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))).

Notation t_Fp12_t := ((((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))).

Definition fp2fromfp (n : t_Fp_t) : (t_Fp_t × t_Fp_t) :=
  (n,v_ZERO).

Definition fp2zero : (t_Fp_t × t_Fp_t) :=
  fp2fromfp v_ZERO.

Definition fp2neg (n : (t_Fp_t × t_Fp_t)) : (t_Fp_t × t_Fp_t) :=
  let '(n1,n2) := (n) : (t_Fp_t × t_Fp_t) in
  (v_ZERO.-n1,v_ZERO.-n2).

Definition fp2add (n : (t_Fp_t × t_Fp_t)) (m : (t_Fp_t × t_Fp_t)) : (t_Fp_t × t_Fp_t) :=
  let '(n1,n2) := (n) : (t_Fp_t × t_Fp_t) in
  let '(m1,m2) := (m) : (t_Fp_t × t_Fp_t) in
  (n1.+m1,n2.+m2).

Definition fp2sub (n : (t_Fp_t × t_Fp_t)) (m : (t_Fp_t × t_Fp_t)) : (t_Fp_t × t_Fp_t) :=
  fp2add n (fp2neg m).

Definition fp2mul (n : (t_Fp_t × t_Fp_t)) (m : (t_Fp_t × t_Fp_t)) : (t_Fp_t × t_Fp_t) :=
  let '(n1,n2) := (n) : (t_Fp_t × t_Fp_t) in
  let '(m1,m2) := (m) : (t_Fp_t × t_Fp_t) in
  let x1 := ((n1.*m1).-(n2.*m2)) : _ in
  let x2 := ((n1.*m2).+(n2.*m1)) : _ in
  (x1,x2).

Definition fp2inv (n : (t_Fp_t × t_Fp_t)) : (t_Fp_t × t_Fp_t) :=
  let '(n1,n2) := (n) : (t_Fp_t × t_Fp_t) in
  let t0 := ((n1.*n1).+(n2.*n2)) : _ in
  let t1 := (inv_under_impl_57 t0) : t_Fp_t in
  let x1 := (n1.*t1) : _ in
  let x2 := (v_ZERO.-(n2.*t1)) : _ in
  (x1,x2).

Definition fp2conjugate (n : (t_Fp_t × t_Fp_t)) : (t_Fp_t × t_Fp_t) :=
  let '(n1,n2) := (n) : (t_Fp_t × t_Fp_t) in
  (n1,v_ZERO.-n2).

Definition fp6fromfp2 (n : (t_Fp_t × t_Fp_t)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) :=
  (n,fp2zero,fp2zero).

Definition fp6zero : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) :=
  fp6fromfp2 fp2zero.

Definition fp6neg (n : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) :=
  let '(n1,n2,n3) := (n) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  (fp2sub fp2zero n1,fp2sub fp2zero n2,fp2sub fp2zero n3).

Definition fp6add (n : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) (m : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) :=
  let '(n1,n2,n3) := (n) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let '(m1,m2,m3) := (m) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  (fp2add n1 m1,fp2add n2 m2,fp2add n3 m3).

Definition fp6sub (n : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) (m : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) :=
  fp6add n (fp6neg m).

Definition fp6mul (n : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) (m : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) :=
  let '(n1,n2,n3) := (n) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let '(m1,m2,m3) := (m) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let eps := ((v_ONE,v_ONE)) : (t_Fp_t × t_Fp_t) in
  let t1 := (fp2mul n1 m1) : (t_Fp_t × t_Fp_t) in
  let t2 := (fp2mul n2 m2) : (t_Fp_t × t_Fp_t) in
  let t3 := (fp2mul n3 m3) : (t_Fp_t × t_Fp_t) in
  let t4 := (fp2mul (fp2add n2 n3) (fp2add m2 m3)) : (t_Fp_t × t_Fp_t) in
  let t5 := (fp2sub (fp2sub t4 t2) t3) : (t_Fp_t × t_Fp_t) in
  let x := (fp2add (fp2mul t5 eps) t1) : (t_Fp_t × t_Fp_t) in
  let t4 := (fp2mul (fp2add n1 n2) (fp2add m1 m2)) : (t_Fp_t × t_Fp_t) in
  let t5 := (fp2sub (fp2sub t4 t1) t2) : (t_Fp_t × t_Fp_t) in
  let y := (fp2add t5 (fp2mul eps t3)) : (t_Fp_t × t_Fp_t) in
  let t4 := (fp2mul (fp2add n1 n3) (fp2add m1 m3)) : (t_Fp_t × t_Fp_t) in
  let t5 := (fp2sub (fp2sub t4 t1) t3) : (t_Fp_t × t_Fp_t) in
  let z := (fp2add t5 t2) : (t_Fp_t × t_Fp_t) in
  (x,y,z).

Definition fp6inv (n : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) :=
  let '(n1,n2,n3) := (n) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let eps := ((v_ONE,v_ONE)) : (t_Fp_t × t_Fp_t) in
  let t1 := (fp2mul n1 n1) : (t_Fp_t × t_Fp_t) in
  let t2 := (fp2mul n2 n2) : (t_Fp_t × t_Fp_t) in
  let t3 := (fp2mul n3 n3) : (t_Fp_t × t_Fp_t) in
  let t4 := (fp2mul n1 n2) : (t_Fp_t × t_Fp_t) in
  let t5 := (fp2mul n1 n3) : (t_Fp_t × t_Fp_t) in
  let t6 := (fp2mul n2 n3) : (t_Fp_t × t_Fp_t) in
  let x0 := (fp2sub t1 (fp2mul eps t6)) : (t_Fp_t × t_Fp_t) in
  let y0 := (fp2sub (fp2mul eps t3) t4) : (t_Fp_t × t_Fp_t) in
  let z0 := (fp2sub t2 t5) : (t_Fp_t × t_Fp_t) in
  let t0 := (fp2mul n1 x0) : (t_Fp_t × t_Fp_t) in
  let t0 := (fp2add t0 (fp2mul eps (fp2mul n3 y0))) : (t_Fp_t × t_Fp_t) in
  let t0 := (fp2add t0 (fp2mul eps (fp2mul n2 z0))) : (t_Fp_t × t_Fp_t) in
  let t0 := (fp2inv t0) : (t_Fp_t × t_Fp_t) in
  let x := (fp2mul x0 t0) : (t_Fp_t × t_Fp_t) in
  let y := (fp2mul y0 t0) : (t_Fp_t × t_Fp_t) in
  let z := (fp2mul z0 t0) : (t_Fp_t × t_Fp_t) in
  (x,y,z).

Definition fp12fromfp6 (n : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) :=
  (n,fp6zero).

Definition fp12neg (n : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) :=
  let '(n1,n2) := (n) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  (fp6sub fp6zero n1,fp6sub fp6zero n2).

Definition fp12add (n : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))) (m : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) :=
  let '(n1,n2) := (n) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let '(m1,m2) := (m) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  (fp6add n1 m1,fp6add n2 m2).

Definition fp12sub (n : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))) (m : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) :=
  fp12add n (fp12neg m).

Definition fp12mul (n : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))) (m : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) :=
  let '(n1,n2) := (n) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let '(m1,m2) := (m) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let gamma := ((fp2zero,fp2fromfp v_ONE,fp2zero)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let t1 := (fp6mul n1 m1) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let t2 := (fp6mul n2 m2) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let x := (fp6add t1 (fp6mul t2 gamma)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let y := (fp6mul (fp6add n1 n2) (fp6add m1 m2)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let y := (fp6sub (fp6sub y t1) t2) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  (x,y).

Definition fp12inv (n : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) :=
  let '(n1,n2) := (n) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let gamma := ((fp2zero,fp2fromfp v_ONE,fp2zero)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let t1 := (fp6mul n1 n1) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let t2 := (fp6mul n2 n2) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let t1 := (fp6sub t1 (fp6mul gamma t2)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let t2 := (fp6inv t1) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let x := (fp6mul n1 t2) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  let y := (fp6neg (fp6mul n2 t2)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) in
  (x,y).

Definition fp12exp (n : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))) (k : t_Scalar_t) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) :=
  let c := (fp12fromfp6 (fp6fromfp2 (fp2fromfp v_ONE))) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let c := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 256))) c (fun c i =>
      let c := (fp12mul c c) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
      if
        bit_under_impl_199 k ((@repr WORDSIZE32 255).-i)
      then
        let c := (fp12mul c n) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
        c
      else
        c)) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  c.

Definition fp12conjugate (n : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) :=
  let '(n1,n2) := (n) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  (n1,fp6neg n2).

Definition fp12zero : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) :=
  fp12fromfp6 fp6zero.

Definition g1add_a (p : (t_Fp_t × t_Fp_t × bool)) (q : (t_Fp_t × t_Fp_t × bool)) : (t_Fp_t × t_Fp_t × bool) :=
  let '(x1,y1,_) := (p) : (t_Fp_t × t_Fp_t × bool) in
  let '(x2,y2,_) := (q) : (t_Fp_t × t_Fp_t × bool) in
  let x_diff := (x2.-x1) : _ in
  let y_diff := (y2.-y1) : _ in
  let xovery := (y_diff.*(inv_under_impl_57 x_diff)) : _ in
  let x3 := (((exp xovery (@repr WORDSIZE32 2)).-x1).-x2) : _ in
  let y3 := ((xovery.*(x1.-x3)).-y1) : _ in
  (x3,y3,false).

Definition g1double_a (p : (t_Fp_t × t_Fp_t × bool)) : (t_Fp_t × t_Fp_t × bool) :=
  let '(x1,y1,_) := (p) : (t_Fp_t × t_Fp_t × bool) in
  let x12 := (exp x1 (@repr WORDSIZE32 2)) : t_Fp_t in
  let xovery := (((from_literal_under_impl_63 (@repr WORDSIZE128 3)).*x12).*(inv_under_impl_57 (v_TWO.*y1))) : _ in
  let x3 := ((exp xovery (@repr WORDSIZE32 2)).-(v_TWO.*x1)) : _ in
  let y3 := ((xovery.*(x1.-x3)).-y1) : _ in
  (x3,y3,false).

Definition g1double (p : (t_Fp_t × t_Fp_t × bool)) : (t_Fp_t × t_Fp_t × bool) :=
  let '(_x1,y1,inf1) := (p) : (t_Fp_t × t_Fp_t × bool) in
  if
    andb (y1<>v_ZERO) (not inf1)
  then
    g1double_a p
  else
    (v_ZERO,v_ZERO,true).

Definition g1add (p : (t_Fp_t × t_Fp_t × bool)) (q : (t_Fp_t × t_Fp_t × bool)) : (t_Fp_t × t_Fp_t × bool) :=
  let '(x1,y1,inf1) := (p) : (t_Fp_t × t_Fp_t × bool) in
  let '(x2,y2,inf2) := (q) : (t_Fp_t × t_Fp_t × bool) in
  if
    inf1
  then
    q
  else
    if
      inf2
    then
      p
    else
      if
        p=.?q
      then
        g1double p
      else
        if
          not (andb (x1=.?x2) (y1=.?(v_ZERO.-y2)))
        then
          g1add_a p q
        else
          (v_ZERO,v_ZERO,true).

Definition g1mul (m : t_Scalar_t) (p : (t_Fp_t × t_Fp_t × bool)) : (t_Fp_t × t_Fp_t × bool) :=
  let t := ((v_ZERO,v_ZERO,true)) : (t_Fp_t × t_Fp_t × bool) in
  let t := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 256))) t (fun t i =>
      let t := (g1double t) : (t_Fp_t × t_Fp_t × bool) in
      if
        bit_under_impl_199 m ((@repr WORDSIZE32 255).-i)
      then
        let t := (g1add t p) : (t_Fp_t × t_Fp_t × bool) in
        t
      else
        t)) : (t_Fp_t × t_Fp_t × bool) in
  t.

Definition g1neg (p : (t_Fp_t × t_Fp_t × bool)) : (t_Fp_t × t_Fp_t × bool) :=
  let '(x,y,inf) := (p) : (t_Fp_t × t_Fp_t × bool) in
  (x,v_ZERO.-y,inf).

Definition g2add_a (p : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)) (q : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) :=
  let '(x1,y1,_) := (p) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let '(x2,y2,_) := (q) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let x_diff := (fp2sub x2 x1) : (t_Fp_t × t_Fp_t) in
  let y_diff := (fp2sub y2 y1) : (t_Fp_t × t_Fp_t) in
  let xovery := (fp2mul y_diff (fp2inv x_diff)) : (t_Fp_t × t_Fp_t) in
  let t1 := (fp2mul xovery xovery) : (t_Fp_t × t_Fp_t) in
  let t2 := (fp2sub t1 x1) : (t_Fp_t × t_Fp_t) in
  let x3 := (fp2sub t2 x2) : (t_Fp_t × t_Fp_t) in
  let t1 := (fp2sub x1 x3) : (t_Fp_t × t_Fp_t) in
  let t2 := (fp2mul xovery t1) : (t_Fp_t × t_Fp_t) in
  let y3 := (fp2sub t2 y1) : (t_Fp_t × t_Fp_t) in
  (x3,y3,false).

Definition g2double_a (p : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) :=
  let '(x1,y1,_) := (p) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let x12 := (fp2mul x1 x1) : (t_Fp_t × t_Fp_t) in
  let t1 := (fp2mul (fp2fromfp (from_literal_under_impl_63 (@repr WORDSIZE128 3))) x12) : (t_Fp_t × t_Fp_t) in
  let t2 := (fp2inv (fp2mul (fp2fromfp v_TWO) y1)) : (t_Fp_t × t_Fp_t) in
  let xovery := (fp2mul t1 t2) : (t_Fp_t × t_Fp_t) in
  let t1 := (fp2mul xovery xovery) : (t_Fp_t × t_Fp_t) in
  let t2 := (fp2mul (fp2fromfp v_TWO) x1) : (t_Fp_t × t_Fp_t) in
  let x3 := (fp2sub t1 t2) : (t_Fp_t × t_Fp_t) in
  let t1 := (fp2sub x1 x3) : (t_Fp_t × t_Fp_t) in
  let t2 := (fp2mul xovery t1) : (t_Fp_t × t_Fp_t) in
  let y3 := (fp2sub t2 y1) : (t_Fp_t × t_Fp_t) in
  (x3,y3,false).

Definition g2double (p : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) :=
  let '(_x1,y1,inf1) := (p) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  if
    andb (y1<>fp2zero) (not inf1)
  then
    g2double_a p
  else
    (fp2zero,fp2zero,true).

Definition g2add (p : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)) (q : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) :=
  let '(x1,y1,inf1) := (p) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let '(x2,y2,inf2) := (q) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  if
    inf1
  then
    q
  else
    if
      inf2
    then
      p
    else
      if
        p=.?q
      then
        g2double p
      else
        if
          not (andb (x1=.?x2) (y1=.?(fp2neg y2)))
        then
          g2add_a p q
        else
          (fp2zero,fp2zero,true).

Definition g2mul (m : t_Scalar_t) (p : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) :=
  let t := ((fp2zero,fp2zero,true)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let t := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 256))) t (fun t i =>
      let t := (g2double t) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
      if
        bit_under_impl_199 m ((@repr WORDSIZE32 255).-i)
      then
        let t := (g2add t p) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
        t
      else
        t)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  t.

Definition g2neg (p : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) :=
  let '(x,y,inf) := (p) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  (x,fp2neg y,inf).

Definition twist (p : (t_Fp_t × t_Fp_t × bool)) : ((((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) × (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))) :=
  let '(p0,p1,_) := (p) : (t_Fp_t × t_Fp_t × bool) in
  let x := (((fp2zero,fp2fromfp p0,fp2zero),fp6zero)) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let y := ((fp6zero,(fp2zero,fp2fromfp p1,fp2zero))) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  (x,y).

Definition line_double_p (r : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)) (p : (t_Fp_t × t_Fp_t × bool)) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) :=
  let '(r0,r1,_) := (r) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let a := (fp2mul (fp2fromfp (from_literal_under_impl_63 (@repr WORDSIZE128 3))) (fp2mul r0 r0)) : (t_Fp_t × t_Fp_t) in
  let a := (fp2mul a (fp2inv (fp2mul (fp2fromfp v_TWO) r1))) : (t_Fp_t × t_Fp_t) in
  let b := (fp2sub r1 (fp2mul a r0)) : (t_Fp_t × t_Fp_t) in
  let a := (fp12fromfp6 (fp6fromfp2 a)) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let b := (fp12fromfp6 (fp6fromfp2 b)) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let '(x,y) := (twist p) : ((((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) × (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))) in
  fp12neg (fp12sub (fp12sub y (fp12mul a x)) b).

Definition line_add_p (r : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)) (q : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)) (p : (t_Fp_t × t_Fp_t × bool)) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) :=
  let '(r0,r1,_) := (r) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let '(q0,q1,_) := (q) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let a := (fp2mul (fp2sub q1 r1) (fp2inv (fp2sub q0 r0))) : (t_Fp_t × t_Fp_t) in
  let b := (fp2sub r1 (fp2mul a r0)) : (t_Fp_t × t_Fp_t) in
  let a := (fp12fromfp6 (fp6fromfp2 a)) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let b := (fp12fromfp6 (fp6fromfp2 b)) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let '(x,y) := (twist p) : ((((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) × (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))) in
  fp12neg (fp12sub (fp12sub y (fp12mul a x)) b).

Definition frobenius (f : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) :=
  let '((g0,g1,g2),(h0,h1,h2)) := (f) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t1 := (fp2conjugate g0) : (t_Fp_t × t_Fp_t) in
  let t2 := (fp2conjugate h0) : (t_Fp_t × t_Fp_t) in
  let t3 := (fp2conjugate g1) : (t_Fp_t × t_Fp_t) in
  let t4 := (fp2conjugate h1) : (t_Fp_t × t_Fp_t) in
  let t5 := (fp2conjugate g2) : (t_Fp_t × t_Fp_t) in
  let t6 := (fp2conjugate h2) : (t_Fp_t × t_Fp_t) in
  let c1 := (ArrayFp (array_from_list [U64 (@repr WORDSIZE64 10162220747404304312);
      U64 (@repr WORDSIZE64 17761815663483519293);
      U64 (@repr WORDSIZE64 8873291758750579140);
      U64 (@repr WORDSIZE64 1141103941765652303);
      U64 (@repr WORDSIZE64 13993175198059990303);
      U64 (@repr WORDSIZE64 1802798568193066599)])) : t_ArrayFp_t in
  let c1 := (to_le_bytes_under_impl_104 c1) : t_Seq_t t_U8_t in
  let c1 := (from_byte_seq_le_under_impl c1) : t_Fp_t in
  let c2 := (ArrayFp (array_from_list [U64 (@repr WORDSIZE64 3240210268673559283);
      U64 (@repr WORDSIZE64 2895069921743240898);
      U64 (@repr WORDSIZE64 17009126888523054175);
      U64 (@repr WORDSIZE64 6098234018649060207);
      U64 (@repr WORDSIZE64 9865672654120263608);
      U64 (@repr WORDSIZE64 71000049454473266)])) : t_ArrayFp_t in
  let c2 := (to_le_bytes_under_impl_104 c2) : t_Seq_t t_U8_t in
  let c2 := (from_byte_seq_le_under_impl c2) : t_Fp_t in
  let gamma11 := ((c1,c2)) : (t_Fp_t × t_Fp_t) in
  let gamma12 := (fp2mul gamma11 gamma11) : (t_Fp_t × t_Fp_t) in
  let gamma13 := (fp2mul gamma12 gamma11) : (t_Fp_t × t_Fp_t) in
  let gamma14 := (fp2mul gamma13 gamma11) : (t_Fp_t × t_Fp_t) in
  let gamma15 := (fp2mul gamma14 gamma11) : (t_Fp_t × t_Fp_t) in
  let t2 := (fp2mul t2 gamma11) : (t_Fp_t × t_Fp_t) in
  let t3 := (fp2mul t3 gamma12) : (t_Fp_t × t_Fp_t) in
  let t4 := (fp2mul t4 gamma13) : (t_Fp_t × t_Fp_t) in
  let t5 := (fp2mul t5 gamma14) : (t_Fp_t × t_Fp_t) in
  let t6 := (fp2mul t6 gamma15) : (t_Fp_t × t_Fp_t) in
  ((t1,t3,t5),(t2,t4,t6)).

Definition final_exponentiation (f : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)))) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) :=
  let fp6 := (fp12conjugate f) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let finv := (fp12inv f) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let fp6_1 := (fp12mul fp6 finv) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let fp8 := (frobenius (frobenius fp6_1)) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let f := (fp12mul fp8 fp6_1) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let u := (from_literal_under_impl_199 (@repr WORDSIZE128 15132376222941642752)) : t_Scalar_t in
  let u_half := (from_literal_under_impl_199 (@repr WORDSIZE128 7566188111470821376)) : t_Scalar_t in
  let t0 := (fp12mul f f) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t1 := (fp12exp t0 u) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t1 := (fp12conjugate t1) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t2 := (fp12exp t1 u_half) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t2 := (fp12conjugate t2) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t3 := (fp12conjugate f) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t1 := (fp12mul t3 t1) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t1 := (fp12conjugate t1) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t1 := (fp12mul t1 t2) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t2 := (fp12exp t1 u) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t2 := (fp12conjugate t2) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t3 := (fp12exp t2 u) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t3 := (fp12conjugate t3) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t1 := (fp12conjugate t1) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t3 := (fp12mul t1 t3) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t1 := (fp12conjugate t1) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t1 := (frobenius (frobenius (frobenius t1))) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t2 := (frobenius (frobenius t2)) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t1 := (fp12mul t1 t2) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t2 := (fp12exp t3 u) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t2 := (fp12conjugate t2) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t2 := (fp12mul t2 t0) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t2 := (fp12mul t2 f) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t1 := (fp12mul t1 t2) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let t2 := (frobenius t3) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  fp12mul t1 t2.

Definition pairing (p : (t_Fp_t × t_Fp_t × bool)) (q : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) :=
  let t := (from_literal_under_impl_199 (@repr WORDSIZE128 15132376222941642752)) : t_Scalar_t in
  let r := (q) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
  let f := (fp12fromfp6 (fp6fromfp2 (fp2fromfp v_ONE))) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
  let '(f,r) := (fold (into_iter (Build_Range (@repr WORDSIZE32 1)(@repr WORDSIZE32 64))) (f,r) (fun '(f,r) i =>
      let lrr := (line_double_p r p) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
      let r := (g2double r) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
      let f := (fp12mul (fp12mul f f) lrr) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
      if
        bit_under_impl_199 t (((@repr WORDSIZE32 64).-i).-(@repr WORDSIZE32 1))
      then
        let lrq := (line_add_p r q p) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
        let r := (g2add r q) : ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool) in
        let f := (fp12mul f lrq) : (((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) in
        (f,r)
      else
        (f,r))) : ((((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t)) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t))) × ((t_Fp_t × t_Fp_t) × (t_Fp_t × t_Fp_t) × bool)) in
  final_exponentiation (fp12conjugate f).
