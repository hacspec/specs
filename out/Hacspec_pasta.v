(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_lib.

Notation PallasCanvas := (nseq int8 255).
Notation FpPallas_t := (nat_mod 0x40000000000000000000000000000000224698FC094CF91B992D30ED00000001).
Definition FpPallas : FpPallas_t -> FpPallas_t :=
  id.

Notation VestaCanvas := (nseq int8 255).
Notation FpVesta_t := (nat_mod 0x40000000000000000000000000000000224698FC0994A8DD8C46EB2100000001).
Definition FpVesta : FpVesta_t -> FpVesta_t :=
  id.

Notation t_G1_pallas_t := ((t_FpPallas_t × t_FpPallas_t × bool)).

Notation t_G1_vesta_t := ((t_FpVesta_t × t_FpVesta_t × bool)).

Definition g1_default_pallas : (t_FpPallas_t × t_FpPallas_t × bool) :=
  (v_ZERO,v_ZERO,true).

Definition g1_default_vesta : (t_FpVesta_t × t_FpVesta_t × bool) :=
  (v_ZERO,v_ZERO,true).

Definition g1add_a_pallas (p : (t_FpPallas_t × t_FpPallas_t × bool)) (q : (t_FpPallas_t × t_FpPallas_t × bool)) : (t_FpPallas_t × t_FpPallas_t × bool) :=
  let '(x1,y1,_) := (p) : (t_FpPallas_t × t_FpPallas_t × bool) in
  let '(x2,y2,_) := (q) : (t_FpPallas_t × t_FpPallas_t × bool) in
  let x_diff := (x2.-x1) : _ in
  let y_diff := (y2.-y1) : _ in
  let xovery := (y_diff.*(inv_under_impl_57 x_diff)) : _ in
  let x3 := (((exp xovery (@repr WORDSIZE32 2)).-x1).-x2) : _ in
  let y3 := ((xovery.*(x1.-x3)).-y1) : _ in
  (x3,y3,false).

Definition g1add_a_vesta (p : (t_FpVesta_t × t_FpVesta_t × bool)) (q : (t_FpVesta_t × t_FpVesta_t × bool)) : (t_FpVesta_t × t_FpVesta_t × bool) :=
  let '(x1,y1,_) := (p) : (t_FpVesta_t × t_FpVesta_t × bool) in
  let '(x2,y2,_) := (q) : (t_FpVesta_t × t_FpVesta_t × bool) in
  let x_diff := (x2.-x1) : _ in
  let y_diff := (y2.-y1) : _ in
  let xovery := (y_diff.*(inv_under_impl_124 x_diff)) : _ in
  let x3 := (((exp xovery (@repr WORDSIZE32 2)).-x1).-x2) : _ in
  let y3 := ((xovery.*(x1.-x3)).-y1) : _ in
  (x3,y3,false).

Definition g1double_a_pallas (p : (t_FpPallas_t × t_FpPallas_t × bool)) : (t_FpPallas_t × t_FpPallas_t × bool) :=
  let '(x1,y1,_) := (p) : (t_FpPallas_t × t_FpPallas_t × bool) in
  let x12 := (exp x1 (@repr WORDSIZE32 2)) : t_FpPallas_t in
  let xovery := (((from_literal_under_impl_63 (@repr WORDSIZE128 3)).*x12).*(inv_under_impl_57 (v_TWO.*y1))) : _ in
  let x3 := ((exp xovery (@repr WORDSIZE32 2)).-(v_TWO.*x1)) : _ in
  let y3 := ((xovery.*(x1.-x3)).-y1) : _ in
  (x3,y3,false).

Definition g1double_a_vesta (p : (t_FpVesta_t × t_FpVesta_t × bool)) : (t_FpVesta_t × t_FpVesta_t × bool) :=
  let '(x1,y1,_) := (p) : (t_FpVesta_t × t_FpVesta_t × bool) in
  let x12 := (exp x1 (@repr WORDSIZE32 2)) : t_FpVesta_t in
  let xovery := (((from_literal_under_impl_130 (@repr WORDSIZE128 3)).*x12).*(inv_under_impl_124 (v_TWO.*y1))) : _ in
  let x3 := ((exp xovery (@repr WORDSIZE32 2)).-(v_TWO.*x1)) : _ in
  let y3 := ((xovery.*(x1.-x3)).-y1) : _ in
  (x3,y3,false).

Definition g1double_pallas (p : (t_FpPallas_t × t_FpPallas_t × bool)) : (t_FpPallas_t × t_FpPallas_t × bool) :=
  let '(_x1,y1,inf1) := (p) : (t_FpPallas_t × t_FpPallas_t × bool) in
  if
    andb (y1<>v_ZERO) (not inf1)
  then
    g1double_a_pallas p
  else
    (v_ZERO,v_ZERO,true).

Definition g1double_vesta (p : (t_FpVesta_t × t_FpVesta_t × bool)) : (t_FpVesta_t × t_FpVesta_t × bool) :=
  let '(_x1,y1,inf1) := (p) : (t_FpVesta_t × t_FpVesta_t × bool) in
  if
    andb (y1<>v_ZERO) (not inf1)
  then
    g1double_a_vesta p
  else
    (v_ZERO,v_ZERO,true).

Definition g1add_pallas (p : (t_FpPallas_t × t_FpPallas_t × bool)) (q : (t_FpPallas_t × t_FpPallas_t × bool)) : (t_FpPallas_t × t_FpPallas_t × bool) :=
  let '(x1,y1,inf1) := (p) : (t_FpPallas_t × t_FpPallas_t × bool) in
  let '(x2,y2,inf2) := (q) : (t_FpPallas_t × t_FpPallas_t × bool) in
  if
    inf1
  then
    q
  else
    if
      inf2
    then
      p
    else
      if
        p=.?q
      then
        g1double_pallas p
      else
        if
          not (andb (x1=.?x2) (y1=.?(v_ZERO.-y2)))
        then
          g1add_a_pallas p q
        else
          (v_ZERO,v_ZERO,true).

Definition g1add_vesta (p : (t_FpVesta_t × t_FpVesta_t × bool)) (q : (t_FpVesta_t × t_FpVesta_t × bool)) : (t_FpVesta_t × t_FpVesta_t × bool) :=
  let '(x1,y1,inf1) := (p) : (t_FpVesta_t × t_FpVesta_t × bool) in
  let '(x2,y2,inf2) := (q) : (t_FpVesta_t × t_FpVesta_t × bool) in
  if
    inf1
  then
    q
  else
    if
      inf2
    then
      p
    else
      if
        p=.?q
      then
        g1double_vesta p
      else
        if
          not (andb (x1=.?x2) (y1=.?(v_ZERO.-y2)))
        then
          g1add_a_vesta p q
        else
          (v_ZERO,v_ZERO,true).

Definition g1mul_pallas (m : t_FpVesta_t) (p : (t_FpPallas_t × t_FpPallas_t × bool)) : (t_FpPallas_t × t_FpPallas_t × bool) :=
  let t := ((v_ZERO,v_ZERO,true)) : (t_FpPallas_t × t_FpPallas_t × bool) in
  let t := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 255))) t (fun t i =>
      let t := (g1double_pallas t) : (t_FpPallas_t × t_FpPallas_t × bool) in
      if
        bit_under_impl_130 m ((@repr WORDSIZE32 254).-i)
      then
        let t := (g1add_pallas t p) : (t_FpPallas_t × t_FpPallas_t × bool) in
        t
      else
        t)) : (t_FpPallas_t × t_FpPallas_t × bool) in
  t.

Definition g1mul_vesta (m : t_FpPallas_t) (p : (t_FpVesta_t × t_FpVesta_t × bool)) : (t_FpVesta_t × t_FpVesta_t × bool) :=
  let t := ((v_ZERO,v_ZERO,true)) : (t_FpVesta_t × t_FpVesta_t × bool) in
  let t := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 255))) t (fun t i =>
      let t := (g1double_vesta t) : (t_FpVesta_t × t_FpVesta_t × bool) in
      if
        bit_under_impl_63 m ((@repr WORDSIZE32 254).-i)
      then
        let t := (g1add_vesta t p) : (t_FpVesta_t × t_FpVesta_t × bool) in
        t
      else
        t)) : (t_FpVesta_t × t_FpVesta_t × bool) in
  t.

Definition g1neg_pallas (p : (t_FpPallas_t × t_FpPallas_t × bool)) : (t_FpPallas_t × t_FpPallas_t × bool) :=
  let '(x,y,inf) := (p) : (t_FpPallas_t × t_FpPallas_t × bool) in
  (x,v_ZERO.-y,inf).

Definition g1neg_vesta (p : (t_FpVesta_t × t_FpVesta_t × bool)) : (t_FpVesta_t × t_FpVesta_t × bool) :=
  let '(x,y,inf) := (p) : (t_FpVesta_t × t_FpVesta_t × bool) in
  (x,v_ZERO.-y,inf).

Definition g1_on_curve_pallas (p : (t_FpPallas_t × t_FpPallas_t × bool)) : bool :=
  let '(x,y,inf) := (p) : (t_FpPallas_t × t_FpPallas_t × bool) in
  let y_squared := (y.*y) : _ in
  let x_cubed := ((x.*x).*x) : _ in
  let fp5 := ((v_TWO.+v_TWO).+v_ONE) : _ in
  orb (y_squared=.?(x_cubed.+fp5)) inf.

Definition g1_on_curve_vesta (p : (t_FpVesta_t × t_FpVesta_t × bool)) : bool :=
  let '(x,y,inf) := (p) : (t_FpVesta_t × t_FpVesta_t × bool) in
  let y_squared := (y.*y) : _ in
  let x_cubed := ((x.*x).*x) : _ in
  let fp5 := ((v_TWO.+v_TWO).+v_ONE) : _ in
  orb (y_squared=.?(x_cubed.+fp5)) inf.

Definition g1_is_identity_pallas (p : (t_FpPallas_t × t_FpPallas_t × bool)) : bool :=
  let '(_,_,inf) := (p) : (t_FpPallas_t × t_FpPallas_t × bool) in
  inf.

Definition g1_is_identity_vesta (p : (t_FpVesta_t × t_FpVesta_t × bool)) : bool :=
  let '(_,_,inf) := (p) : (t_FpVesta_t × t_FpVesta_t × bool) in
  inf.
