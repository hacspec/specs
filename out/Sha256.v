(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Std. (* as TryInto *)

Definition v_BLOCK_SIZE : uint_size :=
  (@repr WORDSIZE32 64).

Definition v_LEN_SIZE : uint_size :=
  (@repr WORDSIZE32 8).

Definition v_K_SIZE : uint_size :=
  (@repr WORDSIZE32 64).

Definition v_HASH_SIZE : uint_size :=
  (@repr WORDSIZE32 256)./(@repr WORDSIZE32 8).

Notation t_Block_t := (nseq int8 TODO: Int.to_string length).

Notation t_OpTableType_t := (nseq int8 TODO: Int.to_string length).

Notation t_Sha256Digest_t := (nseq int8 TODO: Int.to_string length).

Notation t_RoundConstantsTable_t := (nseq int32 TODO: Int.to_string length).

Notation t_Hash_t := (nseq int32 TODO: Int.to_string length).

Definition ch (x : int32) (y : int32) (z : int32) : int32 :=
  (x.&y).^((not x).&z).

Definition maj (x : int32) (y : int32) (z : int32) : int32 :=
  (x.&y).^((x.&z).^(y.&z)).

Definition v_OP_TABLE : nseq int8 TODO: Int.to_string length :=
  array_from_list [(@repr WORDSIZE8 2);
    (@repr WORDSIZE8 13);
    (@repr WORDSIZE8 22);
    (@repr WORDSIZE8 6);
    (@repr WORDSIZE8 11);
    (@repr WORDSIZE8 25);
    (@repr WORDSIZE8 7);
    (@repr WORDSIZE8 18);
    (@repr WORDSIZE8 3);
    (@repr WORDSIZE8 17);
    (@repr WORDSIZE8 19);
    (@repr WORDSIZE8 10)].

Definition v_K_TABLE : nseq int32 TODO: Int.to_string length :=
  array_from_list [(@repr WORDSIZE32 1116352408);
    (@repr WORDSIZE32 1899447441);
    (@repr WORDSIZE32 3049323471);
    (@repr WORDSIZE32 3921009573);
    (@repr WORDSIZE32 961987163);
    (@repr WORDSIZE32 1508970993);
    (@repr WORDSIZE32 2453635748);
    (@repr WORDSIZE32 2870763221);
    (@repr WORDSIZE32 3624381080);
    (@repr WORDSIZE32 310598401);
    (@repr WORDSIZE32 607225278);
    (@repr WORDSIZE32 1426881987);
    (@repr WORDSIZE32 1925078388);
    (@repr WORDSIZE32 2162078206);
    (@repr WORDSIZE32 2614888103);
    (@repr WORDSIZE32 3248222580);
    (@repr WORDSIZE32 3835390401);
    (@repr WORDSIZE32 4022224774);
    (@repr WORDSIZE32 264347078);
    (@repr WORDSIZE32 604807628);
    (@repr WORDSIZE32 770255983);
    (@repr WORDSIZE32 1249150122);
    (@repr WORDSIZE32 1555081692);
    (@repr WORDSIZE32 1996064986);
    (@repr WORDSIZE32 2554220882);
    (@repr WORDSIZE32 2821834349);
    (@repr WORDSIZE32 2952996808);
    (@repr WORDSIZE32 3210313671);
    (@repr WORDSIZE32 3336571891);
    (@repr WORDSIZE32 3584528711);
    (@repr WORDSIZE32 113926993);
    (@repr WORDSIZE32 338241895);
    (@repr WORDSIZE32 666307205);
    (@repr WORDSIZE32 773529912);
    (@repr WORDSIZE32 1294757372);
    (@repr WORDSIZE32 1396182291);
    (@repr WORDSIZE32 1695183700);
    (@repr WORDSIZE32 1986661051);
    (@repr WORDSIZE32 2177026350);
    (@repr WORDSIZE32 2456956037);
    (@repr WORDSIZE32 2730485921);
    (@repr WORDSIZE32 2820302411);
    (@repr WORDSIZE32 3259730800);
    (@repr WORDSIZE32 3345764771);
    (@repr WORDSIZE32 3516065817);
    (@repr WORDSIZE32 3600352804);
    (@repr WORDSIZE32 4094571909);
    (@repr WORDSIZE32 275423344);
    (@repr WORDSIZE32 430227734);
    (@repr WORDSIZE32 506948616);
    (@repr WORDSIZE32 659060556);
    (@repr WORDSIZE32 883997877);
    (@repr WORDSIZE32 958139571);
    (@repr WORDSIZE32 1322822218);
    (@repr WORDSIZE32 1537002063);
    (@repr WORDSIZE32 1747873779);
    (@repr WORDSIZE32 1955562222);
    (@repr WORDSIZE32 2024104815);
    (@repr WORDSIZE32 2227730452);
    (@repr WORDSIZE32 2361852424);
    (@repr WORDSIZE32 2428436474);
    (@repr WORDSIZE32 2756734187);
    (@repr WORDSIZE32 3204031479);
    (@repr WORDSIZE32 3329325298)].

Definition v_HASH_INIT : nseq int32 TODO: Int.to_string length :=
  array_from_list [(@repr WORDSIZE32 1779033703);
    (@repr WORDSIZE32 3144134277);
    (@repr WORDSIZE32 1013904242);
    (@repr WORDSIZE32 2773480762);
    (@repr WORDSIZE32 1359893119);
    (@repr WORDSIZE32 2600822924);
    (@repr WORDSIZE32 528734635);
    (@repr WORDSIZE32 1541459225)].

Definition sigma (x : int32) (i : uint_size) (op : uint_size) : int32 :=
  let tmp := (rotate_right_under_impl_8 x (into (v_OP_TABLE.[(((@repr WORDSIZE32 3).*i).+(@repr WORDSIZE32 2))]))) : int32 in
  let tmp := (if
      op=.?(@repr WORDSIZE32 0)
    then
      x shift_right (v_OP_TABLE.[(((@repr WORDSIZE32 3).*i).+(@repr WORDSIZE32 2))])
    else
      tmp) : int32 in
  let rot_val_1 := (into (v_OP_TABLE.[((@repr WORDSIZE32 3).*i)])) : int32 in
  let rot_val_2 := (into (v_OP_TABLE.[(((@repr WORDSIZE32 3).*i).+(@repr WORDSIZE32 1))])) : int32 in
  ((rotate_right_under_impl_8 x rot_val_1).^(rotate_right_under_impl_8 x rot_val_2)).^tmp.

Definition to_be_u32s (block : nseq int8 TODO: Int.to_string length) : t_Vec_t (int32) (t_Global_t) :=
  let out := (with_capacity_under_impl (v_BLOCK_SIZE./(@repr WORDSIZE32 4))) : t_Vec_t (int32) (t_Global_t) in
  let out := (fold (into_iter (chunks_under_impl (unsize block) (@repr WORDSIZE32 4))) out (fun out block_chunk =>
      let block_chunk_array := (from_be_bytes_under_impl_8 (unwrap_under_impl (try_into block_chunk))) : int32 in
      let out := (push_under_impl_1 out block_chunk_array) : t_Vec_t (int32) (t_Global_t) in
      out)) : t_Vec_t (int32) (t_Global_t) in
  out.

Definition schedule (block : nseq int8 TODO: Int.to_string length) : nseq int32 TODO: Int.to_string length :=
  let b := (to_be_u32s block) : t_Vec_t (int32) (t_Global_t) in
  let s := (repeat (@repr WORDSIZE32 0) (@repr WORDSIZE32 64)) : nseq int32 TODO: Int.to_string length in
  let s := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)v_K_SIZE)) s (fun s i =>
      if
        i<.?(@repr WORDSIZE32 16)
      then
        let s := (update_at s i (b.[i])) : nseq int32 TODO: Int.to_string length in
        s
      else
        let t16 := (s.[(i.-(@repr WORDSIZE32 16))]) : int32 in
        let t15 := (s.[(i.-(@repr WORDSIZE32 15))]) : int32 in
        let t7 := (s.[(i.-(@repr WORDSIZE32 7))]) : int32 in
        let t2 := (s.[(i.-(@repr WORDSIZE32 2))]) : int32 in
        let s1 := (sigma t2 (@repr WORDSIZE32 3) (@repr WORDSIZE32 0)) : int32 in
        let s0 := (sigma t15 (@repr WORDSIZE32 2) (@repr WORDSIZE32 0)) : int32 in
        let s := (update_at s i (wrapping_add_under_impl_8 (wrapping_add_under_impl_8 (wrapping_add_under_impl_8 s1 t7) s0) t16)) : nseq int32 TODO: Int.to_string length in
        s)) : nseq int32 TODO: Int.to_string length in
  s.

Definition shuffle (ws : nseq int32 TODO: Int.to_string length) (hashi : nseq int32 TODO: Int.to_string length) : nseq int32 TODO: Int.to_string length :=
  let h := (hashi) : nseq int32 TODO: Int.to_string length in
  let h := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)v_K_SIZE)) h (fun h i =>
      let a0 := (h.[(@repr WORDSIZE32 0)]) : int32 in
      let b0 := (h.[(@repr WORDSIZE32 1)]) : int32 in
      let c0 := (h.[(@repr WORDSIZE32 2)]) : int32 in
      let d0 := (h.[(@repr WORDSIZE32 3)]) : int32 in
      let e0 := (h.[(@repr WORDSIZE32 4)]) : int32 in
      let f0 := (h.[(@repr WORDSIZE32 5)]) : int32 in
      let g0 := (h.[(@repr WORDSIZE32 6)]) : int32 in
      let h0 := (h.[(@repr WORDSIZE32 7)]) : int32 in
      let t1 := (wrapping_add_under_impl_8 (wrapping_add_under_impl_8 (wrapping_add_under_impl_8 (wrapping_add_under_impl_8 h0 (sigma e0 (@repr WORDSIZE32 1) (@repr WORDSIZE32 1))) (ch e0 f0 g0)) (v_K_TABLE.[i])) (ws.[i])) : int32 in
      let t2 := (wrapping_add_under_impl_8 (sigma a0 (@repr WORDSIZE32 0) (@repr WORDSIZE32 1)) (maj a0 b0 c0)) : int32 in
      let h := (update_at h (@repr WORDSIZE32 0) (wrapping_add_under_impl_8 t1 t2)) : nseq int32 TODO: Int.to_string length in
      let h := (update_at h (@repr WORDSIZE32 1) a0) : nseq int32 TODO: Int.to_string length in
      let h := (update_at h (@repr WORDSIZE32 2) b0) : nseq int32 TODO: Int.to_string length in
      let h := (update_at h (@repr WORDSIZE32 3) c0) : nseq int32 TODO: Int.to_string length in
      let h := (update_at h (@repr WORDSIZE32 4) (wrapping_add_under_impl_8 d0 t1)) : nseq int32 TODO: Int.to_string length in
      let h := (update_at h (@repr WORDSIZE32 5) e0) : nseq int32 TODO: Int.to_string length in
      let h := (update_at h (@repr WORDSIZE32 6) f0) : nseq int32 TODO: Int.to_string length in
      let h := (update_at h (@repr WORDSIZE32 7) g0) : nseq int32 TODO: Int.to_string length in
      h)) : nseq int32 TODO: Int.to_string length in
  h.

Definition compress (block : nseq int8 TODO: Int.to_string length) (h_in : nseq int32 TODO: Int.to_string length) : nseq int32 TODO: Int.to_string length :=
  let s := (schedule block) : nseq int32 TODO: Int.to_string length in
  let h := (shuffle s h_in) : nseq int32 TODO: Int.to_string length in
  let h := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 8))) h (fun h i =>
      update_at h i (wrapping_add_under_impl_8 (h.[i]) (h_in.[i])))) : nseq int32 TODO: Int.to_string length in
  h.

Definition u32s_to_be_bytes (state : nseq int32 TODO: Int.to_string length) : nseq int8 TODO: Int.to_string length :=
  let out := (repeat (@repr WORDSIZE8 0) (@repr WORDSIZE32 32)) : nseq int8 TODO: Int.to_string length in
  let out := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)v_LEN_SIZE)) out (fun out i =>
      let tmp := (state.[i]) : int32 in
      let tmp := (to_be_bytes_under_impl_8 tmp) : nseq int8 TODO: Int.to_string length in
      fold (into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 4))) out (fun out j =>
        update_at out ((i.*(@repr WORDSIZE32 4)).+j) (tmp.[j])))) : nseq int8 TODO: Int.to_string length in
  out.

Definition hash (msg : seq int8) : nseq int8 TODO: Int.to_string length :=
  let h := (v_HASH_INIT) : nseq int32 TODO: Int.to_string length in
  let last_block := (repeat (@repr WORDSIZE8 0) (@repr WORDSIZE32 64)) : nseq int8 TODO: Int.to_string length in
  let last_block_len := ((@repr WORDSIZE32 0)) : uint_size in
  let '(h,last_block,last_block_len) := (fold (into_iter (chunks_under_impl msg v_BLOCK_SIZE)) (h,last_block,last_block_len) (fun '(h,last_block,last_block_len) block =>
      if
        (len_under_impl block)<.?v_BLOCK_SIZE
      then
        let last_block := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(len_under_impl block))) last_block (fun last_block i =>
            update_at last_block i (block.[i]))) : nseq int8 TODO: Int.to_string length in
        let last_block_len := (len_under_impl block) : uint_size in
        (h,last_block,last_block_len)
      else
        let h := (compress (unwrap_under_impl (try_into block)) h) : nseq int32 TODO: Int.to_string length in
        (h,last_block,last_block_len))) : (nseq int32 TODO: Int.to_string length × nseq int8 TODO: Int.to_string length × uint_size) in
  let last_block := (update_at last_block last_block_len (@repr WORDSIZE8 128)) : nseq int8 TODO: Int.to_string length in
  let len_bist := (cast ((len_under_impl msg).*(@repr WORDSIZE32 8))) : int64 in
  let len_bist_bytes := (to_be_bytes_under_impl_9 len_bist) : nseq int8 TODO: Int.to_string length in
  let '(h,last_block) := (if
      last_block_len<.?(v_BLOCK_SIZE.-v_LEN_SIZE)
    then
      let last_block := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)v_LEN_SIZE)) last_block (fun last_block i =>
          update_at last_block ((v_BLOCK_SIZE.-v_LEN_SIZE).+i) (len_bist_bytes.[i]))) : nseq int8 TODO: Int.to_string length in
      let h := (compress last_block h) : nseq int32 TODO: Int.to_string length in
      (h,last_block)
    else
      let pad_block := (repeat (@repr WORDSIZE8 0) (@repr WORDSIZE32 64)) : nseq int8 TODO: Int.to_string length in
      let pad_block := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)v_LEN_SIZE)) pad_block (fun pad_block i =>
          update_at pad_block ((v_BLOCK_SIZE.-v_LEN_SIZE).+i) (len_bist_bytes.[i]))) : nseq int8 TODO: Int.to_string length in
      let h := (compress last_block h) : nseq int32 TODO: Int.to_string length in
      let h := (compress pad_block h) : nseq int32 TODO: Int.to_string length in
      (h,last_block)) : (nseq int32 TODO: Int.to_string length × nseq int8 TODO: Int.to_string length) in
  u32s_to_be_bytes h.

Definition sha256 (msg : seq int8) : nseq int8 TODO: Int.to_string length :=
  hash msg.
