(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_lib.

Definition v_BLOCKSIZE : uint_size :=
  (@repr WORDSIZE32 16).

Notation Gf128Block_t := (nseq int8 BLOCKSIZE).
Definition Gf128Block : Gf128Block_t -> Gf128Block_t :=
  id.

Notation Gf128Key_t := (nseq int8 BLOCKSIZE).
Definition Gf128Key : Gf128Key_t -> Gf128Key_t :=
  id.

Notation Gf128Tag_t := (nseq int8 BLOCKSIZE).
Definition Gf128Tag : Gf128Tag_t -> Gf128Tag_t :=
  id.

Notation t_Element_t := (t_U128_t).

Definition v_IRRED : t_U128_t :=
  U128 (@repr WORDSIZE128 299076299051606071403356588563077529600).

Definition fadd (x : t_U128_t) (y : t_U128_t) : _ :=
  x.^y.

Definition fmul (x : t_U128_t) (y : t_U128_t) : t_U128_t :=
  let res := (U128 (@repr WORDSIZE128 0)) : t_U128_t in
  let sh := (x) : t_U128_t in
  let '(res,sh) := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 128))) (res,sh) (fun '(res,sh) i =>
      let res := (if
          (declassify_under_impl_126 (y.&((U128 (@repr WORDSIZE128 1)) shift_left ((@repr WORDSIZE32 127).-i))))<>(declassify_under_impl_126 (U128 (@repr WORDSIZE128 0)))
        then
          let res := (res.^sh) : _ in
          res
        else
          res) : _ in
      if
        (declassify_under_impl_126 (sh.&(U128 (@repr WORDSIZE128 1))))<>(declassify_under_impl_126 (U128 (@repr WORDSIZE128 0)))
      then
        let sh := ((sh shift_right (@repr WORDSIZE32 1)).^v_IRRED) : _ in
        (res,sh)
      else
        let sh := (sh shift_right (@repr WORDSIZE32 1)) : _ in
        (res,sh))) : (_ Ã— _) in
  res.

Definition encode (block : t_Gf128Block_t) : t_U128_t :=
  v_U128_from_be_bytes (from_seq_under_impl_123 block).

Definition decode (e : t_U128_t) : t_Gf128Block_t :=
  from_seq_under_impl_18 (v_U128_to_be_bytes e).

Definition update (r : t_U128_t) (block : t_Gf128Block_t) (acc : t_U128_t) : t_U128_t :=
  fmul (fadd (encode block) acc) r.

Definition poly (msg : t_Seq_t t_U8_t) (r : t_U128_t) : t_U128_t :=
  let l := (len_under_impl_41 msg) : uint_size in
  let n_blocks := (l./v_BLOCKSIZE) : uint_size in
  let rem := (l.%v_BLOCKSIZE) : uint_size in
  let acc := (U128 (@repr WORDSIZE128 0)) : t_U128_t in
  let acc := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)n_blocks)) acc (fun acc i =>
      let k := (i.*v_BLOCKSIZE) : uint_size in
      let block := (new_under_impl_5) : t_Gf128Block_t in
      let block := (update_start block (slice_range_under_impl_41 msg (Build_Range k(k.+v_BLOCKSIZE)))) : t_Gf128Block_t in
      let acc := (update r block acc) : t_U128_t in
      acc)) : t_U128_t in
  let acc := (if
      rem<>(@repr WORDSIZE32 0)
    then
      let k := (n_blocks.*v_BLOCKSIZE) : uint_size in
      let last_block := (new_under_impl_5) : t_Gf128Block_t in
      let last_block := (update_slice last_block (@repr WORDSIZE32 0) msg k rem) : t_Gf128Block_t in
      let acc := (update r last_block acc) : t_U128_t in
      acc
    else
      acc) : t_U128_t in
  acc.

Definition gmac (text : t_Seq_t t_U8_t) (k : t_Gf128Key_t) : t_Gf128Tag_t :=
  let s := (new_under_impl_5) : t_Gf128Block_t in
  let r := (encode (from_seq_under_impl_18 k)) : t_U128_t in
  let a := (poly text r) : t_U128_t in
  from_seq_under_impl_88 (decode (fadd a (encode s))).
