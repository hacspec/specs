(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_lib.

Require Import Hacspec_chacha20.

Require Import Hacspec_poly1305.

Inductive t_Error : Type :=
| Error_InvalidTagt_Error.

Notation t_ChaChaPolyKey_t := (t_ChaChaKey_t).

Notation t_ChaChaPolyIV_t := (t_ChaChaIV_t).

Notation t_ByteSeqResult_t := (t_Result_t (t_Seq_t t_U8_t) (t_Error_t)).

Definition init (key : t_ChaChaKey_t) (iv : t_ChaChaIV_t) : (t_FieldElement_t × t_FieldElement_t × t_PolyKey_t) :=
  let key_block0 := (chacha20_key_block0 key iv) : t_Block_t in
  let poly_key := (from_slice_under_impl_6 key_block0 (@repr WORDSIZE32 0) (@repr WORDSIZE32 32)) : t_PolyKey_t in
  poly1305_init poly_key.

Definition poly1305_update_padded (m : t_Seq_t t_U8_t) (st : (t_FieldElement_t × t_FieldElement_t × t_PolyKey_t)) : (t_FieldElement_t × t_FieldElement_t × t_PolyKey_t) :=
  let st := (poly1305_update_blocks m st) : (t_FieldElement_t × t_FieldElement_t × t_PolyKey_t) in
  let last := (get_remainder_chunk_under_impl_41 m (@repr WORDSIZE32 16)) : t_Seq_t t_U8_t in
  poly1305_update_last (@repr WORDSIZE32 16) last st.

Definition finish (aad_len : uint_size) (cipher_len : uint_size) (st : (t_FieldElement_t × t_FieldElement_t × t_PolyKey_t)) : t_Poly1305Tag_t :=
  let last_block := (new_under_impl_40) : t_PolyBlock_t in
  let last_block := (update last_block (@repr WORDSIZE32 0) (v_U64_to_le_bytes (U64 (cast aad_len)))) : t_PolyBlock_t in
  let last_block := (update last_block (@repr WORDSIZE32 8) (v_U64_to_le_bytes (U64 (cast cipher_len)))) : t_PolyBlock_t in
  let st := (poly1305_update_block last_block st) : (t_FieldElement_t × t_FieldElement_t × t_PolyKey_t) in
  poly1305_finish st.

Definition chacha20_poly1305_encrypt (key : t_ChaChaKey_t) (iv : t_ChaChaIV_t) (aad : t_Seq_t t_U8_t) (msg : t_Seq_t t_U8_t) : (t_Seq_t t_U8_t × t_Poly1305Tag_t) :=
  let cipher_text := (chacha20 key iv (@repr WORDSIZE32 1) msg) : t_Seq_t t_U8_t in
  let poly_st := (init key iv) : (t_FieldElement_t × t_FieldElement_t × t_PolyKey_t) in
  let poly_st := (poly1305_update_padded aad poly_st) : (t_FieldElement_t × t_FieldElement_t × t_PolyKey_t) in
  let poly_st := (poly1305_update_padded cipher_text poly_st) : (t_FieldElement_t × t_FieldElement_t × t_PolyKey_t) in
  let tag := (finish (len_under_impl_41 aad) (len_under_impl_41 cipher_text) poly_st) : t_Poly1305Tag_t in
  (cipher_text,tag).

Definition chacha20_poly1305_decrypt (key : t_ChaChaKey_t) (iv : t_ChaChaIV_t) (aad : t_Seq_t t_U8_t) (cipher_text : t_Seq_t t_U8_t) (tag : t_Poly1305Tag_t) : t_Result_t (t_Seq_t t_U8_t) (t_Error_t) :=
  let poly_st := (init key iv) : (t_FieldElement_t × t_FieldElement_t × t_PolyKey_t) in
  let poly_st := (poly1305_update_padded aad poly_st) : (t_FieldElement_t × t_FieldElement_t × t_PolyKey_t) in
  let poly_st := (poly1305_update_padded cipher_text poly_st) : (t_FieldElement_t × t_FieldElement_t × t_PolyKey_t) in
  let my_tag := (finish (len_under_impl_41 aad) (len_under_impl_41 cipher_text) poly_st) : t_Poly1305Tag_t in
  if
    declassify_eq_under_impl_72 my_tag tag
  then
    v_Ok (chacha20 key iv (@repr WORDSIZE32 1) cipher_text)
  else
    v_Err Error_InvalidTagt_Error_t.
