(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_lib.

Inductive t_Error : Type :=
| Error_InvalidAdditiont_Error.

Definition v_BITS : uint_size :=
  (@repr WORDSIZE32 256).

Notation FieldCanvas := (nseq int8 256).
Notation P256FieldElement_t := (nat_mod 0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff).
Definition P256FieldElement : P256FieldElement_t -> P256FieldElement_t :=
  id.

Notation ScalarCanvas := (nseq int8 256).
Notation P256Scalar_t := (nat_mod 0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551).
Definition P256Scalar : P256Scalar_t -> P256Scalar_t :=
  id.

Notation t_Affine_t := ((t_P256FieldElement_t × t_P256FieldElement_t)).

Notation t_AffineResult_t := (t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t)).

Notation t_P256Jacobian_t := ((t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)).

Notation t_JacobianResult_t := (t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t)).

Notation Element_t := (nseq int8 32).
Definition Element : Element_t -> Element_t :=
  id.

Definition jacobian_to_affine (p : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)) : (t_P256FieldElement_t × t_P256FieldElement_t) :=
  let '(x,y,z) := (p) : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t) in
  let z2 := (exp z (@repr WORDSIZE32 2)) : t_P256FieldElement_t in
  let z2i := (inv_under_impl_58 z2) : t_P256FieldElement_t in
  let z3 := (z.*z2) : _ in
  let z3i := (inv_under_impl_58 z3) : t_P256FieldElement_t in
  let x := (x.*z2i) : _ in
  let y := (y.*z3i) : _ in
  (x,y).

Definition affine_to_jacobian (p : (t_P256FieldElement_t × t_P256FieldElement_t)) : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t) :=
  let '(x,y) := (p) : (t_P256FieldElement_t × t_P256FieldElement_t) in
  (x,y,from_literal_under_impl_64 (@repr WORDSIZE128 1)).

Definition point_double (p : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)) : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t) :=
  let '(x1,y1,z1) := (p) : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t) in
  let delta := (exp z1 (@repr WORDSIZE32 2)) : t_P256FieldElement_t in
  let gamma := (exp y1 (@repr WORDSIZE32 2)) : t_P256FieldElement_t in
  let beta := (x1.*gamma) : _ in
  let alpha_1 := (x1.-delta) : _ in
  let alpha_2 := (x1.+delta) : _ in
  let alpha := ((from_literal_under_impl_64 (@repr WORDSIZE128 3)).*(alpha_1.*alpha_2)) : _ in
  let x3 := ((exp alpha (@repr WORDSIZE32 2)).-((from_literal_under_impl_64 (@repr WORDSIZE128 8)).*beta)) : _ in
  let z3_ := (exp (y1.+z1) (@repr WORDSIZE32 2)) : t_P256FieldElement_t in
  let z3 := (z3_.-(gamma.+delta)) : _ in
  let y3_1 := (((from_literal_under_impl_64 (@repr WORDSIZE128 4)).*beta).-x3) : _ in
  let y3_2 := ((from_literal_under_impl_64 (@repr WORDSIZE128 8)).*(gamma.*gamma)) : _ in
  let y3 := ((alpha.*y3_1).-y3_2) : _ in
  (x3,y3,z3).

Definition is_point_at_infinity (p : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)) : bool :=
  let '(_x,_y,z) := (p) : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t) in
  equal z (from_literal_under_impl_64 (@repr WORDSIZE128 0)).

Definition s1_equal_s2 (s1 : t_P256FieldElement_t) (s2 : t_P256FieldElement_t) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) :=
  if
    equal s1 s2
  then
    v_Err Error_InvalidAdditiont_Error_t
  else
    v_Ok (from_literal_under_impl_64 (@repr WORDSIZE128 0),from_literal_under_impl_64 (@repr WORDSIZE128 1),from_literal_under_impl_64 (@repr WORDSIZE128 0)).

Definition point_add_jacob (p : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)) (q : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) :=
  let result := (v_Ok q) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) in
  let result := (if
      not (is_point_at_infinity p)
    then
      if
        is_point_at_infinity q
      then
        let result := (v_Ok p) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) in
        result
      else
        let '(x1,y1,z1) := (p) : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t) in
        let '(x2,y2,z2) := (q) : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t) in
        let z1z1 := (exp z1 (@repr WORDSIZE32 2)) : t_P256FieldElement_t in
        let z2z2 := (exp z2 (@repr WORDSIZE32 2)) : t_P256FieldElement_t in
        let u1 := (x1.*z2z2) : _ in
        let u2 := (x2.*z1z1) : _ in
        let s1 := ((y1.*z2).*z2z2) : _ in
        let s2 := ((y2.*z1).*z1z1) : _ in
        if
          equal u1 u2
        then
          let result := (s1_equal_s2 s1 s2) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) in
          result
        else
          let h := (u2.-u1) : _ in
          let i := (exp ((from_literal_under_impl_64 (@repr WORDSIZE128 2)).*h) (@repr WORDSIZE32 2)) : t_P256FieldElement_t in
          let j := (h.*i) : _ in
          let r := ((from_literal_under_impl_64 (@repr WORDSIZE128 2)).*(s2.-s1)) : _ in
          let v := (u1.*i) : _ in
          let x3_1 := ((from_literal_under_impl_64 (@repr WORDSIZE128 2)).*v) : _ in
          let x3_2 := ((exp r (@repr WORDSIZE32 2)).-j) : _ in
          let x3 := (x3_2.-x3_1) : _ in
          let y3_1 := (((from_literal_under_impl_64 (@repr WORDSIZE128 2)).*s1).*j) : _ in
          let y3_2 := (r.*(v.-x3)) : _ in
          let y3 := (y3_2.-y3_1) : _ in
          let z3_ := (exp (z1.+z2) (@repr WORDSIZE32 2)) : t_P256FieldElement_t in
          let z3 := ((z3_.-(z1z1.+z2z2)).*h) : _ in
          let result := (v_Ok (x3,y3,z3)) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) in
          result
    else
      result) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) in
  result.

Definition ltr_mul (k : t_P256Scalar_t) (p : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) :=
  let q := ((from_literal_under_impl_64 (@repr WORDSIZE128 0),from_literal_under_impl_64 (@repr WORDSIZE128 1),from_literal_under_impl_64 (@repr WORDSIZE128 0))) : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t) in
  let q := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)v_BITS)) q (fun q i =>
      let q := (point_double q) : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t) in
      if
        equal (get_bit k ((v_BITS.-(@repr WORDSIZE32 1)).-i)) v_ONE
      then
        let hoist1 := (point_add_jacob q p) : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t) in
        Result_Ok (let q := (hoist1) : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t) in
        q)
      else
        Result_Ok q)) : (t_P256FieldElement_t × t_P256FieldElement_t × t_P256FieldElement_t) in
  v_Ok q.

Definition p256_point_mul (k : t_P256Scalar_t) (p : (t_P256FieldElement_t × t_P256FieldElement_t)) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) :=
  let jac := (from_residual (ltr_mul k (affine_to_jacobian p))) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) in
  v_Ok (jacobian_to_affine jac).

Definition p256_point_mul_base (k : t_P256Scalar_t) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) :=
  let base_point := ((from_byte_seq_be_under_impl_1 (Element (array_from_list [U8 (@repr WORDSIZE8 107);
        U8 (@repr WORDSIZE8 23);
        U8 (@repr WORDSIZE8 209);
        U8 (@repr WORDSIZE8 242);
        U8 (@repr WORDSIZE8 225);
        U8 (@repr WORDSIZE8 44);
        U8 (@repr WORDSIZE8 66);
        U8 (@repr WORDSIZE8 71);
        U8 (@repr WORDSIZE8 248);
        U8 (@repr WORDSIZE8 188);
        U8 (@repr WORDSIZE8 230);
        U8 (@repr WORDSIZE8 229);
        U8 (@repr WORDSIZE8 99);
        U8 (@repr WORDSIZE8 164);
        U8 (@repr WORDSIZE8 64);
        U8 (@repr WORDSIZE8 242);
        U8 (@repr WORDSIZE8 119);
        U8 (@repr WORDSIZE8 3);
        U8 (@repr WORDSIZE8 125);
        U8 (@repr WORDSIZE8 129);
        U8 (@repr WORDSIZE8 45);
        U8 (@repr WORDSIZE8 235);
        U8 (@repr WORDSIZE8 51);
        U8 (@repr WORDSIZE8 160);
        U8 (@repr WORDSIZE8 244);
        U8 (@repr WORDSIZE8 161);
        U8 (@repr WORDSIZE8 57);
        U8 (@repr WORDSIZE8 69);
        U8 (@repr WORDSIZE8 216);
        U8 (@repr WORDSIZE8 152);
        U8 (@repr WORDSIZE8 194);
        U8 (@repr WORDSIZE8 150)])),from_byte_seq_be_under_impl_1 (Element (array_from_list [U8 (@repr WORDSIZE8 79);
        U8 (@repr WORDSIZE8 227);
        U8 (@repr WORDSIZE8 66);
        U8 (@repr WORDSIZE8 226);
        U8 (@repr WORDSIZE8 254);
        U8 (@repr WORDSIZE8 26);
        U8 (@repr WORDSIZE8 127);
        U8 (@repr WORDSIZE8 155);
        U8 (@repr WORDSIZE8 142);
        U8 (@repr WORDSIZE8 231);
        U8 (@repr WORDSIZE8 235);
        U8 (@repr WORDSIZE8 74);
        U8 (@repr WORDSIZE8 124);
        U8 (@repr WORDSIZE8 15);
        U8 (@repr WORDSIZE8 158);
        U8 (@repr WORDSIZE8 22);
        U8 (@repr WORDSIZE8 43);
        U8 (@repr WORDSIZE8 206);
        U8 (@repr WORDSIZE8 51);
        U8 (@repr WORDSIZE8 87);
        U8 (@repr WORDSIZE8 107);
        U8 (@repr WORDSIZE8 49);
        U8 (@repr WORDSIZE8 94);
        U8 (@repr WORDSIZE8 206);
        U8 (@repr WORDSIZE8 203);
        U8 (@repr WORDSIZE8 182);
        U8 (@repr WORDSIZE8 64);
        U8 (@repr WORDSIZE8 104);
        U8 (@repr WORDSIZE8 55);
        U8 (@repr WORDSIZE8 191);
        U8 (@repr WORDSIZE8 81);
        U8 (@repr WORDSIZE8 245)])))) : (t_P256FieldElement_t × t_P256FieldElement_t) in
  p256_point_mul k base_point.

Definition point_add_distinct (p : (t_P256FieldElement_t × t_P256FieldElement_t)) (q : (t_P256FieldElement_t × t_P256FieldElement_t)) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) :=
  let r := (from_residual (point_add_jacob (affine_to_jacobian p) (affine_to_jacobian q))) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) in
  v_Ok (jacobian_to_affine r).

Definition point_add (p : (t_P256FieldElement_t × t_P256FieldElement_t)) (q : (t_P256FieldElement_t × t_P256FieldElement_t)) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) :=
  if
    p<>q
  then
    point_add_distinct p q
  else
    v_Ok (jacobian_to_affine (point_double (affine_to_jacobian p))).

Definition p256_validate_private_key (k : t_Seq_t t_U8_t) : bool :=
  let valid := (true) : bool in
  let k_element := (from_byte_seq_be_under_impl_68 k) : t_P256Scalar_t in
  let k_element_bytes := (to_byte_seq_be_under_impl_68 k_element) : t_Seq_t t_U8_t in
  let all_zero := (true) : bool in
  let '(all_zero,valid) := (fold (into_iter (Build_Range (@repr WORDSIZE32 0)(len_under_impl_41 k))) (all_zero,valid) (fun '(all_zero,valid) i =>
      let all_zero := (if
          not (equal (k.[i]) (U8 (@repr WORDSIZE8 0)))
        then
          let all_zero := (false) : bool in
          all_zero
        else
          all_zero) : bool in
      if
        not (equal (k_element_bytes.[i]) (k.[i]))
      then
        let valid := (false) : bool in
        (all_zero,valid)
      else
        (all_zero,valid))) : (bool × bool) in
  andb valid (not all_zero).

Definition p256_validate_public_key (p : (t_P256FieldElement_t × t_P256FieldElement_t)) : bool :=
  let b := (from_byte_seq_be_under_impl_1 (from_vec_under_impl_52 (into_vec_under_impl (unsize box_new)))) : t_P256FieldElement_t in
  let point_at_infinity := (is_point_at_infinity (affine_to_jacobian p)) : bool in
  let '(x,y) := (p) : (t_P256FieldElement_t × t_P256FieldElement_t) in
  let on_curve := ((y.*y)=.?((((x.*x).*x).-((from_literal_under_impl_64 (@repr WORDSIZE128 3)).*x)).+b)) : bool in
  andb (not point_at_infinity) on_curve.

Definition p256_calculate_w (x : t_P256FieldElement_t) : t_P256FieldElement_t :=
  let b := (from_byte_seq_be_under_impl_1 (from_vec_under_impl_52 (into_vec_under_impl (unsize box_new)))) : t_P256FieldElement_t in
  let exp := (from_byte_seq_be_under_impl_1 (from_vec_under_impl_52 (into_vec_under_impl (unsize box_new)))) : t_P256FieldElement_t in
  let z := ((((x.*x).*x).-((from_literal_under_impl_64 (@repr WORDSIZE128 3)).*x)).+b) : _ in
  pow_felem_under_impl_58 z exp.
