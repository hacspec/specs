(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

Require Import Hacspec_lib.

Require Import Hacspec_p256.

Require Import Hacspec_sha256.

Inductive t_Error : Type :=
| Error_InvalidScalart_Error
| Error_InvalidSignaturet_Error.

Notation t_P256PublicKey_t := ((t_P256FieldElement_t × t_P256FieldElement_t)).

Notation t_P256SecretKey_t := (t_P256Scalar_t).

Notation t_P256Signature_t := ((t_P256Scalar_t × t_P256Scalar_t)).

Notation t_P256SignatureResult_t := (t_Result_t ((t_P256Scalar_t × t_P256Scalar_t)) (t_Error_t)).

Notation t_P256VerifyResult_t := (t_Result_t (unit) (t_Error_t)).

Notation t_CheckResult_t := (t_Result_t (unit) (t_Error_t)).

Notation t_ArithmeticResult_t := (t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t)).

Definition check_scalar_zero (r : t_P256Scalar_t) : t_Result_t (unit) (t_Error_t) :=
  if
    equal r v_ZERO
  then
    v_Err Error_InvalidScalart_Error_t
  else
    v_Ok tt.

Definition ecdsa_point_mul_base (x : t_P256Scalar_t) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) :=
  match p256_point_mul_base x with
  | Result_Ok s => v_Ok s
  | Result_Err _ => v_Err Error_InvalidScalart_Error_t
  end.

Definition ecdsa_point_mul (k : t_P256Scalar_t) (p : (t_P256FieldElement_t × t_P256FieldElement_t)) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) :=
  match p256_point_mul k p with
  | Result_Ok s => v_Ok s
  | Result_Err _ => v_Err Error_InvalidScalart_Error_t
  end.

Definition ecdsa_point_add (p : (t_P256FieldElement_t × t_P256FieldElement_t)) (q : (t_P256FieldElement_t × t_P256FieldElement_t)) : t_Result_t ((t_P256FieldElement_t × t_P256FieldElement_t)) (t_Error_t) :=
  match point_add p q with
  | Result_Ok s => v_Ok s
  | Result_Err _ => v_Err Error_InvalidScalart_Error_t
  end.

Definition sign (payload : t_Seq_t t_U8_t) (sk : t_P256Scalar_t) (nonce : t_P256Scalar_t) : t_Result_t ((t_P256Scalar_t × t_P256Scalar_t)) (t_Error_t) :=
  let _ := (from_residual (check_scalar_zero nonce)) : t_Result_t ((t_P256Scalar_t × t_P256Scalar_t)) (t_Error_t) in
  let '(k_x,_k_y) := (from_residual (ecdsa_point_mul_base nonce)) : t_Result_t ((t_P256Scalar_t × t_P256Scalar_t)) (t_Error_t) in
  let r := (from_byte_seq_be_under_impl_68 (to_byte_seq_be_under_impl_1 k_x)) : t_P256Scalar_t in
  let _ := (from_residual (check_scalar_zero r)) : t_Result_t ((t_P256Scalar_t × t_P256Scalar_t)) (t_Error_t) in
  let payload_hash := (hash payload) : t_Sha256Digest_t in
  let payload_hash := (from_byte_seq_be_under_impl_68 payload_hash) : t_P256Scalar_t in
  let rsk := (r.*sk) : _ in
  let hash_rsk := (payload_hash.+rsk) : _ in
  let nonce_inv := (inv_under_impl_125 nonce) : t_P256Scalar_t in
  let s := (nonce_inv.*hash_rsk) : _ in
  v_Ok (r,s).

Definition ecdsa_p256_sha256_sign (payload : t_Seq_t t_U8_t) (sk : t_P256Scalar_t) (nonce : t_P256Scalar_t) : t_Result_t ((t_P256Scalar_t × t_P256Scalar_t)) (t_Error_t) :=
  sign payload sk nonce.

Definition verify (payload : t_Seq_t t_U8_t) (pk : (t_P256FieldElement_t × t_P256FieldElement_t)) (signature : (t_P256Scalar_t × t_P256Scalar_t)) : t_Result_t (unit) (t_Error_t) :=
  let '(r,s) := (signature) : (t_P256Scalar_t × t_P256Scalar_t) in
  let payload_hash := (hash payload) : t_Sha256Digest_t in
  let payload_hash := (from_byte_seq_be_under_impl_68 payload_hash) : t_P256Scalar_t in
  let s_inv := (inv_under_impl_125 s) : t_P256Scalar_t in
  let u1 := (payload_hash.*s_inv) : _ in
  let u1 := (from_residual (ecdsa_point_mul_base u1)) : t_Result_t (unit) (t_Error_t) in
  let u2 := (r.*s_inv) : _ in
  let u2 := (from_residual (ecdsa_point_mul u2 pk)) : t_Result_t (unit) (t_Error_t) in
  let '(x,_y) := (from_residual (ecdsa_point_add u1 u2)) : t_Result_t (unit) (t_Error_t) in
  let x := (from_byte_seq_be_under_impl_68 (to_byte_seq_be_under_impl_1 x)) : t_P256Scalar_t in
  if
    x=.?r
  then
    v_Ok tt
  else
    v_Err Error_InvalidSignaturet_Error_t.

Definition ecdsa_p256_sha256_verify (payload : t_Seq_t t_U8_t) (pk : (t_P256FieldElement_t × t_P256FieldElement_t)) (signature : (t_P256Scalar_t × t_P256Scalar_t)) : t_Result_t (unit) (t_Error_t) :=
  verify payload pk signature.
