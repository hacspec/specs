(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

Require Import Hacspec_lib.

(*Not implemented yet? todo(item)*)

Definition v_BLOCKSIZE : uint_size :=
  (@repr WORDSIZE32 16).

Definition v_INVALID_KEY_EXPANSION_INDEX : int8 :=
  (@repr WORDSIZE8 1).

Definition v_ITERATIONS : uint_size :=
  (@repr WORDSIZE32 40).

Definition v_IVSIZE : uint_size :=
  (@repr WORDSIZE32 12).

Definition v_KEY_LENGTH : uint_size :=
  (@repr WORDSIZE32 4).

Definition v_KEY_SCHEDULE_LENGTH : uint_size :=
  (@repr WORDSIZE32 176).

Definition v_ROUNDS : uint_size :=
  (@repr WORDSIZE32 10).

Notation AesNonce_t := (nseq int8 IVSIZE).
Definition AesNonce : AesNonce_t -> AesNonce_t :=
  id.

Notation Block_t := (nseq int8 BLOCKSIZE).
Definition Block : Block_t -> Block_t :=
  id.

Notation t_BlockResult_t := (t_Result_t (t_Block_t) (int8)).

Notation Bytes144_t := (nseq int8 144).
Definition Bytes144 : Bytes144_t -> Bytes144_t :=
  id.

Notation Bytes176_t := (nseq int8 KEY_SCHEDULE_LENGTH).
Definition Bytes176 : Bytes176_t -> Bytes176_t :=
  id.

Notation Key128_t := (nseq int8 BLOCKSIZE).
Definition Key128 : Key128_t -> Key128_t :=
  id.

Notation RCon_t := (nseq int8 15).
Definition RCon : RCon_t -> RCon_t :=
  id.

Notation RoundKey_t := (nseq int8 BLOCKSIZE).
Definition RoundKey : RoundKey_t -> RoundKey_t :=
  id.

Notation SBox_t := (nseq int8 256).
Definition SBox : SBox_t -> SBox_t :=
  id.

Notation Word_t := (nseq int8 KEY_LENGTH).
Definition Word : Word_t -> Word_t :=
  id.

Notation t_WordResult_t := (t_Result_t (t_Word_t) (int8)).

Notation t_ByteSeqResult_t := (t_Result_t (t_Seq_t t_U8_t) (int8)).

Definition add_round_key (state : t_Block_t) (key : t_RoundKey_t) : t_Block_t :=
  let out := (state) : t_Block_t in
  let out := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)v_BLOCKSIZE)) out (fun out i =>
      update_at_usize out i ((out.[i]).^(key.[i])))) : t_Block_t in
  out.

Definition rotate_word (w : t_Word_t) : t_Word_t :=
  Word (array_from_list [w.[(@repr WORDSIZE32 1)];
    w.[(@repr WORDSIZE32 2)];
    w.[(@repr WORDSIZE32 3)];
    w.[(@repr WORDSIZE32 0)]]).

Definition shift_row (i : uint_size) (shift : uint_size) (state : t_Block_t) : t_Block_t :=
  let out := (state) : t_Block_t in
  let out := (update_at_usize out i (state.[(i.+((@repr WORDSIZE32 4).*(shift.%(@repr WORDSIZE32 4))))])) : t_Block_t in
  let out := (update_at_usize out (i.+(@repr WORDSIZE32 4)) (state.[(i.+((@repr WORDSIZE32 4).*((shift.+(@repr WORDSIZE32 1)).%(@repr WORDSIZE32 4))))])) : t_Block_t in
  let out := (update_at_usize out (i.+(@repr WORDSIZE32 8)) (state.[(i.+((@repr WORDSIZE32 4).*((shift.+(@repr WORDSIZE32 2)).%(@repr WORDSIZE32 4))))])) : t_Block_t in
  let out := (update_at_usize out (i.+(@repr WORDSIZE32 12)) (state.[(i.+((@repr WORDSIZE32 4).*((shift.+(@repr WORDSIZE32 3)).%(@repr WORDSIZE32 4))))])) : t_Block_t in
  out.

Definition shift_rows (state : t_Block_t) : t_Block_t :=
  let state := (shift_row (@repr WORDSIZE32 1) (@repr WORDSIZE32 1) state) : t_Block_t in
  let state := (shift_row (@repr WORDSIZE32 2) (@repr WORDSIZE32 2) state) : t_Block_t in
  shift_row (@repr WORDSIZE32 3) (@repr WORDSIZE32 3) state.

Definition xor_block (block : t_Block_t) (key_block : t_Block_t) : t_Block_t :=
  let out := (block) : t_Block_t in
  let out := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)v_BLOCKSIZE)) out (fun out i =>
      update_at_usize out i ((out.[i]).^(key_block.[i])))) : t_Block_t in
  out.

Definition v_RCON : t_RCon_t :=
  RCon (array_from_list [U8 (@repr WORDSIZE8 141);
    U8 (@repr WORDSIZE8 1);
    U8 (@repr WORDSIZE8 2);
    U8 (@repr WORDSIZE8 4);
    U8 (@repr WORDSIZE8 8);
    U8 (@repr WORDSIZE8 16);
    U8 (@repr WORDSIZE8 32);
    U8 (@repr WORDSIZE8 64);
    U8 (@repr WORDSIZE8 128);
    U8 (@repr WORDSIZE8 27);
    U8 (@repr WORDSIZE8 54);
    U8 (@repr WORDSIZE8 108);
    U8 (@repr WORDSIZE8 216);
    U8 (@repr WORDSIZE8 171);
    U8 (@repr WORDSIZE8 77)]).

Definition v_SBOX : t_SBox_t :=
  SBox (array_from_list [U8 (@repr WORDSIZE8 99);
    U8 (@repr WORDSIZE8 124);
    U8 (@repr WORDSIZE8 119);
    U8 (@repr WORDSIZE8 123);
    U8 (@repr WORDSIZE8 242);
    U8 (@repr WORDSIZE8 107);
    U8 (@repr WORDSIZE8 111);
    U8 (@repr WORDSIZE8 197);
    U8 (@repr WORDSIZE8 48);
    U8 (@repr WORDSIZE8 1);
    U8 (@repr WORDSIZE8 103);
    U8 (@repr WORDSIZE8 43);
    U8 (@repr WORDSIZE8 254);
    U8 (@repr WORDSIZE8 215);
    U8 (@repr WORDSIZE8 171);
    U8 (@repr WORDSIZE8 118);
    U8 (@repr WORDSIZE8 202);
    U8 (@repr WORDSIZE8 130);
    U8 (@repr WORDSIZE8 201);
    U8 (@repr WORDSIZE8 125);
    U8 (@repr WORDSIZE8 250);
    U8 (@repr WORDSIZE8 89);
    U8 (@repr WORDSIZE8 71);
    U8 (@repr WORDSIZE8 240);
    U8 (@repr WORDSIZE8 173);
    U8 (@repr WORDSIZE8 212);
    U8 (@repr WORDSIZE8 162);
    U8 (@repr WORDSIZE8 175);
    U8 (@repr WORDSIZE8 156);
    U8 (@repr WORDSIZE8 164);
    U8 (@repr WORDSIZE8 114);
    U8 (@repr WORDSIZE8 192);
    U8 (@repr WORDSIZE8 183);
    U8 (@repr WORDSIZE8 253);
    U8 (@repr WORDSIZE8 147);
    U8 (@repr WORDSIZE8 38);
    U8 (@repr WORDSIZE8 54);
    U8 (@repr WORDSIZE8 63);
    U8 (@repr WORDSIZE8 247);
    U8 (@repr WORDSIZE8 204);
    U8 (@repr WORDSIZE8 52);
    U8 (@repr WORDSIZE8 165);
    U8 (@repr WORDSIZE8 229);
    U8 (@repr WORDSIZE8 241);
    U8 (@repr WORDSIZE8 113);
    U8 (@repr WORDSIZE8 216);
    U8 (@repr WORDSIZE8 49);
    U8 (@repr WORDSIZE8 21);
    U8 (@repr WORDSIZE8 4);
    U8 (@repr WORDSIZE8 199);
    U8 (@repr WORDSIZE8 35);
    U8 (@repr WORDSIZE8 195);
    U8 (@repr WORDSIZE8 24);
    U8 (@repr WORDSIZE8 150);
    U8 (@repr WORDSIZE8 5);
    U8 (@repr WORDSIZE8 154);
    U8 (@repr WORDSIZE8 7);
    U8 (@repr WORDSIZE8 18);
    U8 (@repr WORDSIZE8 128);
    U8 (@repr WORDSIZE8 226);
    U8 (@repr WORDSIZE8 235);
    U8 (@repr WORDSIZE8 39);
    U8 (@repr WORDSIZE8 178);
    U8 (@repr WORDSIZE8 117);
    U8 (@repr WORDSIZE8 9);
    U8 (@repr WORDSIZE8 131);
    U8 (@repr WORDSIZE8 44);
    U8 (@repr WORDSIZE8 26);
    U8 (@repr WORDSIZE8 27);
    U8 (@repr WORDSIZE8 110);
    U8 (@repr WORDSIZE8 90);
    U8 (@repr WORDSIZE8 160);
    U8 (@repr WORDSIZE8 82);
    U8 (@repr WORDSIZE8 59);
    U8 (@repr WORDSIZE8 214);
    U8 (@repr WORDSIZE8 179);
    U8 (@repr WORDSIZE8 41);
    U8 (@repr WORDSIZE8 227);
    U8 (@repr WORDSIZE8 47);
    U8 (@repr WORDSIZE8 132);
    U8 (@repr WORDSIZE8 83);
    U8 (@repr WORDSIZE8 209);
    U8 (@repr WORDSIZE8 0);
    U8 (@repr WORDSIZE8 237);
    U8 (@repr WORDSIZE8 32);
    U8 (@repr WORDSIZE8 252);
    U8 (@repr WORDSIZE8 177);
    U8 (@repr WORDSIZE8 91);
    U8 (@repr WORDSIZE8 106);
    U8 (@repr WORDSIZE8 203);
    U8 (@repr WORDSIZE8 190);
    U8 (@repr WORDSIZE8 57);
    U8 (@repr WORDSIZE8 74);
    U8 (@repr WORDSIZE8 76);
    U8 (@repr WORDSIZE8 88);
    U8 (@repr WORDSIZE8 207);
    U8 (@repr WORDSIZE8 208);
    U8 (@repr WORDSIZE8 239);
    U8 (@repr WORDSIZE8 170);
    U8 (@repr WORDSIZE8 251);
    U8 (@repr WORDSIZE8 67);
    U8 (@repr WORDSIZE8 77);
    U8 (@repr WORDSIZE8 51);
    U8 (@repr WORDSIZE8 133);
    U8 (@repr WORDSIZE8 69);
    U8 (@repr WORDSIZE8 249);
    U8 (@repr WORDSIZE8 2);
    U8 (@repr WORDSIZE8 127);
    U8 (@repr WORDSIZE8 80);
    U8 (@repr WORDSIZE8 60);
    U8 (@repr WORDSIZE8 159);
    U8 (@repr WORDSIZE8 168);
    U8 (@repr WORDSIZE8 81);
    U8 (@repr WORDSIZE8 163);
    U8 (@repr WORDSIZE8 64);
    U8 (@repr WORDSIZE8 143);
    U8 (@repr WORDSIZE8 146);
    U8 (@repr WORDSIZE8 157);
    U8 (@repr WORDSIZE8 56);
    U8 (@repr WORDSIZE8 245);
    U8 (@repr WORDSIZE8 188);
    U8 (@repr WORDSIZE8 182);
    U8 (@repr WORDSIZE8 218);
    U8 (@repr WORDSIZE8 33);
    U8 (@repr WORDSIZE8 16);
    U8 (@repr WORDSIZE8 255);
    U8 (@repr WORDSIZE8 243);
    U8 (@repr WORDSIZE8 210);
    U8 (@repr WORDSIZE8 205);
    U8 (@repr WORDSIZE8 12);
    U8 (@repr WORDSIZE8 19);
    U8 (@repr WORDSIZE8 236);
    U8 (@repr WORDSIZE8 95);
    U8 (@repr WORDSIZE8 151);
    U8 (@repr WORDSIZE8 68);
    U8 (@repr WORDSIZE8 23);
    U8 (@repr WORDSIZE8 196);
    U8 (@repr WORDSIZE8 167);
    U8 (@repr WORDSIZE8 126);
    U8 (@repr WORDSIZE8 61);
    U8 (@repr WORDSIZE8 100);
    U8 (@repr WORDSIZE8 93);
    U8 (@repr WORDSIZE8 25);
    U8 (@repr WORDSIZE8 115);
    U8 (@repr WORDSIZE8 96);
    U8 (@repr WORDSIZE8 129);
    U8 (@repr WORDSIZE8 79);
    U8 (@repr WORDSIZE8 220);
    U8 (@repr WORDSIZE8 34);
    U8 (@repr WORDSIZE8 42);
    U8 (@repr WORDSIZE8 144);
    U8 (@repr WORDSIZE8 136);
    U8 (@repr WORDSIZE8 70);
    U8 (@repr WORDSIZE8 238);
    U8 (@repr WORDSIZE8 184);
    U8 (@repr WORDSIZE8 20);
    U8 (@repr WORDSIZE8 222);
    U8 (@repr WORDSIZE8 94);
    U8 (@repr WORDSIZE8 11);
    U8 (@repr WORDSIZE8 219);
    U8 (@repr WORDSIZE8 224);
    U8 (@repr WORDSIZE8 50);
    U8 (@repr WORDSIZE8 58);
    U8 (@repr WORDSIZE8 10);
    U8 (@repr WORDSIZE8 73);
    U8 (@repr WORDSIZE8 6);
    U8 (@repr WORDSIZE8 36);
    U8 (@repr WORDSIZE8 92);
    U8 (@repr WORDSIZE8 194);
    U8 (@repr WORDSIZE8 211);
    U8 (@repr WORDSIZE8 172);
    U8 (@repr WORDSIZE8 98);
    U8 (@repr WORDSIZE8 145);
    U8 (@repr WORDSIZE8 149);
    U8 (@repr WORDSIZE8 228);
    U8 (@repr WORDSIZE8 121);
    U8 (@repr WORDSIZE8 231);
    U8 (@repr WORDSIZE8 200);
    U8 (@repr WORDSIZE8 55);
    U8 (@repr WORDSIZE8 109);
    U8 (@repr WORDSIZE8 141);
    U8 (@repr WORDSIZE8 213);
    U8 (@repr WORDSIZE8 78);
    U8 (@repr WORDSIZE8 169);
    U8 (@repr WORDSIZE8 108);
    U8 (@repr WORDSIZE8 86);
    U8 (@repr WORDSIZE8 244);
    U8 (@repr WORDSIZE8 234);
    U8 (@repr WORDSIZE8 101);
    U8 (@repr WORDSIZE8 122);
    U8 (@repr WORDSIZE8 174);
    U8 (@repr WORDSIZE8 8);
    U8 (@repr WORDSIZE8 186);
    U8 (@repr WORDSIZE8 120);
    U8 (@repr WORDSIZE8 37);
    U8 (@repr WORDSIZE8 46);
    U8 (@repr WORDSIZE8 28);
    U8 (@repr WORDSIZE8 166);
    U8 (@repr WORDSIZE8 180);
    U8 (@repr WORDSIZE8 198);
    U8 (@repr WORDSIZE8 232);
    U8 (@repr WORDSIZE8 221);
    U8 (@repr WORDSIZE8 116);
    U8 (@repr WORDSIZE8 31);
    U8 (@repr WORDSIZE8 75);
    U8 (@repr WORDSIZE8 189);
    U8 (@repr WORDSIZE8 139);
    U8 (@repr WORDSIZE8 138);
    U8 (@repr WORDSIZE8 112);
    U8 (@repr WORDSIZE8 62);
    U8 (@repr WORDSIZE8 181);
    U8 (@repr WORDSIZE8 102);
    U8 (@repr WORDSIZE8 72);
    U8 (@repr WORDSIZE8 3);
    U8 (@repr WORDSIZE8 246);
    U8 (@repr WORDSIZE8 14);
    U8 (@repr WORDSIZE8 97);
    U8 (@repr WORDSIZE8 53);
    U8 (@repr WORDSIZE8 87);
    U8 (@repr WORDSIZE8 185);
    U8 (@repr WORDSIZE8 134);
    U8 (@repr WORDSIZE8 193);
    U8 (@repr WORDSIZE8 29);
    U8 (@repr WORDSIZE8 158);
    U8 (@repr WORDSIZE8 225);
    U8 (@repr WORDSIZE8 248);
    U8 (@repr WORDSIZE8 152);
    U8 (@repr WORDSIZE8 17);
    U8 (@repr WORDSIZE8 105);
    U8 (@repr WORDSIZE8 217);
    U8 (@repr WORDSIZE8 142);
    U8 (@repr WORDSIZE8 148);
    U8 (@repr WORDSIZE8 155);
    U8 (@repr WORDSIZE8 30);
    U8 (@repr WORDSIZE8 135);
    U8 (@repr WORDSIZE8 233);
    U8 (@repr WORDSIZE8 206);
    U8 (@repr WORDSIZE8 85);
    U8 (@repr WORDSIZE8 40);
    U8 (@repr WORDSIZE8 223);
    U8 (@repr WORDSIZE8 140);
    U8 (@repr WORDSIZE8 161);
    U8 (@repr WORDSIZE8 137);
    U8 (@repr WORDSIZE8 13);
    U8 (@repr WORDSIZE8 191);
    U8 (@repr WORDSIZE8 230);
    U8 (@repr WORDSIZE8 66);
    U8 (@repr WORDSIZE8 104);
    U8 (@repr WORDSIZE8 65);
    U8 (@repr WORDSIZE8 153);
    U8 (@repr WORDSIZE8 45);
    U8 (@repr WORDSIZE8 15);
    U8 (@repr WORDSIZE8 176);
    U8 (@repr WORDSIZE8 84);
    U8 (@repr WORDSIZE8 187);
    U8 (@repr WORDSIZE8 22)]).

Definition sub_bytes (state : t_Block_t) : t_Block_t :=
  let st := (state) : t_Block_t in
  let st := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)v_BLOCKSIZE)) st (fun st i =>
      update_at_usize st i (v_SBOX.[(impl__U8__declassify (state.[i]))]))) : t_Block_t in
  st.

Definition aes_enc_last (state : t_Block_t) (round_key : t_RoundKey_t) : t_Block_t :=
  let state := (sub_bytes state) : t_Block_t in
  let state := (shift_rows state) : t_Block_t in
  add_round_key state round_key.

Definition xtime (x : t_U8_t) : t_U8_t :=
  let x1 := (x shift_left (@repr WORDSIZE32 1)) : t_U8_t in
  let x7 := (x shift_right (@repr WORDSIZE32 7)) : t_U8_t in
  let x71 := (x7.&(U8 (@repr WORDSIZE8 1))) : t_U8_t in
  let x711b := (x71.*(U8 (@repr WORDSIZE8 27))) : t_U8_t in
  x1.^x711b.

Definition mix_column (c : uint_size) (state : t_Block_t) : t_Block_t :=
  let i0 := ((@repr WORDSIZE32 4).*c) : uint_size in
  let s0 := (state.[i0]) : t_U8_t in
  let s1 := (state.[(i0.+(@repr WORDSIZE32 1))]) : t_U8_t in
  let s2 := (state.[(i0.+(@repr WORDSIZE32 2))]) : t_U8_t in
  let s3 := (state.[(i0.+(@repr WORDSIZE32 3))]) : t_U8_t in
  let st := (state) : t_Block_t in
  let tmp := (((s0.^s1).^s2).^s3) : t_U8_t in
  let st := (update_at_usize st i0 ((s0.^tmp).^(xtime (s0.^s1)))) : t_Block_t in
  let st := (update_at_usize st (i0.+(@repr WORDSIZE32 1)) ((s1.^tmp).^(xtime (s1.^s2)))) : t_Block_t in
  let st := (update_at_usize st (i0.+(@repr WORDSIZE32 2)) ((s2.^tmp).^(xtime (s2.^s3)))) : t_Block_t in
  let st := (update_at_usize st (i0.+(@repr WORDSIZE32 3)) ((s3.^tmp).^(xtime (s3.^s0)))) : t_Block_t in
  st.

Definition mix_columns (state : t_Block_t) : t_Block_t :=
  let state := (mix_column (@repr WORDSIZE32 0) state) : t_Block_t in
  let state := (mix_column (@repr WORDSIZE32 1) state) : t_Block_t in
  let state := (mix_column (@repr WORDSIZE32 2) state) : t_Block_t in
  mix_column (@repr WORDSIZE32 3) state.

Definition aes_enc (state : t_Block_t) (round_key : t_RoundKey_t) : t_Block_t :=
  let state := (sub_bytes state) : t_Block_t in
  let state := (shift_rows state) : t_Block_t in
  let state := (mix_columns state) : t_Block_t in
  add_round_key state round_key.

Definition rounds_aes (state : t_Block_t) (key : t_Seq_t t_U8_t) : t_Block_t :=
  let out := (state) : t_Block_t in
  let out := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(impl_41__num_chunks key v_BLOCKSIZE))) out (fun out i =>
      let '(_,key_block) := (impl_41__get_chunk key v_BLOCKSIZE i) : (uint_size × t_Seq_t t_U8_t) in
      let out := (aes_enc out (impl__RoundKey__from_seq key_block)) : t_Block_t in
      out)) : t_Block_t in
  out.

Definition block_cipher_aes (input : t_Block_t) (key : t_Seq_t t_U8_t) (nr : uint_size) : t_Block_t :=
  let k0 := (impl__RoundKey__from_slice_range key (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 16))) : t_RoundKey_t in
  let k := (impl_41__from_slice_range key (Build_Range (@repr WORDSIZE32 16)(nr.*(@repr WORDSIZE32 16)))) : t_Seq_t t_U8_t in
  let kn := (impl__RoundKey__from_slice key (nr.*(@repr WORDSIZE32 16)) (@repr WORDSIZE32 16)) : t_RoundKey_t in
  let state := (add_round_key input k0) : t_Block_t in
  let state := (rounds_aes state k) : t_Block_t in
  aes_enc_last state kn.

Definition slice_word (w : t_Word_t) : t_Word_t :=
  Word (array_from_list [v_SBOX.[(declassify_usize_from_U8 (w.[(@repr WORDSIZE32 0)]))];
    v_SBOX.[(declassify_usize_from_U8 (w.[(@repr WORDSIZE32 1)]))];
    v_SBOX.[(declassify_usize_from_U8 (w.[(@repr WORDSIZE32 2)]))];
    v_SBOX.[(declassify_usize_from_U8 (w.[(@repr WORDSIZE32 3)]))]]).

Definition aes_keygen_assist (w : t_Word_t) (rcon : t_U8_t) : t_Word_t :=
  let k := (rotate_word w) : t_Word_t in
  let k := (slice_word k) : t_Word_t in
  let k := (update_at k (@repr WORDSIZE32 0) ((k.[(@repr WORDSIZE32 0)]).^rcon)) : t_Word_t in
  k.

Definition key_expansion_word (w0 : t_Word_t) (w1 : t_Word_t) (i : uint_size) (nk : uint_size) (nr : uint_size) : t_Result_t (t_Word_t) (int8) :=
  let k := (w1) : t_Word_t in
  let result := (v_Err v_INVALID_KEY_EXPANSION_INDEX) : t_Result_t (t_Word_t) (int8) in
  let '(k,result) := (if
      i<.?((@repr WORDSIZE32 4).*(nr.+(@repr WORDSIZE32 1)))
    then
      let k := (if
          (i.%nk)=.?(@repr WORDSIZE32 0)
        then
          let k := (aes_keygen_assist k (v_RCON.[(i./nk)])) : t_Word_t in
          k
        else
          if
            andb (nk>.?(@repr WORDSIZE32 6)) ((i.%nk)=.?(@repr WORDSIZE32 4))
          then
            let k := (slice_word k) : t_Word_t in
            k
          else
            k) : t_Word_t in
      let k := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)(@repr WORDSIZE32 4))) k (fun k i =>
          update_at k i ((k.[i]).^(w0.[i])))) : t_Word_t in
      let result := (v_Ok k) : t_Result_t (t_Word_t) (int8) in
      (k,result)
    else
      (k,result)) : (t_Word_t × t_Result_t (t_Word_t) (int8)) in
  result.

Definition key_expansion_aes (key : t_Seq_t t_U8_t) (nk : uint_size) (nr : uint_size) (key_schedule_length : uint_size) (key_length : uint_size) (iterations : uint_size) : t_Result_t (t_Seq_t t_U8_t) (int8) :=
  let key_ex := (impl_41__new key_schedule_length) : t_Seq_t t_U8_t in
  let key_ex := (f_update_start key_ex key) : t_Seq_t t_U8_t in
  let word_size := (key_length) : uint_size in
  let key_ex := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)iterations)) key_ex (fun key_ex j =>
      let i := (j.+word_size) : uint_size in
      let word := (match f_branch (key_expansion_word (impl__Word__from_slice key_ex ((@repr WORDSIZE32 4).*(i.-word_size)) (@repr WORDSIZE32 4)) (impl__Word__from_slice key_ex (((@repr WORDSIZE32 4).*i).-(@repr WORDSIZE32 4)) (@repr WORDSIZE32 4)) i nk nr) with
        | ControlFlow_Break residual => let hoist1 := (v_Break (f_from_residual residual)) : t_Never_t in
          ControlFlow_Continue (never_to_any hoist1)
        | ControlFlow_Continue val => ControlFlow_Continue val
        end) : t_Word_t in
      ControlFlow_Continue (let key_ex := (f_update key_ex ((@repr WORDSIZE32 4).*i) word) : t_Seq_t t_U8_t in
      key_ex))) : t_Seq_t t_U8_t in
  v_Ok key_ex.

Definition aes_encrypt_block (k : t_Seq_t t_U8_t) (input : t_Block_t) (nk : uint_size) (nr : uint_size) (key_schedule_length : uint_size) (key_length : uint_size) (iterations : uint_size) : t_Result_t (t_Block_t) (int8) :=
  run (let key_ex := (match f_branch (key_expansion_aes k nk nr key_schedule_length key_length iterations) with
    | ControlFlow_Break residual => let hoist2 := (v_Break (f_from_residual residual)) : t_Never_t in
      ControlFlow_Continue (never_to_any hoist2)
    | ControlFlow_Continue val => ControlFlow_Continue val
    end) : t_Seq_t t_U8_t in
  ControlFlow_Continue (v_Ok (block_cipher_aes input key_ex nr))).

Definition aes128_encrypt_block (k : t_Key128_t) (input : t_Block_t) : t_Block_t :=
  impl__unwrap (aes_encrypt_block (impl_52__from_seq k) input v_KEY_LENGTH v_ROUNDS v_KEY_SCHEDULE_LENGTH v_KEY_LENGTH v_ITERATIONS).

Definition aes_ctr_key_block (k : t_Seq_t t_U8_t) (n : t_AesNonce_t) (c : t_U32_t) (nk : uint_size) (nr : uint_size) (key_schedule_length : uint_size) (key_length : uint_size) (iterations : uint_size) : t_Result_t (t_Block_t) (int8) :=
  let input := (impl__Block__new) : t_Block_t in
  let input := (f_update input (@repr WORDSIZE32 0) n) : t_Block_t in
  let input := (f_update input (@repr WORDSIZE32 12) (v_U32_to_be_bytes c)) : t_Block_t in
  aes_encrypt_block k input nk nr key_schedule_length key_length iterations.

Definition aes_counter_mode (key : t_Seq_t t_U8_t) (nonce : t_AesNonce_t) (counter : t_U32_t) (msg : t_Seq_t t_U8_t) (nk : uint_size) (nr : uint_size) (key_schedule_length : uint_size) (key_length : uint_size) (iterations : uint_size) : t_Result_t (t_Seq_t t_U8_t) (int8) :=
  run (let ctr := (counter) : t_U32_t in
  let blocks_out := (impl_41__new (impl_41__len msg)) : t_Seq_t t_U8_t in
  let n_blocks := (impl_41__num_exact_chunks msg v_BLOCKSIZE) : uint_size in
  let '(blocks_out,ctr) := (f_fold (f_into_iter (Build_Range (@repr WORDSIZE32 0)n_blocks)) (blocks_out,ctr) (fun '(blocks_out,ctr) i =>
      let msg_block := (impl_41__get_exact_chunk msg v_BLOCKSIZE i) : t_Seq_t t_U8_t in
      let key_block := (match f_branch (aes_ctr_key_block key nonce ctr nk nr key_schedule_length key_length iterations) with
        | ControlFlow_Break residual => let hoist3 := (v_Break (f_from_residual residual)) : t_Never_t in
          ControlFlow_Continue (never_to_any hoist3)
        | ControlFlow_Continue val => ControlFlow_Continue val
        end) : t_Block_t in
      ControlFlow_Continue (let blocks_out := (impl_41__set_chunk blocks_out v_BLOCKSIZE i (xor_block (impl__Block__from_seq msg_block) key_block)) : t_Seq_t t_U8_t in
      let ctr := (ctr.+(U32 (@repr WORDSIZE32 1))) : t_U32_t in
      (blocks_out,ctr)))) : (t_Seq_t t_U8_t × t_U32_t) in
  let last_block := (impl_41__get_remainder_chunk msg v_BLOCKSIZE) : t_Seq_t t_U8_t in
  let last_block_len := (impl_41__len last_block) : uint_size in
  let blocks_out := (if
      last_block_len<>(@repr WORDSIZE32 0)
    then
      let last_block := (f_update_start impl__Block__new last_block) : t_Block_t in
      let key_block := (match f_branch (aes_ctr_key_block key nonce ctr nk nr key_schedule_length key_length iterations) with
        | ControlFlow_Break residual => let hoist4 := (v_Break (f_from_residual residual)) : t_Never_t in
          ControlFlow_Continue (never_to_any hoist4)
        | ControlFlow_Continue val => ControlFlow_Continue val
        end) : t_Block_t in
      ControlFlow_Continue (let blocks_out := (impl_41__set_chunk blocks_out v_BLOCKSIZE n_blocks (impl__Block__slice_range (xor_block last_block key_block) (Build_Range (@repr WORDSIZE32 0)last_block_len))) : t_Seq_t t_U8_t in
      blocks_out)
    else
      ControlFlow_Continue blocks_out) : t_Seq_t t_U8_t in
  ControlFlow_Continue (v_Ok blocks_out)).

Definition aes128_decrypt (key : t_Key128_t) (nonce : t_AesNonce_t) (counter : t_U32_t) (ctxt : t_Seq_t t_U8_t) : t_Seq_t t_U8_t :=
  impl__unwrap (aes_counter_mode (impl_52__from_seq key) nonce counter ctxt v_KEY_LENGTH v_ROUNDS v_KEY_SCHEDULE_LENGTH v_KEY_LENGTH v_ITERATIONS).

Definition aes128_encrypt (key : t_Key128_t) (nonce : t_AesNonce_t) (counter : t_U32_t) (msg : t_Seq_t t_U8_t) : t_Seq_t t_U8_t :=
  impl__unwrap (aes_counter_mode (impl_52__from_seq key) nonce counter msg v_KEY_LENGTH v_ROUNDS v_KEY_SCHEDULE_LENGTH v_KEY_LENGTH v_ITERATIONS).
