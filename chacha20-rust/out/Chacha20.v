(* File automatically generated by Hacspec *)
From Hacspec Require Import Hacspec_Lib MachineIntegers.
From Coq Require Import ZArith.
Import List.ListNotations.
Open Scope Z_scope.
Open Scope bool_scope.

(*Not implemented yet? todo(item)*)

(*Not implemented yet? todo(item)*)

Require Import Hacspec_helper.

Notation State_t := (nseq int32 TODO: Int.to_string length).

Notation Block_t := (nseq int8 TODO: Int.to_string length).

Notation ChaChaIV_t := (nseq int8 TODO: Int.to_string length).

Notation ChaChaKey_t := (nseq int8 TODO: Int.to_string length).

Definition chacha20_line (a : uint_size) (b : uint_size) (d : uint_size) (s : int32) (m : nseq int32 TODO: Int.to_string length) : nseq int32 TODO: Int.to_string length :=
  let state := (m) : nseq int32 TODO: Int.to_string length in
  let state := (update_at state a (wrapping_add (index state a) (index state b))) : nseq int32 TODO: Int.to_string length in
  let state := (update_at state d ((index state d).^(index state a))) : nseq int32 TODO: Int.to_string length in
  let state := (update_at state d (rotate_left (index state d) s)) : nseq int32 TODO: Int.to_string length in
  state.

Definition chacha20_quarter_round (a : uint_size) (b : uint_size) (c : uint_size) (d : uint_size) (state : nseq int32 TODO: Int.to_string length) : nseq int32 TODO: Int.to_string length :=
  let state := (chacha20_line a b d (@repr WORDSIZE32 16) state) : nseq int32 TODO: Int.to_string length in
  let state := (chacha20_line c d b (@repr WORDSIZE32 12) state) : nseq int32 TODO: Int.to_string length in
  let state := (chacha20_line a b d (@repr WORDSIZE32 8) state) : nseq int32 TODO: Int.to_string length in
  chacha20_line c d b (@repr WORDSIZE32 7) state.

Definition chacha20_double_round (state : nseq int32 TODO: Int.to_string length) : nseq int32 TODO: Int.to_string length :=
  let state := (chacha20_quarter_round (@repr WORDSIZE32 0) (@repr WORDSIZE32 4) (@repr WORDSIZE32 8) (@repr WORDSIZE32 12) state) : nseq int32 TODO: Int.to_string length in
  let state := (chacha20_quarter_round (@repr WORDSIZE32 1) (@repr WORDSIZE32 5) (@repr WORDSIZE32 9) (@repr WORDSIZE32 13) state) : nseq int32 TODO: Int.to_string length in
  let state := (chacha20_quarter_round (@repr WORDSIZE32 2) (@repr WORDSIZE32 6) (@repr WORDSIZE32 10) (@repr WORDSIZE32 14) state) : nseq int32 TODO: Int.to_string length in
  let state := (chacha20_quarter_round (@repr WORDSIZE32 3) (@repr WORDSIZE32 7) (@repr WORDSIZE32 11) (@repr WORDSIZE32 15) state) : nseq int32 TODO: Int.to_string length in
  let state := (chacha20_quarter_round (@repr WORDSIZE32 0) (@repr WORDSIZE32 5) (@repr WORDSIZE32 10) (@repr WORDSIZE32 15) state) : nseq int32 TODO: Int.to_string length in
  let state := (chacha20_quarter_round (@repr WORDSIZE32 1) (@repr WORDSIZE32 6) (@repr WORDSIZE32 11) (@repr WORDSIZE32 12) state) : nseq int32 TODO: Int.to_string length in
  let state := (chacha20_quarter_round (@repr WORDSIZE32 2) (@repr WORDSIZE32 7) (@repr WORDSIZE32 8) (@repr WORDSIZE32 13) state) : nseq int32 TODO: Int.to_string length in
  chacha20_quarter_round (@repr WORDSIZE32 3) (@repr WORDSIZE32 4) (@repr WORDSIZE32 9) (@repr WORDSIZE32 14) state.

Definition chacha20_rounds (state : nseq int32 TODO: Int.to_string length) : nseq int32 TODO: Int.to_string length :=
  let st := (state) : nseq int32 TODO: Int.to_string length in
  let st := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)(@repr WORDSIZE32 10))) st (fun _i st =>
      chacha20_double_round st)) : nseq int32 TODO: Int.to_string length in
  st.

Definition chacha20_core (ctr : int32) (st0 : nseq int32 TODO: Int.to_string length) : nseq int32 TODO: Int.to_string length :=
  let state := (st0) : nseq int32 TODO: Int.to_string length in
  let state := (update_at state (@repr WORDSIZE32 12) ((index state (@repr WORDSIZE32 12)).+ctr)) : nseq int32 TODO: Int.to_string length in
  let k := (chacha20_rounds state) : nseq int32 TODO: Int.to_string length in
  add_state state k.

Definition chacha20_init (key : nseq int8 TODO: Int.to_string length) (iv : nseq int8 TODO: Int.to_string length) (ctr : int32) : nseq int32 TODO: Int.to_string length :=
  let key_u32 := (to_le_u32s_8 (unsize key)) : nseq int32 TODO: Int.to_string length in
  let iv_u32 := (to_le_u32s_3 (unsize iv)) : nseq int32 TODO: Int.to_string length in
  array_from_list [(@repr WORDSIZE32 1634760805);
    (@repr WORDSIZE32 857760878);
    (@repr WORDSIZE32 2036477234);
    (@repr WORDSIZE32 1797285236);
    index key_u32 (@repr WORDSIZE32 0);
    index key_u32 (@repr WORDSIZE32 1);
    index key_u32 (@repr WORDSIZE32 2);
    index key_u32 (@repr WORDSIZE32 3);
    index key_u32 (@repr WORDSIZE32 4);
    index key_u32 (@repr WORDSIZE32 5);
    index key_u32 (@repr WORDSIZE32 6);
    index key_u32 (@repr WORDSIZE32 7);
    ctr;
    index iv_u32 (@repr WORDSIZE32 0);
    index iv_u32 (@repr WORDSIZE32 1);
    index iv_u32 (@repr WORDSIZE32 2)].

Definition chacha20_key_block (state : nseq int32 TODO: Int.to_string length) : nseq int8 TODO: Int.to_string length :=
  let state := (chacha20_core (@repr WORDSIZE32 0) state) : nseq int32 TODO: Int.to_string length in
  u32s_to_le_bytes state.

Definition chacha20_key_block0 (key : nseq int8 TODO: Int.to_string length) (iv : nseq int8 TODO: Int.to_string length) : nseq int8 TODO: Int.to_string length :=
  let state := (chacha20_init key iv (@repr WORDSIZE32 0)) : nseq int32 TODO: Int.to_string length in
  chacha20_key_block state.

Definition chacha20_encrypt_block (st0 : nseq int32 TODO: Int.to_string length) (ctr : int32) (plain : nseq int8 TODO: Int.to_string length) : nseq int8 TODO: Int.to_string length :=
  let st := (chacha20_core ctr st0) : nseq int32 TODO: Int.to_string length in
  let pl := (to_le_u32s_16 (unsize plain)) : nseq int32 TODO: Int.to_string length in
  let encrypted := (xor_state st pl) : nseq int32 TODO: Int.to_string length in
  u32s_to_le_bytes encrypted.

Definition chacha20_encrypt_last (st0 : nseq int32 TODO: Int.to_string length) (ctr : int32) (plain : seq int8) : Vec_t (int8) (Global_t) :=
  let b := (repeat (@repr WORDSIZE8 0) (@repr WORDSIZE32 64)) : Box_t (nseq int8 TODO: Int.to_string length) (Global_t) in
  let b := (update_array b plain) : nseq int8 TODO: Int.to_string length in
  let b := (chacha20_encrypt_block st0 ctr b) : nseq int8 TODO: Int.to_string length in
  to_vec (b.[(Build_RangeTo_t (len plain))]).

Definition chacha20_update (st0 : nseq int32 TODO: Int.to_string length) (m : seq int8) : Vec_t (int8) (Global_t) :=
  let blocks_out := (new) : Vec_t (int8) (Global_t) in
  let num_blocks := ((len m)./(@repr WORDSIZE32 64)) : uint_size in
  let remainder_len := ((len m).%(@repr WORDSIZE32 64)) : uint_size in
  let blocks_out := (fold (into_iter (Build_Range_t (@repr WORDSIZE32 0)num_blocks)) blocks_out (fun i blocks_out =>
      let b := (chacha20_encrypt_block st0 (cast i) (unwrap (try_into (m.[(Build_Range_t ((@repr WORDSIZE32 64).*i)(((@repr WORDSIZE32 64).*i).+(@repr WORDSIZE32 64)))])))) : nseq int8 TODO: Int.to_string length in
      let blocks_out := (extend_from_slice blocks_out (unsize b)) : Vec_t (int8) (Global_t) in
      blocks_out)) : Vec_t (int8) (Global_t) in
  let blocks_out := (if
      remainder_len<>(@repr WORDSIZE32 0)
    then
      let b := (chacha20_encrypt_last st0 (cast num_blocks) (m.[(Build_RangeFrom_t ((@repr WORDSIZE32 64).*num_blocks))])) : Vec_t (int8) (Global_t) in
      let blocks_out := (extend_from_slice blocks_out (deref b)) : Vec_t (int8) (Global_t) in
      blocks_out
    else
      blocks_out) : Vec_t (int8) (Global_t) in
  blocks_out.

Definition chacha20 (m : seq int8) (key : nseq int8 TODO: Int.to_string length) (iv : nseq int8 TODO: Int.to_string length) (ctr : int32) : Vec_t (int8) (Global_t) :=
  let state := (chacha20_init key iv ctr) : nseq int32 TODO: Int.to_string length in
  chacha20_update state m.
