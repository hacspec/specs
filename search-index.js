var searchIndex = JSON.parse('{\
"example":{"doc":"","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]},\
"hacspec_aes":{"doc":"","tn":["AesNonce","Block","Bytes144","Bytes176","INVALID_KEY_EXPANSION_INDEX","ITERATIONS","KEY_LENGTH","KEY_SCHEDULE_LENGTH","Key128","RCon","ROUNDS","RoundKey","SBox","Word","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","add","add","add","add","add","add","add","add","add","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","aes128_decrypt","aes128_encrypt","aes128_encrypt_block","aes_ctr_key_block","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","concat","concat","concat","concat","concat","concat","concat","concat","concat","create","create","create","create","create","create","create","create","create","declassify_eq","declassify_eq","declassify_eq","declassify_eq","declassify_eq","declassify_eq","declassify_eq","declassify_eq","declassify_eq","default","default","default","default","default","default","default","default","default","divide","divide","divide","divide","divide","divide","divide","divide","divide","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","exp","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_public_array","from_public_array","from_public_array","from_public_array","from_public_array","from_public_array","from_public_array","from_public_array","from_public_array","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_seq","from_seq","from_seq","from_seq","from_seq","from_seq","from_seq","from_seq","from_seq","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","inv","inv","inv","inv","inv","inv","inv","inv","inv","iter","iter","iter","iter","iter","iter","iter","iter","iter","len","len","len","len","len","len","len","len","len","length","length","length","length","length","length","length","length","length","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","new","new","new","new","new","new","new","new","new","not","not","not","not","not","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rem","rem","rem","rem","rem","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","slice","slice","slice","slice","slice","slice","slice","slice","slice","slice_range","slice_range","slice_range","slice_range","slice_range","slice_range","slice_range","slice_range","slice_range","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_le","to_U128s_le","to_U128s_le","to_U128s_le","to_U128s_le","to_U128s_le","to_U128s_le","to_U128s_le","to_U128s_le","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_hex","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_array","to_public_array","to_public_array","to_public_array","to_public_array","to_public_array","to_public_array","to_public_array","to_public_array","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update","update","update","update","update","update","update","update","update_slice","update_slice","update_slice","update_slice","update_slice","update_slice","update_slice","update_slice","update_slice","update_start","update_start","update_start","update_start","update_start","update_start","update_start","update_start","update_start","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","xor_block"],"q":["hacspec_aes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","","","","","Fixed length byte array.","Fixed length byte array.","","Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","","","","","","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Division.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","","","","","","","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","","","","","","","","","","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust arrayalls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % ni":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,0,0,0,0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[7,7,7],7],[[8,8,8],8],[[9,9,9],9],[[9,4,10,11],11],[[9,4,10,11],11],[[9,1],1],[[11,4,10,12,12,12,12,12],[[14,[1,13]]]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[7,7]],[[8,8]],[[9,9]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[7,7]],[[8,8]],[[9,9]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[7,7]],[[8,8]],[[9,9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[16,[15]]]],[2,[[16,[15]]]],[3,[[16,[15]]]],[4,[[16,[15]]]],[5,[[16,[15]]]],[6,[[16,[15]]]],[7,[[16,[15]]]],[8,[[16,[15]]]],[9,[[16,[15]]]],[12,1],[12,2],[12,3],[12,4],[12,5],[12,6],[12,7],[12,8],[12,9],[[1,1],17],[[2,2],17],[[3,3],17],[[4,4],17],[[5,5],17],[[6,6],17],[[7,7],17],[[8,8],17],[[9,9],17],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,1],17],[[2,2],17],[[3,3],17],[[4,4],17],[[5,5],17],[[6,6],17],[[7,7],17],[[8,8],17],[[9,9],17],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,18],1],[[2,18],2],[[3,18],3],[[4,18],4],[[5,18],5],[[6,18],6],[[7,18],7],[[8,18],8],[[9,18],9],[[1,19],20],[[2,19],20],[[3,19],20],[[4,19],20],[[5,19],20],[[6,19],20],[[7,19],20],[[8,19],20],[[9,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[21,1],[21,2],[21,3],[21,4],[21,5],[21,6],[21,7],[21,8],[21,9],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[12,12],1],[[12,12],2],[[12,12],3],[[12,12],4],[[12,12],5],[[12,12],6],[[12,12],7],[[12,12],8],[[12,12],9],[[[22,[12]]],1],[[[22,[12]]],2],[[[22,[12]]],3],[[[22,[12]]],4],[[[22,[12]]],5],[[[22,[12]]],6],[[[22,[12]]],7],[[[22,[12]]],8],[[[22,[12]]],9],[[[23,[15]]],1],[[[23,[15]]],2],[[[23,[15]]],3],[[[23,[15]]],4],[[[23,[15]]],5],[[[23,[15]]],6],[[[23,[15]]],7],[[[23,[15]]],8],[[[23,[15]]],9],[[1,12,12]],[[2,12,12]],[[3,12,12]],[[4,12,12]],[[5,12,12]],[[6,12,12]],[[7,12,12]],[[8,12,12]],[[9,12,12]],[[1,12,12],12],[[2,12,12],12],[[3,12,12],12],[[4,12,12],12],[[5,12,12],12],[[6,12,12],12],[[7,12,12],12],[[8,12,12],12],[[9,12,12],12],[[1,1],17],[[2,2],17],[[3,3],17],[[4,4],17],[[5,5],17],[[6,6],17],[[7,7],17],[[8,8],17],[[9,9],17],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,1],17],[[2,2],17],[[3,3],17],[[4,4],17],[[5,5],17],[[6,6],17],[[7,7],17],[[8,8],17],[[9,9],17],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,12],15],[[1,13],15],[[1,18],15],[[1,24],15],[[1,25]],[[2,18],15],[[2,24],15],[[2,12],15],[[2,25]],[[2,13],15],[[3,18],15],[[3,13],15],[[3,25]],[[3,24],15],[[3,12],15],[[4,24],15],[[4,25]],[[4,18],15],[[4,12],15],[[4,13],15],[[5,24],15],[[5,12],15],[[5,25]],[[5,18],15],[[5,13],15],[[6,25]],[[6,24],15],[[6,12],15],[[6,13],15],[[6,18],15],[[7,18],15],[[7,25]],[[7,24],15],[[7,12],15],[[7,13],15],[[8,24],15],[[8,12],15],[[8,13],15],[[8,25]],[[8,18],15],[[9,24],15],[[9,18],15],[[9,12],15],[[9,25]],[[9,13],15],[[1,18],15],[[1,24],15],[[1,12],15],[[1,13],15],[[2,24],15],[[2,18],15],[[2,13],15],[[2,12],15],[[3,18],15],[[3,24],15],[[3,13],15],[[3,12],15],[[4,13],15],[[4,24],15],[[4,18],15],[[4,12],15],[[5,12],15],[[5,13],15],[[5,18],15],[[5,24],15],[[6,24],15],[[6,18],15],[[6,13],15],[[6,12],15],[[7,13],15],[[7,12],15],[[7,18],15],[[7,24],15],[[8,24],15],[[8,12],15],[[8,13],15],[[8,18],15],[[9,24],15],[[9,13],15],[[9,18],15],[[9,12],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[1,[[26,[15]]]],[2,[[26,[15]]]],[3,[[26,[15]]]],[4,[[26,[15]]]],[5,[[26,[15]]]],[6,[[26,[15]]]],[7,[[26,[15]]]],[8,[[26,[15]]]],[9,[[26,[15]]]],[1,12],[2,12],[3,12],[4,12],[5,12],[6,12],[7,12],[8,12],[9,12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[1,1],17],[[2,2],17],[[3,3],17],[[4,4],17],[[5,5],17],[[6,6],17],[[7,7],17],[[8,8],17],[[9,9],17],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,1],17],[[2,2],17],[[3,3],17],[[4,4],17],[[5,5],17],[[6,6],17],[[7,7],17],[[8,8],17],[[9,9],17],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[7,7,7],7],[[8,8,8],8],[[9,9,9],9],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[1],[2],[3],[4],[5],[6],[7],[8],[9],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,12],12],[[2,12],12],[[3,12],12],[[4,12],12],[[5,12],12],[[6,12],12],[[7,12],12],[[8,12],12],[[9,12],12],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[7,7,7],7],[[8,8,8],8],[[9,9,9],9],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,12,12],1],[[2,12,12],2],[[3,12,12],3],[[4,12,12],4],[[5,12,12],5],[[6,12,12],6],[[7,12,12],7],[[8,12,12],8],[[9,12,12],9],[[1,12]],[[2,12]],[[3,12]],[[4,12]],[[5,12]],[[6,12]],[[7,12]],[[8,12]],[[9,12]],[[1,12]],[[2,12]],[[3,12]],[[4,12]],[[5,12]],[[6,12]],[[7,12]],[[8,12]],[[9,12]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,12,12],[[16,[15]]]],[[2,12,12],[[16,[15]]]],[[3,12,12],[[16,[15]]]],[[4,12,12],[[16,[15]]]],[[5,12,12],[[16,[15]]]],[[6,12,12],[[16,[15]]]],[[7,12,12],[[16,[15]]]],[[8,12,12],[[16,[15]]]],[[9,12,12],[[16,[15]]]],[[1,[22,[12]]],[[16,[15]]]],[[2,[22,[12]]],[[16,[15]]]],[[3,[22,[12]]],[[16,[15]]]],[[4,[22,[12]]],[[16,[15]]]],[[5,[22,[12]]],[[16,[15]]]],[[6,[22,[12]]],[[16,[15]]]],[[7,[22,[12]]],[[16,[15]]]],[[8,[22,[12]]],[[16,[15]]]],[[9,[22,[12]]],[[16,[15]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[7,7,7],7],[[8,8,8],8],[[9,9,9],9],[1,[[16,[27]]]],[2,[[16,[27]]]],[3,[[16,[27]]]],[4,[[16,[27]]]],[5,[[16,[27]]]],[6,[[16,[27]]]],[7,[[16,[27]]]],[8,[[16,[27]]]],[9,[[16,[27]]]],[1,[[16,[27]]]],[2,[[16,[27]]]],[3,[[16,[27]]]],[4,[[16,[27]]]],[5,[[16,[27]]]],[6,[[16,[27]]]],[7,[[16,[27]]]],[8,[[16,[27]]]],[9,[[16,[27]]]],[1,[[16,[10]]]],[2,[[16,[10]]]],[3,[[16,[10]]]],[4,[[16,[10]]]],[5,[[16,[10]]]],[6,[[16,[10]]]],[7,[[16,[10]]]],[8,[[16,[10]]]],[9,[[16,[10]]]],[1,[[16,[28]]]],[2,[[16,[28]]]],[3,[[16,[28]]]],[4,[[16,[28]]]],[5,[[16,[28]]]],[6,[[16,[28]]]],[7,[[16,[28]]]],[8,[[16,[28]]]],[9,[[16,[28]]]],[1,[[16,[15]]]],[2,[[16,[15]]]],[3,[[16,[15]]]],[4,[[16,[15]]]],[5,[[16,[15]]]],[6,[[16,[15]]]],[7,[[16,[15]]]],[8,[[16,[15]]]],[9,[[16,[15]]]],[1,29],[2,29],[3,29],[4,29],[5,29],[6,29],[7,29],[8,29],[9,29],[1,[[16,[10]]]],[2,[[16,[10]]]],[3,[[16,[10]]]],[4,[[16,[10]]]],[5,[[16,[10]]]],[6,[[16,[10]]]],[7,[[16,[10]]]],[8,[[16,[10]]]],[9,[[16,[10]]]],[1,[[16,[28]]]],[2,[[16,[28]]]],[3,[[16,[28]]]],[4,[[16,[28]]]],[5,[[16,[28]]]],[6,[[16,[28]]]],[7,[[16,[28]]]],[8,[[16,[28]]]],[9,[[16,[28]]]],[1,[[16,[15]]]],[2,[[16,[15]]]],[3,[[16,[15]]]],[4,[[16,[15]]]],[5,[[16,[15]]]],[6,[[16,[15]]]],[7,[[16,[15]]]],[8,[[16,[15]]]],[9,[[16,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[2],[3],[4],[5],[6],[7],[8],[9],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[1,12],1],[[2,12],2],[[3,12],3],[[4,12],4],[[5,12],5],[[6,12],6],[[7,12],7],[[8,12],8],[[9,12],9],[[1,12,12,12],1],[[2,12,12,12],2],[[3,12,12,12],3],[[4,12,12,12],4],[[5,12,12,12],5],[[6,12,12,12],6],[[7,12,12,12],7],[[8,12,12,12],8],[[9,12,12,12],9],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[1,1],1]],"p":[[3,"Block"],[3,"Word"],[3,"RoundKey"],[3,"AesNonce"],[3,"SBox"],[3,"RCon"],[3,"Bytes144"],[3,"Bytes176"],[3,"Key128"],[3,"U32"],[6,"ByteSeq"],[15,"usize"],[15,"u8"],[4,"Result"],[3,"U8"],[3,"Seq"],[15,"bool"],[15,"u32"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Range"],[3,"Vec"],[15,"i32"],[3,"RangeFull"],[3,"Iter"],[3,"U128"],[3,"U64"],[3,"String"],[3,"TypeId"]]},\
"hacspec_aes128_gcm":{"doc":"","t":[6,17,5,5],"n":["AesGcmByteSeqResult","INVALID_TAG","decrypt_aes128","encrypt_aes128"],"q":["hacspec_aes128_gcm","","",""],"d":["","","",""],"i":[0,0,0,0],"f":[0,0,[[1,2,3,3,4],5],[[1,2,3,3]]],"p":[[3,"Key128"],[3,"AesNonce"],[6,"ByteSeq"],[3,"Gf128Tag"],[6,"AesGcmByteSeqResult"]]},\
"hacspec_aes_jazz":{"doc":"","tn":["PBytes256","RCon","SBox","absolute","absolute","absolute","add","add","add","add_mod","add_mod","add_mod","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","concat","concat","concat","create","create","create","default","default","default","div","div","div","divide","divide","divide","eq","eq","eq","equal","equal","equal","equal_bm","equal_bm","equal_bm","exp","exp","exp","fmt","fmt","fmt","from","from","from","from_array","from_array","from_array","from_hex","from_hex","from_hex","from_native_slice","from_native_slice","from_native_slice","from_seq","from_seq","from_seq","from_slice","from_slice","from_slice","from_slice_range","from_slice_range","from_slice_range","from_vec","from_vec","from_vec","get_chunk","get_chunk","get_chunk","get_chunk_len","get_chunk_len","get_chunk_len","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into_le_bytes","into_le_bytes","into_le_bytes","inv","inv","inv","iter","iter","iter","len","len","len","length","length","length","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max_val","max_val","max_val","modulo","modulo","modulo","mul","mul","mul","mul_mod","mul_mod","mul_mod","new","new","new","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","num_chunks","num_chunks","partial_cmp","partial_cmp","partial_cmp","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","set_chunk","set_chunk","set_chunk","shl","shl","shl","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","slice","slice","slice","slice_range","slice_range","slice_range","sub","sub","sub","sub_mod","sub_mod","sub_mod","to_be_u32s","to_be_u32s","to_be_u32s","to_be_u64s","to_be_u64s","to_be_u64s","to_hex","to_hex","to_hex","to_le_u32s","to_le_u32s","to_le_u32s","to_le_u64s","to_le_u64s","to_le_u64s","to_owned","to_owned","to_owned","to_u128s_be","to_u128s_be","to_u128s_be","to_u128s_le","to_u128s_le","to_u128s_le","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","update","update","update_slice","update_slice","update_slice","update_start","update_start","update_start","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_aes_jazzd":["Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","","","","<code>(self + rhs) % n</code> (coefficient-wise)","<code>(self + rhs) % n</code> (coefficient-wise)","<code>(self + rhs) % n</code> (coefficient-wise)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>self / rhs</code> (coefficient-wise and wrapping).","<code>self / rhs</code> (coefficient-wise and wrapping).","<code>self / rhs</code> (coefficient-wise and wrapping).","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code> (coefficient-wise and …","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code> (coefficient-wise and …","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code> (coefficient-wise and …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","<strong>Not implemented</strong>","<strong>Not implemented</strong>","<strong>Not implemented</strong>","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented. <strong>Not </strong>…","Return largest value that can be represented. <strong>Not </strong>…","Return largest value that can be represented. <strong>Not </strong>…","<code>self % n</code> (coefficient-wise)","<code>self % n</code> (coefficient-wise)","<code>self % n</code> (coefficient-wise)","","","","<code>(self * rhs) % n</code> (coefficient-wise) Note that the …","<code>(self * rhs) % n</code> (coefficient-wise) Note that the …","<code>(self * rhs) % n</code> (coefficient-wise) Note that the …","","","","","","","","","","","","","","","","<code>(self ^ exp) % n</code> (coefficient-wise) Note that the …","<code>(self ^ exp) % n</code> (coefficient-wise) Note that the …","<code>(self ^ exp) % n</code> (coefficient-wise) Note that the …","<strong>Not implemented</strong>.","<strong>Not implemented</strong>.","<strong>Not implemented</strong>.","","","","","","","","","","<code>self % n</code> (coefficient-wise)","<code>self % n</code> (coefficient-wise)","<code>self % n</code> (coefficient-wise)","","","","","","","","","","<code>(self - rhs) % n</code> (coefficient-wise)","<code>(self - rhs) % n</code> (coefficient-wise)","<code>(self - rhs) % n</code> (coefficient-wise)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>self + rhs</code> (coefficient-wise and wrapping)","<code>self + rhs</code> (coefficient-wise and wrapping)","<code>self + rhs</code> (coefficient-wise and wrapping)","<code>self + rhs</code> (coefficient-wise and wrapping)","<code>self + rhs</code> (coefficient-wise and wrapping)","<code>self + rhs</code> (coefficient-wise and wrapping)","<code>self * rhs</code> (coefficient-wise and wrapping)","<code>self * rhs</code> (coefficient-wise and wrapping)","<code>self * rhs</code> (coefficient-wise and wrapping)","<code>self - rhs</code> (coefficient-wise and wrapping)","<code>self - rhs</code> (coefficient-wise and wrapping)","<code>self - rhs</code> (coefficient-wise and wrapping)"],"i":[0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,1,1,1,1,2,2,2,2,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3],"f":[0,0,0,[1,1],[2,2],[3,3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[1,1]],[[2,2]],[[3,3]],[[1,1]],[[2,2]],[[3,3]],[[1,1]],[[2,2]],[[3,3]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[]],[[]],[[]],[[1,1],4],[[2,2],4],[[3,3],4],[1,[[6,[5]]]],[2,[[6,[5]]]],[3,[[6,[5]]]],[7,1],[7,2],[7,3],[[],1],[[],2],[[],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],8],[[2,2],8],[[3,3],8],[[1,1],8],[[2,2],8],[[3,3],8],[[1,1],1],[[2,2],2],[[3,3],3],[[1,9],1],[[2,9],2],[[3,9],3],[[1,10],11],[[2,10],11],[[3,10],11],[[]],[[]],[[]],[[],1],[[],2],[[],3],[12,1],[12,2],[12,3],[[],1],[[],2],[[],3],[[],1],[[],2],[[],3],[[7,7],1],[[7,7],2],[[7,7],3],[[[13,[7]]],1],[[[13,[7]]],2],[[[13,[7]]],3],[[[14,[5]]],1],[[[14,[5]]],2],[[[14,[5]]],3],[[1,7,7]],[[2,7,7]],[[3,7,7]],[[1,7,7],7],[[2,7,7],7],[[3,7,7],7],[[1,1],8],[[2,2],8],[[3,3],8],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],8],[[2,2],8],[[3,3],8],[[1,1],1],[[2,2],2],[[3,3],3],[[1,15],5],[[1,16]],[[1,7],5],[[1,9],5],[[1,5],5],[[2,15],5],[[2,5],5],[[2,7],5],[[2,16]],[[2,9],5],[[3,7],5],[[3,16]],[[3,9],5],[[3,15],5],[[3,5],5],[[1,15],5],[[1,7],5],[[1,9],5],[[1,5],5],[[2,5],5],[[2,9],5],[[2,15],5],[[2,7],5],[[3,7],5],[[3,5],5],[[3,15],5],[[3,9],5],[[]],[[]],[[]],[1,[[6,[5]]]],[2,[[6,[5]]]],[3,[[6,[5]]]],[[1,1],1],[[2,2],2],[[3,3],3],[1,[[17,[5]]]],[2,[[17,[5]]]],[3,[[17,[5]]]],[1,7],[2,7],[3,7],[[],7],[[],7],[[],7],[[1,1],8],[[2,2],8],[[3,3],8],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],8],[[2,2],8],[[3,3],8],[[1,1],1],[[2,2],2],[[3,3],3],[[],1],[[],2],[[],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[],1],[[],2],[[],3],[1],[2],[3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,7],7],[[2,7],7],[[3,7],7],[[1,1],[[18,[4]]]],[[2,2],[[18,[4]]]],[[3,3],[[18,[4]]]],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,7,7],1],[[2,7,7],2],[[3,7,7],3],[[1,7]],[[2,7]],[[3,7]],[[1,7]],[[2,7]],[[3,7]],[[1,1],1],[[2,2],2],[[3,3],3],[[1,7,7],[[6,[5]]]],[[2,7,7],[[6,[5]]]],[[3,7,7],[[6,[5]]]],[[1,[13,[7]]],[[6,[5]]]],[[2,[13,[7]]],[[6,[5]]]],[[3,[13,[7]]],[[6,[5]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[1,[[6,[9]]]],[2,[[6,[9]]]],[3,[[6,[9]]]],[1,[[6,[19]]]],[2,[[6,[19]]]],[3,[[6,[19]]]],[1,20],[2,20],[3,20],[1,[[6,[9]]]],[2,[[6,[9]]]],[3,[[6,[9]]]],[1,[[6,[19]]]],[2,[[6,[19]]]],[3,[[6,[19]]]],[[]],[[]],[[]],[1,[[6,[21]]]],[2,[[6,[21]]]],[3,[[6,[21]]]],[1,[[6,[21]]]],[2,[[6,[21]]]],[3,[[6,[21]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[],23],[[1,7],1],[[2,7],2],[[3,7],3],[[1,7,7,7],1],[[2,7,7,7],2],[[3,7,7,7],3],[1,1],[2,2],[3,3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3]],"p":[[3,"SBox"],[3,"RCon"],[3,"PBytes256"],[4,"Ordering"],[15,"u8"],[3,"Seq"],[15,"usize"],[15,"bool"],[15,"u32"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Range"],[3,"Vec"],[15,"i32"],[3,"RangeFull"],[3,"Iter"],[4,"Option"],[15,"u64"],[3,"String"],[15,"u128"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_bls12_381":{"doc":"","tn":["ArrayFp","Fp","Fp12","Fp2","Fp6","FpCanvas","G1","G2","ONE","ONE","ONE","ONE","Scalar","ScalarCanvas","SerializedFp","TWO","TWO","TWO","TWO","ZERO","ZERO","ZERO","ZERO","absolute","absolute","absolute","absolute","absolute","absolute","add","add","add","add","add","add","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","bit","bit","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","comp_eq","comp_eq","comp_eq","comp_eq","comp_gt","comp_gt","comp_gt","comp_gt","comp_gte","comp_gte","comp_gte","comp_gte","comp_lt","comp_lt","comp_lt","comp_lt","comp_lte","comp_lte","comp_lte","comp_lte","comp_ne","comp_ne","comp_ne","comp_ne","concat","concat","create","create","declassify","declassify","declassify_eq","declassify_eq","default","default","default","default","default","default","div","div","div","div","divide","divide","divide","divide","divide","divide","eq","eq","eq","eq","equal","equal","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fp12add","fp12conjugate","fp12exp","fp12fromfp6","fp12inv","fp12mul","fp12neg","fp12sub","fp12zero","fp2add","fp2conjugate","fp2fromfp","fp2inv","fp2mul","fp2neg","fp2sub","fp2zero","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_le","from_byte_seq_le","from_canvas","from_canvas","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_native_slice","from_native_slice","from_public_array","from_public_array","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_le","from_public_byte_seq_le","from_public_slice","from_public_slice","from_secret_literal","from_secret_literal","from_seq","from_seq","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_slice","from_slice","from_slice_range","from_slice_range","from_vec","from_vec","g1add","g1double","g1mul","g1neg","g2add","g2double","g2mul","g2neg","get_bit","get_bit","get_bit","get_bit","get_chunk","get_chunk","get_chunk_len","get_chunk_len","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into_canvas","into_canvas","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","iter","iter","len","len","length","length","less_than","less_than","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max","max","max_val","max_val","max_val","max_val","max_val","max_val","max_value","max_value","modulo","modulo","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","neg","neg","new","new","not","not","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","num_chunks","pairing","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow2","pow2","pow2","pow2","pow_felem","pow_felem","pow_felem","pow_felem","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rem","rem","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","set","set","set","set","set_bit","set_bit","set_bit","set_bit","set_chunk","set_chunk","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","slice","slice","slice_range","slice_range","sub","sub","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_le","to_be_U32s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_le","to_byte_seq_le","to_hex","to_le_U32s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_array","to_public_array","to_public_byte_seq_be","to_public_byte_seq_be","to_public_byte_seq_le","to_public_byte_seq_le","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update","update","update_slice","update_slice","update_start","update_start","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_blsd":["Fixed length byte array.","","","","","","","","","","","","","","Fixed length byte array.","","","","","","","","","<code>|self|</code>","<code>|self|</code>","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code>","<code>|self|</code>","","","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","","","","","","","","","","","","","","","","","","","Division.","Division.","Division.","Division.","Division.","Division.","","","","","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Read hex string to Bytes.","Read hex string to Bytes.","","","","","","","","","","","","","","","","","","","","","Create an array from a regular Rust array.","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Invert self modulo n.","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","Invert self modulo n.","Invert self modulo n.","","Invert self modulo n.","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","","","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","Negate the value modulo max: <code>mod_value - self</code>","Negate the value modulo max: <code>mod_value - self</code>","","","","","","","","","","","","","","","","","","","","","","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","","","","","","","","","","","","","","","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","","","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,3,4,0,0,0,1,2,3,4,1,2,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,2,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,6,5,6,2,4,5,6,1,2,5,6,3,4,1,2,3,4,1,2,5,6,3,4,1,2,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,1,1,2,2,2,5,6,3,3,3,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,2,5,6,3,3,3,4,4,5,6,1,2,3,4,1,2,3,4,2,4,2,4,1,2,5,6,3,4,1,2,3,4,1,2,3,4,1,1,2,2,3,3,4,4,5,6,5,6,1,2,3,4,2,4,5,6,2,4,5,6,1,2,3,4,5,6,5,6,5,6,0,0,0,0,0,0,0,0,1,2,3,4,5,6,5,6,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,5,5,5,5,5,6,6,6,6,6,5,5,5,5,6,6,6,6,1,1,1,2,2,5,6,3,3,3,4,4,2,4,1,1,2,2,5,6,3,3,4,4,5,6,5,6,5,6,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,2,4,1,2,5,6,3,4,1,3,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,2,4,5,6,1,2,5,6,3,4,1,2,5,6,3,4,5,6,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,6,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,5,6,5,6,1,2,5,6,3,4,1,2,5,6,3,4,5,5,5,5,1,2,5,6,3,4,1,2,3,4,2,4,5,5,5,1,2,5,6,3,4,1,2,5,6,3,4,5,6,2,4,2,4,1,2,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,5,6,5,6,5,6,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4,1,2,5,6,3,4],"f":[0,0,0,0,0,0,0,0,[[],1],[[],2],[[],3],[[],4],0,0,0,[[],1],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[1,1],[2,2],[5,5],[6,6],[3,3],[4,4],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[5,5,5],5],[[6,6,6],6],[[3,3,3],3],[[4,4,4],4],[[1,7],8],[[2,7],8],[[3,7],8],[[4,7],8],[[1,1]],[[2,2]],[[5,5]],[[6,6]],[[3,3]],[[4,4]],[[1,1]],[[2,2]],[[5,5]],[[6,6]],[[3,3]],[[4,4]],[[1,1]],[[2,2]],[[5,5]],[[6,6]],[[3,3]],[[4,4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[5,5],[6,6],[3,3],[4,4],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],9],[[2,2],9],[[3,3],9],[[4,4],9],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[5,[[11,[10]]]],[6,[[11,[12]]]],[7,5],[7,6],[2,13],[4,13],[[5,5],8],[[6,6],8],[[],1],[[],2],[[],5],[[],6],[[],3],[[],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[1,1],8],[[2,2],8],[[5,5],8],[[6,6],8],[[3,3],8],[[4,4],8],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[1,14],1],[[2,14],2],[[5,14],5],[[6,14],6],[[3,14],3],[[4,14],4],[[1,15],16],[[1,15],16],[[1,15],16],[[2,15],16],[[2,15],16],[[2,15],16],[[5,15],16],[[6,15],16],[[3,15],16],[[3,15],16],[[3,15],16],[[4,15],16],[[4,15],16],[[4,15],16],[[17,17],17],[17,17],[[17,4],17],[18,17],[17,17],[[17,17],17],[17,17],[[17,17],17],[[],17],[[19,19],19],[19,19],[2,19],[19,19],[[19,19],19],[19,19],[[19,19],19],[[],19],[20,1],[[]],[13,1],[1,2],[[]],[[]],[[]],[20,3],[[]],[13,3],[[]],[3,4],[[],5],[[],6],[[],1],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[[[21,[10]]],2],[[[21,[10]]],4],[1,2],[3,4],[22,1],[22,2],[22,5],[22,6],[22,3],[22,4],[23,1],[23,2],[23,3],[23,4],[[],1],[[],2],[[],3],[[],4],[24,1],[24,1],[24,2],[24,2],[24,3],[24,3],[24,4],[24,4],[[],5],[[],6],[[],5],[[],6],[[[21,[25]]],1],[[[21,[25]]],2],[[[21,[25]]],3],[[[21,[25]]],4],[[[21,[25]]],2],[[[21,[25]]],4],[[],5],[[],6],[26,2],[26,4],[[],5],[[],6],[27,1],[27,2],[27,3],[27,4],[[7,7],5],[[7,7],6],[[[28,[7]]],5],[[[28,[7]]],6],[[[29,[10]]],5],[[[29,[12]]],6],[[30,30],30],[30,30],[[4,30],30],[30,30],[[31,31],31],[31,31],[[4,31],31],[31,31],[[1,7],1],[[2,7],2],[[3,7],3],[[4,7],4],[[5,7,7]],[[6,7,7]],[[5,7,7],7],[[6,7,7],7],[[1,1],8],[[2,2],8],[[5,5],8],[[6,6],8],[[3,3],8],[[4,4],8],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[1,1],8],[[2,2],8],[[5,5],8],[[6,6],8],[[3,3],8],[[4,4],8],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[5,32],10],[[5,14],10],[[5,33]],[[5,7],10],[[5,25],10],[[6,25],12],[[6,32],12],[[6,33]],[[6,14],12],[[6,7],12],[[5,14],10],[[5,25],10],[[5,32],10],[[5,7],10],[[6,32],12],[[6,7],12],[[6,25],12],[[6,14],12],[[]],[1,20],[1,13],[2,1],[[]],[[]],[[]],[3,20],[3,13],[[]],[[]],[4,3],[2,1],[4,3],[[1,1],1],[[1,1],1],[[2,2],2],[2,2],[[5,5],5],[[6,6],6],[[3,3],3],[[3,3],3],[[4,4],4],[4,4],[5,[[34,[10]]]],[6,[[34,[12]]]],[5,7],[6,7],[[],7],[[],7],[[1,1],8],[[2,2],8],[[5,5],8],[[6,6],8],[[3,3],8],[[4,4],8],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[1,1],8],[[2,2],8],[[5,5],8],[[6,6],8],[[3,3],8],[[4,4],8],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[],1],[[],3],[[],1],[[],2],[[],5],[[],6],[[],3],[[],4],[[],1],[[],3],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[5,5,5],5],[[6,6,6],6],[[3,3,3],3],[[4,4,4],4],[2,2],[4,4],[[],5],[[],6],[1],[2],[5],[6],[3],[4],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[5,7],7],[[6,7],7],[[30,31],17],[[1,1],[[35,[9]]]],[[2,2],[[35,[9]]]],[[3,3],[[35,[9]]]],[[4,4],[[35,[9]]]],[[1,24,1],1],[[2,24],2],[[3,24,3],3],[[4,24],4],[7,1],[7,2],[7,3],[7,4],[[1,1,1],1],[[2,2],2],[[3,3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[5,5,5],5],[[6,6,6],6],[[3,3,3],3],[[4,4,4],4],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[1,7],1],[[2,7],2],[[3,7],3],[[4,7],4],[[1,7],1],[[2,7],2],[[3,7],3],[[4,7],4],[[1,7,1,7],1],[[2,7,2,7],2],[[3,7,3,7],3],[[4,7,4,7],4],[[1,1,7],1],[[2,2,7],2],[[3,3,7],3],[[4,4,7],4],[[5,7,7],5],[[6,7,7],6],[[1,7]],[[2,7]],[[5,7]],[[6,7]],[[3,7]],[[4,7]],[[1,7]],[[2,7]],[[5,7]],[[6,7]],[[3,7]],[[4,7]],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[5,7,7],[[11,[10]]]],[[6,7,7],[[11,[12]]]],[[5,[28,[7]]],[[11,[10]]]],[[6,[28,[7]]],[[11,[12]]]],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[5,5,5],5],[[6,6,6],6],[[3,3,3],3],[[4,4,4],4],[5,[[11,[26]]]],[5,[[11,[26]]]],[5,[[11,[36]]]],[5,[[11,[12]]]],[1],[2,[[29,[25]]]],[5,[[11,[10]]]],[6,[[11,[10]]]],[3],[4,[[29,[25]]]],[1,[[11,[10]]]],[2,[[11,[10]]]],[3,[[11,[10]]]],[4,[[11,[10]]]],[2,[[11,[10]]]],[4,[[11,[10]]]],[5,23],[5,[[11,[36]]]],[5,[[11,[12]]]],[1],[2,[[29,[25]]]],[5,[[11,[10]]]],[6,[[11,[10]]]],[3],[4,[[29,[25]]]],[[]],[[]],[[]],[[]],[[]],[[]],[5],[6],[2,[[11,[25]]]],[4,[[11,[25]]]],[2,[[11,[25]]]],[4,[[11,[25]]]],[[],23],[[],23],[[],23],[[],23],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],38],[[],38],[[],38],[[],38],[[],38],[[],38],[[5,7],5],[[6,7],6],[[5,7,7,7],5],[[6,7,7,7],6],[5,5],[6,6],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[5,5],5],[[6,6],6],[[3,3],3],[[4,4],4]],"p":[[3,"FpCanvas"],[3,"Fp"],[3,"ScalarCanvas"],[3,"Scalar"],[3,"SerializedFp"],[3,"ArrayFp"],[15,"usize"],[15,"bool"],[4,"Ordering"],[3,"U8"],[3,"Seq"],[3,"U64"],[3,"BigInt"],[15,"u32"],[3,"Formatter"],[6,"Result"],[6,"Fp12"],[6,"Fp6"],[6,"Fp2"],[3,"BigUint"],[8,"SeqTrait"],[15,"str"],[3,"String"],[15,"u128"],[15,"u8"],[3,"U128"],[15,"i128"],[3,"Range"],[3,"Vec"],[6,"G1"],[6,"G2"],[15,"i32"],[3,"RangeFull"],[3,"Iter"],[4,"Option"],[3,"U32"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_bls12_381_hash":{"doc":"Hashing to Elliptic Curves: …","tn":["ArrFp","FpHash","FpHashCanvas","ONE","ONE","TWO","TWO","ZERO","ZERO","absolute","absolute","absolute","add","add","add","add_mod","add_mod","add_mod","bit","bit","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","comp_eq","comp_eq","comp_gt","comp_gt","comp_gte","comp_gte","comp_lt","comp_lt","comp_lte","comp_lte","comp_ne","comp_ne","concat","create","declassify","declassify_eq","default","default","default","div","div","divide","divide","divide","eq","eq","equal","equal","equal","equal_bm","equal_bm","equal_bm","exp","exp","exp","expand_message_xmd","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fp2_hash_to_field","fp2_is_square","fp2_sgn0","fp2_sqrt","fp_hash_to_field","from","from","from","from","from","from","from_array","from_be_bytes","from_be_bytes","from_byte_seq_be","from_byte_seq_be","from_byte_seq_le","from_canvas","from_hex","from_hex","from_hex","from_hex_string","from_hex_string","from_le_bytes","from_le_bytes","from_literal","from_literal","from_literal","from_literal","from_native_slice","from_public_array","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_le","from_public_slice","from_secret_literal","from_seq","from_signed_literal","from_signed_literal","from_slice","from_slice_range","from_vec","g1_encode_to_curve_sswu","g1_encode_to_curve_svdw","g1_hash_to_curve_sswu","g1_hash_to_curve_svdw","g2_curve_func","g2_encode_to_curve_sswu","g2_encode_to_curve_svdw","g2_hash_to_curve_sswu","g2_hash_to_curve_svdw","get_bit","get_bit","get_chunk","get_chunk_len","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into_canvas","inv","inv","inv","inv","inv","iter","len","length","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max","max_val","max_val","max_val","max_value","modulo","modulo","modulo","mul","mul","mul","mul_mod","mul_mod","mul_mod","neg","new","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","partial_cmp","partial_cmp","pow","pow","pow2","pow2","pow_felem","pow_felem","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","rem","rem","rem","rotate_left","rotate_left","rotate_right","rotate_right","set","set","set_bit","set_bit","set_chunk","shl","shl","shl","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","slice","slice_range","sub","sub","sub","sub_mod","sub_mod","sub_mod","to_be_bytes","to_be_bytes","to_be_bytes","to_byte_seq_be","to_byte_seq_be","to_byte_seq_le","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_public_array","to_public_byte_seq_be","to_public_byte_seq_le","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","update_slice","update_start","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_bls12_381_hashd":["Fixed length byte array.","","","","","","","","","<code>|self|</code>","<code>|self|</code>","<code>|self|</code> (coefficient-wise)","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","","","","","","","","","","","","","","","","","","","","","","","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","","","","","","","","","","Division.","Division.","Division.","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Read hex string to Bytes.","","","","","","","","","","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","","","","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Invert self modulo n.","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","Invert self modulo n.","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","Negate the value modulo max: <code>mod_value - self</code>","","","","","","","","","","","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns 2 to the power of the argument","Returns 2 to the power of the argument","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","","","","","","","","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,2,1,2,1,2,1,2,3,1,2,3,1,2,3,1,2,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,3,2,3,1,2,3,1,2,1,2,3,1,2,1,2,3,1,2,3,1,2,3,0,1,1,1,2,2,2,3,0,0,0,0,0,1,1,1,2,2,3,3,1,2,1,2,2,2,1,2,3,1,2,1,2,1,1,2,2,3,3,1,2,2,3,2,3,1,2,3,3,3,0,0,0,0,0,0,0,0,0,1,2,3,3,1,2,3,1,2,3,1,2,3,1,2,3,3,3,3,3,3,3,3,3,3,1,1,1,2,2,3,2,1,1,2,2,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,2,1,2,3,1,1,2,3,1,2,3,1,2,3,2,3,1,2,3,1,2,3,3,1,2,1,2,1,2,1,2,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,3,1,2,3,1,2,3,1,2,3,3,3,1,2,3,1,2,3,1,2,3,1,2,2,1,2,3,1,2,3,3,2,2,1,2,1,2,3,1,2,3,1,2,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3],"f":[0,0,0,[[],1],[[],2],[[],1],[[],2],[[],1],[[],2],[1,1],[2,2],[3,3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[1,4],5],[[2,4],5],[[1,1]],[[2,2]],[[3,3]],[[1,1]],[[2,2]],[[3,3]],[[1,1]],[[2,2]],[[3,3]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[]],[[]],[[]],[[1,1],6],[[2,2],6],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[3,[[8,[7]]]],[4,3],[2,9],[[3,3],5],[[],1],[[],2],[[],3],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],5],[[2,2],5],[[1,1],5],[[2,2],5],[[3,3],5],[[1,1],1],[[2,2],2],[[3,3],3],[[1,10],1],[[2,10],2],[[3,10],3],[[11,11,4],11],[[1,12],13],[[1,12],13],[[1,12],13],[[2,12],13],[[2,12],13],[[2,12],13],[[3,12],13],[[11,11,4],[[8,[14]]]],[14,5],[14,5],[14,14],[[11,11,4],[[8,[15]]]],[9,1],[16,1],[[]],[1,2],[[]],[[]],[[],3],[[],1],[[],2],[[],1],[[],2],[[[18,[17]]],2],[1,2],[19,1],[19,2],[19,3],[20,1],[20,2],[[],1],[[],2],[21,1],[21,1],[21,2],[21,2],[[],3],[[],3],[[[18,[22]]],1],[[[18,[22]]],2],[[[18,[22]]],2],[[],3],[23,2],[[],3],[24,1],[24,2],[[4,4],3],[[[25,[4]]],3],[[[26,[7]]],3],[[11,11],27],[[11,11],27],[[11,11],27],[[11,11],27],[14,14],[[11,11],28],[[11,11],28],[[11,11],28],[[11,11],28],[[1,4],1],[[2,4],2],[[3,4,4]],[[3,4,4],4],[[1,1],5],[[2,2],5],[[3,3],5],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],5],[[2,2],5],[[3,3],5],[[1,1],1],[[2,2],2],[[3,3],3],[[3,29],7],[[3,4],7],[[3,22],7],[[3,10],7],[[3,30]],[[3,29],7],[[3,10],7],[[3,4],7],[[3,22],7],[1,9],[1,16],[[]],[[]],[2,1],[[]],[2,1],[[1,1],1],[[1,1],1],[[2,2],2],[2,2],[[3,3],3],[3,[[31,[7]]]],[3,4],[[],4],[[1,1],5],[[2,2],5],[[3,3],5],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],5],[[2,2],5],[[3,3],5],[[1,1],1],[[2,2],2],[[3,3],3],[[],1],[[],1],[[],2],[[],3],[[],1],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[2,2],[[],3],[1],[2],[3],[[1,1],1],[[2,2],2],[[3,3],3],[[3,4],4],[[1,1],[[32,[6]]]],[[2,2],[[32,[6]]]],[[1,21,1],1],[[2,21],2],[4,1],[4,2],[[1,1,1],1],[[2,2],2],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,4],1],[[2,4],2],[[1,4],1],[[2,4],2],[[1,4,1,4],1],[[2,4,2,4],2],[[1,1,4],1],[[2,2,4],2],[[3,4,4],3],[[1,4]],[[2,4]],[[3,4]],[[1,4]],[[2,4]],[[3,4]],[[1,1],1],[[2,2],2],[[3,3],3],[[3,4,4],[[8,[7]]]],[[3,[25,[4]]],[[8,[7]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[1],[2,[[26,[22]]]],[3,[[8,[17]]]],[1,[[8,[17]]]],[2,[[8,[17]]]],[2,[[8,[17]]]],[1],[2,[[26,[22]]]],[3,[[8,[17]]]],[[]],[[]],[[]],[3],[2,[[8,[22]]]],[2,[[8,[22]]]],[[],20],[[],20],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],34],[[],34],[[],34],[[3,4],3],[[3,4,4,4],3],[3,3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3]],"p":[[3,"FpHashCanvas"],[3,"FpHash"],[3,"ArrFp"],[15,"usize"],[15,"bool"],[4,"Ordering"],[3,"U64"],[3,"Seq"],[3,"BigInt"],[15,"u32"],[6,"ByteSeq"],[3,"Formatter"],[6,"Result"],[6,"Fp2"],[3,"Fp"],[3,"BigUint"],[3,"U8"],[8,"SeqTrait"],[15,"str"],[3,"String"],[15,"u128"],[15,"u8"],[3,"U128"],[15,"i128"],[3,"Range"],[3,"Vec"],[6,"G1"],[6,"G2"],[15,"i32"],[3,"RangeFull"],[3,"Iter"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_chacha20":{"doc":"","t":[3,3,3,3,6,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Block","ChaChaIV","ChaChaKey","Constants","ConstantsIdx","State","StateIdx","absolute","absolute","absolute","absolute","absolute","add","add","add","add","add","add_mod","add_mod","add_mod","add_mod","add_mod","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chacha20","chacha20_constants_init","chacha20_core","chacha20_encrypt_block","chacha20_encrypt_last","chacha20_init","chacha20_key_block","chacha20_key_block0","chacha20_quarter_round","chacha20_rounds","chacha20_update","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","concat","concat","concat","concat","concat","create","create","create","create","create","declassify_eq","declassify_eq","declassify_eq","declassify_eq","declassify_eq","default","default","default","default","default","divide","divide","divide","divide","divide","equal","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_array","from_array","from_array","from_array","from_array","from_hex","from_hex","from_hex","from_hex","from_hex","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_public_array","from_public_array","from_public_array","from_public_array","from_public_array","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_seq","from_seq","from_seq","from_seq","from_seq","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_vec","from_vec","from_vec","from_vec","from_vec","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","inv","inv","inv","inv","inv","iter","iter","iter","iter","iter","len","len","len","len","len","length","length","length","length","length","less_than","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max_val","max_val","max_val","max_val","max_val","modulo","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","new","new","new","new","new","not","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rem","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","slice","slice","slice","slice","slice","slice_range","slice_range","slice_range","slice_range","slice_range","sub","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_le","to_U128s_le","to_U128s_le","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_hex","to_hex","to_hex","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_array","to_public_array","to_public_array","to_public_array","to_public_array","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update","update","update","update","update","update_slice","update_slice","update_slice","update_slice","update_slice","update_start","update_start","update_start","update_start","update_start","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_chachad":["Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","","Fixed length byte array.","","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Division.","Division.","Division.","Division.","Division.","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","","","","","","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","","","","","","","","","","","","","","","","","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,1,2,3,4,5,3,4,5,3,4,5,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5],"f":[0,0,0,0,0,0,0,[1,1],[2,2],[3,3],[4,4],[5,5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[5,4,6,7],7],[[],2],[[8,1],1],[[1,8,3],3],[[1,8,7],7],[[5,4,8],1],[1,3],[[5,4],3],[[9,9,9,9,1],1],[1,1],[[1,7],7],[1,1],[2,2],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[]],[[]],[1,[[10,[8]]]],[2,[[10,[8]]]],[3,[[10,[11]]]],[4,[[10,[11]]]],[5,[[10,[11]]]],[12,1],[12,2],[12,3],[12,4],[12,5],[[1,1],13],[[2,2],13],[[3,3],13],[[4,4],13],[[5,5],13],[[],1],[[],2],[[],3],[[],4],[[],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],13],[[2,2],13],[[3,3],13],[[4,4],13],[[5,5],13],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,6],1],[[2,6],2],[[3,6],3],[[4,6],4],[[5,6],5],[[1,14],15],[[2,14],15],[[3,14],15],[[4,14],15],[[5,14],15],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[[],5],[16,1],[16,2],[16,3],[16,4],[16,5],[[],1],[[],2],[[],3],[[],4],[[],5],[[],1],[[],2],[[],3],[[],4],[[],5],[[],1],[[],2],[[],3],[[],4],[[],5],[[],1],[[],2],[[],3],[[],4],[[],5],[[12,12],1],[[12,12],2],[[12,12],3],[[12,12],4],[[12,12],5],[[[17,[12]]],1],[[[17,[12]]],2],[[[17,[12]]],3],[[[17,[12]]],4],[[[17,[12]]],5],[[[18,[8]]],1],[[[18,[8]]],2],[[[18,[11]]],3],[[[18,[11]]],4],[[[18,[11]]],5],[[1,12,12]],[[2,12,12]],[[3,12,12]],[[4,12,12]],[[5,12,12]],[[1,12,12],12],[[2,12,12],12],[[3,12,12],12],[[4,12,12],12],[[5,12,12],12],[[1,1],13],[[2,2],13],[[3,3],13],[[4,4],13],[[5,5],13],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],13],[[2,2],13],[[3,3],13],[[4,4],13],[[5,5],13],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,12],8],[[1,19],8],[[1,6],8],[[1,20],8],[[1,21]],[[2,12],8],[[2,19],8],[[2,6],8],[[2,20],8],[[2,21]],[[3,19],11],[[3,20],11],[[3,6],11],[[3,21]],[[3,12],11],[[4,20],11],[[4,6],11],[[4,19],11],[[4,12],11],[[4,21]],[[5,20],11],[[5,6],11],[[5,21]],[[5,12],11],[[5,19],11],[[1,20],8],[[1,6],8],[[1,19],8],[[1,12],8],[[2,12],8],[[2,19],8],[[2,6],8],[[2,20],8],[[3,20],11],[[3,6],11],[[3,19],11],[[3,12],11],[[4,19],11],[[4,12],11],[[4,6],11],[[4,20],11],[[5,19],11],[[5,6],11],[[5,12],11],[[5,20],11],[[]],[[]],[[]],[[]],[[]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[1,[[22,[8]]]],[2,[[22,[8]]]],[3,[[22,[11]]]],[4,[[22,[11]]]],[5,[[22,[11]]]],[1,12],[2,12],[3,12],[4,12],[5,12],[[],12],[[],12],[[],12],[[],12],[[],12],[[1,1],13],[[2,2],13],[[3,3],13],[[4,4],13],[[5,5],13],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],13],[[2,2],13],[[3,3],13],[[4,4],13],[[5,5],13],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[],1],[[],2],[[],3],[[],4],[[],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[],1],[[],2],[[],3],[[],4],[[],5],[1],[2],[3],[4],[5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,12],12],[[2,12],12],[[3,12],12],[[4,12],12],[[5,12],12],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,12,12],1],[[2,12,12],2],[[3,12,12],3],[[4,12,12],4],[[5,12,12],5],[[1,12]],[[2,12]],[[3,12]],[[4,12]],[[5,12]],[[1,12]],[[2,12]],[[3,12]],[[4,12]],[[5,12]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,12,12],[[10,[8]]]],[[2,12,12],[[10,[8]]]],[[3,12,12],[[10,[11]]]],[[4,12,12],[[10,[11]]]],[[5,12,12],[[10,[11]]]],[[1,[17,[12]]],[[10,[8]]]],[[2,[17,[12]]],[[10,[8]]]],[[3,[17,[12]]],[[10,[11]]]],[[4,[17,[12]]],[[10,[11]]]],[[5,[17,[12]]],[[10,[11]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[3,[[10,[23]]]],[4,[[10,[23]]]],[5,[[10,[23]]]],[3,[[10,[23]]]],[4,[[10,[23]]]],[5,[[10,[23]]]],[3,[[10,[8]]]],[4,[[10,[8]]]],[5,[[10,[8]]]],[3,[[10,[24]]]],[4,[[10,[24]]]],[5,[[10,[24]]]],[1,[[10,[11]]]],[2,[[10,[11]]]],[3,[[10,[11]]]],[4,[[10,[11]]]],[5,[[10,[11]]]],[3,25],[4,25],[5,25],[3,[[10,[8]]]],[4,[[10,[8]]]],[5,[[10,[8]]]],[3,[[10,[24]]]],[4,[[10,[24]]]],[5,[[10,[24]]]],[1,[[10,[11]]]],[2,[[10,[11]]]],[3,[[10,[11]]]],[4,[[10,[11]]]],[5,[[10,[11]]]],[[]],[[]],[[]],[[]],[[]],[1],[2],[3],[4],[5],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],27],[[],27],[[],27],[[],27],[[],27],[[1,12],1],[[2,12],2],[[3,12],3],[[4,12],4],[[5,12],5],[[1,12,12,12],1],[[2,12,12,12],2],[[3,12,12,12],3],[[4,12,12,12],4],[[5,12,12,12],5],[1,1],[2,2],[3,3],[4,4],[5,5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5]],"p":[[3,"State"],[3,"Constants"],[3,"Block"],[3,"ChaChaIV"],[3,"ChaChaKey"],[15,"u32"],[6,"ByteSeq"],[3,"U32"],[6,"StateIdx"],[3,"Seq"],[3,"U8"],[15,"usize"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Range"],[3,"Vec"],[15,"u8"],[15,"i32"],[3,"RangeFull"],[3,"Iter"],[3,"U128"],[3,"U64"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_chacha20poly1305":{"doc":"","t":[6,6,6,4,13,11,11,5,5,5,11,11,5,11,5,11,11,11],"n":["ByteSeqResult","ChaChaPolyIV","ChaChaPolyKey","Error","InvalidTag","borrow","borrow_mut","chacha20_poly1305_decrypt","chacha20_poly1305_encrypt","finish","fmt","from","init","into","poly1305_update_padded","try_from","try_into","type_id"],"q":["hacspec_chacha20poly1305","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,8,8,8,0,0,0,8,8,0,8,0,8,8,8],"f":[0,0,0,0,0,[[]],[[]],[[1,2,3,3,4],5],[[1,2,3,3]],[[6,6,7],4],[[8,9],10],[[]],[[1,2],7],[[]],[[3,7],7],[[],11],[[],11],[[],12]],"p":[[6,"ChaChaPolyKey"],[6,"ChaChaPolyIV"],[6,"ByteSeq"],[3,"Poly1305Tag"],[6,"ByteSeqResult"],[15,"usize"],[6,"PolyState"],[4,"Error"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_curve25519":{"doc":"","tn":["FieldCanvas","ONE","ONE","ONE","ONE","Scalar","ScalarCanvas","TWO","TWO","TWO","TWO","X25519FieldElement","X25519SerializedPoint","X25519SerializedScalar","ZERO","ZERO","ZERO","ZERO","absolute","absolute","absolute","absolute","absolute","absolute","add","add","add","add","add","add","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","bit","bit","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","comp_eq","comp_eq","comp_eq","comp_eq","comp_gt","comp_gt","comp_gt","comp_gt","comp_gte","comp_gte","comp_gte","comp_gte","comp_lt","comp_lt","comp_lt","comp_lt","comp_lte","comp_lte","comp_lte","comp_lte","comp_ne","comp_ne","comp_ne","comp_ne","concat","concat","create","create","declassify","declassify","declassify_eq","declassify_eq","default","default","default","default","default","default","div","div","div","div","divide","divide","divide","divide","divide","divide","eq","eq","eq","eq","equal","equal","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_le","from_byte_seq_le","from_canvas","from_canvas","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_native_slice","from_native_slice","from_public_array","from_public_array","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_le","from_public_byte_seq_le","from_public_slice","from_public_slice","from_secret_literal","from_secret_literal","from_seq","from_seq","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_slice","from_slice","from_slice_range","from_slice_range","from_vec","from_vec","get_bit","get_bit","get_bit","get_bit","get_chunk","get_chunk","get_chunk_len","get_chunk_len","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into_canvas","into_canvas","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","iter","iter","len","len","length","length","less_than","less_than","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max","max","max_val","max_val","max_val","max_val","max_val","max_val","max_value","max_value","modulo","modulo","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","neg","neg","new","new","not","not","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","num_chunks","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow2","pow2","pow2","pow2","pow_felem","pow_felem","pow_felem","pow_felem","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rem","rem","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","set","set","set","set","set_bit","set_bit","set_bit","set_bit","set_chunk","set_chunk","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","slice","slice","slice_range","slice_range","sub","sub","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_be","to_U128s_le","to_U128s_le","to_be_U32s","to_be_U32s","to_be_U64s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_le","to_byte_seq_le","to_hex","to_hex","to_le_U32s","to_le_U32s","to_le_U64s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_array","to_public_array","to_public_byte_seq_be","to_public_byte_seq_be","to_public_byte_seq_le","to_public_byte_seq_le","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update","update","update_slice","update_slice","update_start","update_start","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","x25519_scalarmult","x25519_secret_to_public"],"q":["hacspec_curved":["","","","","","","","","","","","","Fixed length byte array.","Fixed length byte array.","","","","","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","","","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","","","","","","","","","","","","","","","","","","","Division.","Division.","Division.","Division.","Division.","Division.","","","","","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Read hex string to Bytes.","Read hex string to Bytes.","","","","","","","","","","","","","","","","","","","Create an array from a regular Rust array.","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","","","","","","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Invert self modulo n.","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","","Invert self modulo n.","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","Invert self modulo n.","Invert self modulo n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","","","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","Negate the value modulo max: <code>mod_value - self</code>","Negate the value modulo max: <code>mod_value - self</code>","","","","","","","","","","","","","","","","","","","","","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","","","","","","","","","","","","","","","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","","","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,2,3,4,0,0,1,2,3,4,0,0,0,1,2,3,4,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,6,5,6,2,4,5,6,1,2,3,4,5,6,1,2,3,4,1,2,3,4,5,6,1,2,3,4,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,1,1,2,2,2,3,3,3,4,4,4,5,6,1,1,1,2,2,3,3,3,4,4,5,6,5,6,1,2,3,4,1,2,3,4,2,4,2,4,1,2,3,4,5,6,1,2,3,4,1,2,3,4,1,1,2,2,3,3,4,4,5,6,5,6,1,2,3,4,2,4,5,6,2,4,5,6,1,2,3,4,5,6,5,6,5,6,1,2,3,4,5,6,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,5,5,5,5,5,6,6,6,6,6,5,5,5,5,6,6,6,6,1,1,1,2,2,3,3,3,4,4,5,6,2,4,1,1,2,2,3,3,4,4,5,6,5,6,5,6,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,4,1,2,3,4,5,6,1,3,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,5,6,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,5,6,5,6,1,2,3,4,5,6,1,2,3,4,5,6,5,6,5,6,5,6,5,6,1,2,3,4,5,6,1,2,3,4,2,4,5,6,5,6,5,6,1,2,3,4,5,6,1,2,3,4,5,6,5,6,2,4,2,4,1,2,3,4,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,5,6,5,6,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,0,0],"f":[0,[[],1],[[],2],[[],3],[[],4],0,0,[[],1],[[],2],[[],3],[[],4],0,0,0,[[],1],[[],2],[[],3],[[],4],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[1,7],8],[[2,7],8],[[3,7],8],[[4,7],8],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],9],[[2,2],9],[[3,3],9],[[4,4],9],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[5,[[11,[10]]]],[6,[[11,[10]]]],[7,5],[7,6],[2,12],[4,12],[[5,5],8],[[6,6],8],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[5,5],8],[[6,6],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,13],1],[[2,13],2],[[3,13],3],[[4,13],4],[[5,13],5],[[6,13],6],[[1,14],15],[[1,14],15],[[1,14],15],[[2,14],15],[[2,14],15],[[2,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[4,14],15],[[4,14],15],[[4,14],15],[[5,14],15],[[6,14],15],[[]],[16,1],[12,1],[1,2],[[]],[[]],[12,3],[16,3],[3,4],[[]],[[]],[[]],[[],5],[[],6],[[],1],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[[[17,[10]]],2],[[[17,[10]]],4],[1,2],[3,4],[18,1],[18,2],[18,3],[18,4],[18,5],[18,6],[19,1],[19,2],[19,3],[19,4],[[],1],[[],2],[[],3],[[],4],[20,1],[20,1],[20,2],[20,2],[20,3],[20,3],[20,4],[20,4],[[],5],[[],6],[[],5],[[],6],[[[17,[21]]],1],[[[17,[21]]],2],[[[17,[21]]],3],[[[17,[21]]],4],[[[17,[21]]],2],[[[17,[21]]],4],[[],5],[[],6],[22,2],[22,4],[[],5],[[],6],[23,1],[23,2],[23,3],[23,4],[[7,7],5],[[7,7],6],[[[24,[7]]],5],[[[24,[7]]],6],[[[25,[10]]],5],[[[25,[10]]],6],[[1,7],1],[[2,7],2],[[3,7],3],[[4,7],4],[[5,7,7]],[[6,7,7]],[[5,7,7],7],[[6,7,7],7],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[5,5],8],[[6,6],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[5,5],8],[[6,6],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[5,13],10],[[5,7],10],[[5,26]],[[5,21],10],[[5,27],10],[[6,27],10],[[6,26]],[[6,7],10],[[6,21],10],[[6,13],10],[[5,13],10],[[5,27],10],[[5,21],10],[[5,7],10],[[6,27],10],[[6,7],10],[[6,21],10],[[6,13],10],[1,16],[1,12],[[]],[2,1],[[]],[3,16],[3,12],[[]],[[]],[4,3],[[]],[[]],[2,1],[4,3],[[1,1],1],[[1,1],1],[[2,2],2],[2,2],[[3,3],3],[[3,3],3],[4,4],[[4,4],4],[[5,5],5],[[6,6],6],[5,[[28,[10]]]],[6,[[28,[10]]]],[5,7],[6,7],[[],7],[[],7],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[5,5],8],[[6,6],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[5,5],8],[[6,6],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[],1],[[],3],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],1],[[],3],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[2,2],[4,4],[[],5],[[],6],[1],[2],[3],[4],[5],[6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[5,7],7],[[6,7],7],[[1,1],[[29,[9]]]],[[2,2],[[29,[9]]]],[[3,3],[[29,[9]]]],[[4,4],[[29,[9]]]],[[1,20,1],1],[[2,20],2],[[3,20,3],3],[[4,20],4],[7,1],[7,2],[7,3],[7,4],[[1,1,1],1],[[2,2],2],[[3,3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,7],1],[[2,7],2],[[3,7],3],[[4,7],4],[[1,7],1],[[2,7],2],[[3,7],3],[[4,7],4],[[1,7,1,7],1],[[2,7,2,7],2],[[3,7,3,7],3],[[4,7,4,7],4],[[1,1,7],1],[[2,2,7],2],[[3,3,7],3],[[4,4,7],4],[[5,7,7],5],[[6,7,7],6],[[1,7]],[[2,7]],[[3,7]],[[4,7]],[[5,7]],[[6,7]],[[1,7]],[[2,7]],[[3,7]],[[4,7]],[[5,7]],[[6,7]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[5,7,7],[[11,[10]]]],[[6,7,7],[[11,[10]]]],[[5,[24,[7]]],[[11,[10]]]],[[6,[24,[7]]],[[11,[10]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[5,[[11,[22]]]],[6,[[11,[22]]]],[5,[[11,[22]]]],[6,[[11,[22]]]],[5,[[11,[30]]]],[6,[[11,[30]]]],[5,[[11,[31]]]],[6,[[11,[31]]]],[1],[2,[[25,[21]]]],[3],[4,[[25,[21]]]],[5,[[11,[10]]]],[6,[[11,[10]]]],[1,[[11,[10]]]],[2,[[11,[10]]]],[3,[[11,[10]]]],[4,[[11,[10]]]],[2,[[11,[10]]]],[4,[[11,[10]]]],[5,19],[6,19],[5,[[11,[30]]]],[6,[[11,[30]]]],[5,[[11,[31]]]],[6,[[11,[31]]]],[1],[2,[[25,[21]]]],[3],[4,[[25,[21]]]],[5,[[11,[10]]]],[6,[[11,[10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[5],[6],[2,[[11,[21]]]],[4,[[11,[21]]]],[2,[[11,[21]]]],[4,[[11,[21]]]],[[],19],[[],19],[[],19],[[],19],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[5,7],5],[[6,7],6],[[5,7,7,7],5],[[6,7,7,7],6],[5,5],[6,6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[6,5],5],[6,5]],"p":[[3,"FieldCanvas"],[3,"X25519FieldElement"],[3,"ScalarCanvas"],[3,"Scalar"],[3,"X25519SerializedPoint"],[3,"X25519SerializedScalar"],[15,"usize"],[15,"bool"],[4,"Ordering"],[3,"U8"],[3,"Seq"],[3,"BigInt"],[15,"u32"],[3,"Formatter"],[6,"Result"],[3,"BigUint"],[8,"SeqTrait"],[15,"str"],[3,"String"],[15,"u128"],[15,"u8"],[3,"U128"],[15,"i128"],[3,"Range"],[3,"Vec"],[3,"RangeFull"],[15,"i32"],[3,"Iter"],[4,"Option"],[3,"U32"],[3,"U64"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_ecdsa_p256_sha256":{"doc":"","t":[4,13,13,6,6,6,6,6,11,11,5,5,11,11,11,11,11,11],"n":["Error","InvalidScalar","InvalidSignature","P256PublicKey","P256SecretKey","P256Signature","P256SignatureResult","P256VerifyResult","borrow","borrow_mut","ecdsa_p256_sha256_sign","ecdsa_p256_sha256_verify","fmt","from","into","try_from","try_into","type_id"],"q":["hacspec_ecdsa_p256_sha256","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","",""],"i":[0,8,8,0,0,0,0,0,8,8,0,0,8,8,8,8,8,8],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[1,2,3],4],[[1,5,6],7],[[8,9],10],[[]],[[]],[[],11],[[],11],[[],12]],"p":[[6,"ByteSeq"],[6,"P256SecretKey"],[3,"P256Scalar"],[6,"P256SignatureResult"],[6,"P256PublicKey"],[6,"P256Signature"],[6,"P256VerifyResult"],[4,"Error"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_ed25519":{"doc":"This crate gives a specification for the EdDSA signature …","t":[3,5,5,11,11,11,11,11,11,5,5,5,5,11,5,11,11,11,11,5,5],"n":["BatchEntry","alg2_verify","alg3_batch_verify","borrow","borrow_mut","clone","clone_into","default","from","ietf_cofactored_batch_verify","ietf_cofactored_verify","ietf_cofactorless_batch_verify","ietf_cofactorless_verify","into","sign","to_owned","try_from","try_into","type_id","zcash_batch_verify","zcash_verify"],"q":["hacspec_ed25519","","","","","","","","","","","","","","","","","","","",""],"d":["","Algorithm 2 from https://eprint.iacr.org/2020/1244.pdf. …","Batch verification. Algorithm 3 from …","","","","","","Returns the argument unchanged.","Batch verification. Cofactored verification. Rejects …","Cofactored verification. Rejects non-canonical encoding of …","Batch verification. Cofactorless verification. Rejects …","Cofactorless verification. Rejects non-canonical encoding …","Calls <code>U::from(self)</code>.","Sign a message under a secret key.","","","","","Batch verification. Cofactored verification. Allows …","Cofactored verification. Allows non-canonical encoding of …"],"i":[0,0,0,6,6,6,6,6,6,0,0,0,0,6,0,6,6,6,6,0,0],"f":[0,[[1,2,3],4],[[5,3],4],[[]],[[]],[6,6],[[]],[[],6],[[]],[[5,3],4],[[1,2,3],4],[[5,3],4],[[1,2,3],4],[[]],[[7,3],2],[[]],[[],8],[[],8],[[],9],[[5,3],4],[[1,2,3],4]],"p":[[6,"PublicKey"],[3,"Signature"],[6,"ByteSeq"],[6,"VerifyResult"],[3,"Seq"],[3,"BatchEntry"],[6,"SecretKey"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_edwards25519":{"doc":"","tn":["BASE","BigInteger","BigIntegerCanvas","BigScalar","BigScalarCanvas","CompressedEdPoint","Ed25519FieldElement","EdPoint","Error","FieldCanvas","InvalidPublickey","InvalidR","InvalidS","InvalidSignature","NotEnoughRandomness","ONE","ONE","ONE","ONE","ONE","ONE","ONE","ONE","PublicKey","Scalar","ScalarCanvas","SecretKey","SerializedScalar","Signature","SmallOrderPoint","TWO","TWO","TWO","TWO","TWO","TWO","TWO","TWO","VerifyResult","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","absolute","add","add","add","add","add","add","add","add","add","add","add","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","bit","bit","bit","bit","bit","bit","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_canonical_scalar","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_eq","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gt","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_gte","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lt","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_lte","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","comp_ne","compress","concat","concat","concat","create","create","create","declassify","declassify","declassify","declassify","declassify_eq","declassify_eq","declassify_eq","decode","decompress","decompress_non_canonical","default","default","default","default","default","default","default","default","default","default","default","div","div","div","div","div","div","div","div","divide","divide","divide","divide","divide","divide","divide","divide","divide","divide","divide","encode","eq","eq","eq","eq","eq","eq","eq","eq","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","exp","exp","exp","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_le","from_byte_seq_le","from_byte_seq_le","from_byte_seq_le","from_canvas","from_canvas","from_canvas","from_canvas","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_native_slice","from_native_slice","from_native_slice","from_public_array","from_public_array","from_public_array","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_le","from_public_byte_seq_le","from_public_byte_seq_le","from_public_byte_seq_le","from_public_slice","from_public_slice","from_public_slice","from_secret_literal","from_secret_literal","from_secret_literal","from_secret_literal","from_seq","from_seq","from_seq","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_slice","from_slice","from_slice","from_slice_range","from_slice_range","from_slice_range","from_vec","from_vec","from_vec","get_bit","get_bit","get_bit","get_bit","get_bit","get_bit","get_bit","get_bit","get_chunk","get_chunk","get_chunk","get_chunk_len","get_chunk_len","get_chunk_len","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_canvas","into_canvas","into_canvas","into_canvas","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","inv","iter","iter","iter","len","len","len","length","length","length","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max","max","max","max","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_val","max_value","max_value","max_value","max_value","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","neg","neg","neg","neg","new","new","new","not","not","not","not","not","not","not","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","num_chunks","num_chunks","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","point_add","point_eq","point_identity","point_mul","point_mul_by_cofactor","point_neg","point_normalize","pow","pow","pow","pow","pow","pow","pow","pow","pow2","pow2","pow2","pow2","pow2","pow2","pow2","pow2","pow_felem","pow_felem","pow_felem","pow_felem","pow_felem","pow_felem","pow_felem","pow_felem","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","rotate_right","secret_expand","secret_to_public","set","set","set","set","set","set","set","set","set_bit","set_bit","set_bit","set_bit","set_bit","set_bit","set_bit","set_bit","set_chunk","set_chunk","set_chunk","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","slice","slice","slice","slice_range","slice_range","slice_range","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_le","to_U128s_le","to_U128s_le","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_le","to_byte_seq_le","to_byte_seq_le","to_byte_seq_le","to_hex","to_hex","to_hex","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_array","to_public_array","to_public_array","to_public_byte_seq_be","to_public_byte_seq_be","to_public_byte_seq_be","to_public_byte_seq_be","to_public_byte_seq_le","to_public_byte_seq_le","to_public_byte_seq_le","to_public_byte_seq_le","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update","update","update_slice","update_slice","update_slice","update_start","update_start","update_start","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_edwardsd":["","","","","","Fixed length byte array.","","","","","","","","","","","","","","","","","","","","","","Fixed length byte array.","Fixed length byte array.","","","","","","","","","","","","","","","","","","","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","","","","","","","","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Division.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","Division.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Invert self modulo n.","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","Invert self modulo n.","","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","Invert self modulo n.","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","Invert self modulo n.","","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","","","","","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","","","","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","Negate the value modulo max: <code>mod_value - self</code>","Negate the value modulo max: <code>mod_value - self</code>","Negate the value modulo max: <code>mod_value - self</code>","Negate the value modulo max: <code>mod_value - self</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","","","","","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","","","","","","","","","","","","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % ni":[0,0,0,0,0,0,0,0,0,0,24,24,24,24,24,1,2,3,4,5,6,7,8,0,0,0,0,0,0,24,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,24,1,2,3,4,5,6,7,8,9,10,11,24,0,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,0,9,10,11,9,10,11,2,4,6,8,9,10,11,0,0,0,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,9,10,11,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,10,11,24,1,1,1,2,2,3,3,3,4,4,5,5,5,6,6,7,7,7,8,8,9,10,11,24,9,10,11,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,2,4,6,8,2,4,6,8,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,11,9,10,11,1,2,3,4,5,6,7,8,2,4,6,8,9,10,11,2,4,6,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,9,10,11,9,10,11,1,2,3,4,5,6,7,8,9,10,11,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,9,9,9,9,9,10,10,10,10,10,11,11,11,11,11,9,9,9,9,10,10,10,10,11,11,11,11,1,1,1,2,2,3,3,3,4,4,5,5,5,6,6,7,7,7,8,8,9,10,11,24,2,4,6,8,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,11,9,10,11,9,10,11,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,2,4,6,8,1,2,3,4,5,6,7,8,9,10,11,1,3,5,7,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,2,4,6,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,9,10,11,1,2,3,4,5,6,7,8,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,0,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,9,10,11,9,10,11,0,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,9,10,11,9,10,11,9,10,11,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,2,4,6,8,9,10,11,9,10,11,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,9,10,11,2,4,6,8,2,4,6,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,9,10,11,24,1,2,3,4,5,6,7,8,9,10,11,24,1,2,3,4,5,6,7,8,9,10,11,24,9,10,11,9,10,11,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],0,0,0,0,0,0,0,[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],0,[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[7,7,7],7],[[8,8,8],8],[[9,9,9],9],[[10,10,10],10],[[11,11,11],11],[[1,12],13],[[2,12],13],[[3,12],13],[[4,12],13],[[5,12],13],[[6,12],13],[[7,12],13],[[8,12],13],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[7,7]],[[8,8]],[[9,9]],[[10,10]],[[11,11]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[7,7]],[[8,8]],[[9,9]],[[10,10]],[[11,11]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[7,7]],[[8,8]],[[9,9]],[[10,10]],[[11,11]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,13],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],14],[[2,2],14],[[3,3],14],[[4,4],14],[[5,5],14],[[6,6],14],[[7,7],14],[[8,8],14],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[15,9],[9,[[17,[16]]]],[10,[[17,[16]]]],[11,[[17,[16]]]],[12,9],[12,10],[12,11],[2,18],[4,18],[6,18],[8,18],[[9,9],13],[[10,10],13],[[11,11],13],[19,[[20,[15]]]],[9,[[20,[15]]]],[9,[[20,[15]]]],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[],10],[[],11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[15,19],[[1,1],13],[[2,2],13],[[3,3],13],[[4,4],13],[[5,5],13],[[6,6],13],[[7,7],13],[[8,8],13],[[1,1],13],[[2,2],13],[[3,3],13],[[4,4],13],[[5,5],13],[[6,6],13],[[7,7],13],[[8,8],13],[[9,9],13],[[10,10],13],[[11,11],13],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[1,21],1],[[2,21],2],[[3,21],3],[[4,21],4],[[5,21],5],[[6,21],6],[[7,21],7],[[8,21],8],[[9,21],9],[[10,21],10],[[11,21],11],[[1,22],23],[[1,22],23],[[1,22],23],[[2,22],23],[[2,22],23],[[2,22],23],[[3,22],23],[[3,22],23],[[3,22],23],[[4,22],23],[[4,22],23],[[4,22],23],[[5,22],23],[[5,22],23],[[5,22],23],[[6,22],23],[[6,22],23],[[6,22],23],[[7,22],23],[[7,22],23],[[7,22],23],[[8,22],23],[[8,22],23],[[8,22],23],[[9,22],23],[[10,22],23],[[11,22],23],[[24,22],23],[[]],[18,1],[25,1],[1,2],[[]],[[]],[25,3],[18,3],[[]],[3,4],[[]],[25,5],[18,5],[[]],[5,6],[18,7],[25,7],[[]],[[]],[7,8],[[]],[[]],[[]],[[]],[[],9],[[],10],[[],11],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[[26,[16]]],2],[[[26,[16]]],4],[[[26,[16]]],6],[[[26,[16]]],8],[1,2],[3,4],[5,6],[7,8],[27,1],[27,2],[27,3],[27,4],[27,5],[27,6],[27,7],[27,8],[27,9],[27,10],[27,11],[28,1],[28,2],[28,3],[28,4],[28,5],[28,6],[28,7],[28,8],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[29,1],[29,1],[29,2],[29,2],[29,3],[29,3],[29,4],[29,4],[29,5],[29,5],[29,6],[29,6],[29,7],[29,7],[29,8],[29,8],[[],9],[[],10],[[],11],[[],9],[[],10],[[],11],[[[26,[30]]],1],[[[26,[30]]],2],[[[26,[30]]],3],[[[26,[30]]],4],[[[26,[30]]],5],[[[26,[30]]],6],[[[26,[30]]],7],[[[26,[30]]],8],[[[26,[30]]],2],[[[26,[30]]],4],[[[26,[30]]],6],[[[26,[30]]],8],[[],9],[[],10],[[],11],[31,2],[31,4],[31,6],[31,8],[[],9],[[],10],[[],11],[32,1],[32,2],[32,3],[32,4],[32,5],[32,6],[32,7],[32,8],[[12,12],9],[[12,12],10],[[12,12],11],[[[33,[12]]],9],[[[33,[12]]],10],[[[33,[12]]],11],[[[34,[16]]],9],[[[34,[16]]],10],[[[34,[16]]],11],[[1,12],1],[[2,12],2],[[3,12],3],[[4,12],4],[[5,12],5],[[6,12],6],[[7,12],7],[[8,12],8],[[9,12,12]],[[10,12,12]],[[11,12,12]],[[9,12,12],12],[[10,12,12],12],[[11,12,12],12],[[1,1],13],[[2,2],13],[[3,3],13],[[4,4],13],[[5,5],13],[[6,6],13],[[7,7],13],[[8,8],13],[[9,9],13],[[10,10],13],[[11,11],13],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[1,1],13],[[2,2],13],[[3,3],13],[[4,4],13],[[5,5],13],[[6,6],13],[[7,7],13],[[8,8],13],[[9,9],13],[[10,10],13],[[11,11],13],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[9,35]],[[9,21],16],[[9,12],16],[[9,36],16],[[9,30],16],[[10,35]],[[10,21],16],[[10,36],16],[[10,12],16],[[10,30],16],[[11,12],16],[[11,35]],[[11,36],16],[[11,30],16],[[11,21],16],[[9,21],16],[[9,12],16],[[9,36],16],[[9,30],16],[[10,12],16],[[10,30],16],[[10,21],16],[[10,36],16],[[11,21],16],[[11,30],16],[[11,12],16],[[11,36],16],[[]],[1,25],[1,18],[2,1],[[]],[[]],[3,18],[3,25],[4,3],[[]],[5,25],[[]],[5,18],[6,5],[[]],[7,25],[7,18],[[]],[[]],[8,7],[[]],[[]],[[]],[[]],[2,1],[4,3],[6,5],[8,7],[[1,1],1],[[1,1],1],[[2,2],2],[2,2],[[3,3],3],[[3,3],3],[4,4],[[4,4],4],[[5,5],5],[[5,5],5],[[6,6],6],[6,6],[[7,7],7],[[7,7],7],[8,8],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[9,[[37,[16]]]],[10,[[37,[16]]]],[11,[[37,[16]]]],[9,12],[10,12],[11,12],[[],12],[[],12],[[],12],[[1,1],13],[[2,2],13],[[3,3],13],[[4,4],13],[[5,5],13],[[6,6],13],[[7,7],13],[[8,8],13],[[9,9],13],[[10,10],13],[[11,11],13],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[1,1],13],[[2,2],13],[[3,3],13],[[4,4],13],[[5,5],13],[[6,6],13],[[7,7],13],[[8,8],13],[[9,9],13],[[10,10],13],[[11,11],13],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[],1],[[],3],[[],5],[[],7],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[],10],[[],11],[[],1],[[],3],[[],5],[[],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[7,7,7],7],[[8,8,8],8],[[9,9,9],9],[[10,10,10],10],[[11,11,11],11],[2,2],[4,4],[6,6],[8,8],[[],9],[[],10],[[],11],[1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[9,12],12],[[10,12],12],[[11,12],12],[[1,1],[[20,[14]]]],[[2,2],[[20,[14]]]],[[3,3],[[20,[14]]]],[[4,4],[[20,[14]]]],[[5,5],[[20,[14]]]],[[6,6],[[20,[14]]]],[[7,7],[[20,[14]]]],[[8,8],[[20,[14]]]],[[15,15],15],[[15,15],13],[[],15],[[4,15],15],[15,15],[15,15],[15,15],[[1,29,1],1],[[2,29],2],[[3,29,3],3],[[4,29],4],[[5,29,5],5],[[6,29],6],[[7,29,7],7],[[8,29],8],[12,1],[12,2],[12,3],[12,4],[12,5],[12,6],[12,7],[12,8],[[1,1,1],1],[[2,2],2],[[3,3,3],3],[[4,4],4],[[5,5,5],5],[[6,6],6],[[7,7,7],7],[[8,8],8],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[7,7,7],7],[[8,8,8],8],[[9,9,9],9],[[10,10,10],10],[[11,11,11],11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[1,12],1],[[2,12],2],[[3,12],3],[[4,12],4],[[5,12],5],[[6,12],6],[[7,12],7],[[8,12],8],[[1,12],1],[[2,12],2],[[3,12],3],[[4,12],4],[[5,12],5],[[6,12],6],[[7,12],7],[[8,12],8],[38],[38,39],[[1,12,1,12],1],[[2,12,2,12],2],[[3,12,3,12],3],[[4,12,4,12],4],[[5,12,5,12],5],[[6,12,6,12],6],[[7,12,7,12],7],[[8,12,8,12],8],[[1,1,12],1],[[2,2,12],2],[[3,3,12],3],[[4,4,12],4],[[5,5,12],5],[[6,6,12],6],[[7,7,12],7],[[8,8,12],8],[[9,12,12],9],[[10,12,12],10],[[11,12,12],11],[[1,12]],[[2,12]],[[3,12]],[[4,12]],[[5,12]],[[6,12]],[[7,12]],[[8,12]],[[9,12]],[[10,12]],[[11,12]],[[1,12]],[[2,12]],[[3,12]],[[4,12]],[[5,12]],[[6,12]],[[7,12]],[[8,12]],[[9,12]],[[10,12]],[[11,12]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[9,12,12],[[17,[16]]]],[[10,12,12],[[17,[16]]]],[[11,12,12],[[17,[16]]]],[[9,[33,[12]]],[[17,[16]]]],[[10,[33,[12]]],[[17,[16]]]],[[11,[33,[12]]],[[17,[16]]]],[2,[[20,[2]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[7,7,7],7],[[8,8,8],8],[[9,9,9],9],[[10,10,10],10],[[11,11,11],11],[9,[[17,[31]]]],[10,[[17,[31]]]],[11,[[17,[31]]]],[9,[[17,[31]]]],[10,[[17,[31]]]],[11,[[17,[31]]]],[9,[[17,[40]]]],[10,[[17,[40]]]],[11,[[17,[40]]]],[9,[[17,[41]]]],[10,[[17,[41]]]],[11,[[17,[41]]]],[1],[2,[[34,[30]]]],[3],[4,[[34,[30]]]],[5],[6,[[34,[30]]]],[7],[8,[[34,[30]]]],[9,[[17,[16]]]],[10,[[17,[16]]]],[11,[[17,[16]]]],[1,[[17,[16]]]],[2,[[17,[16]]]],[3,[[17,[16]]]],[4,[[17,[16]]]],[5,[[17,[16]]]],[6,[[17,[16]]]],[7,[[17,[16]]]],[8,[[17,[16]]]],[2,[[17,[16]]]],[4,[[17,[16]]]],[6,[[17,[16]]]],[8,[[17,[16]]]],[9,28],[10,28],[11,28],[9,[[17,[40]]]],[10,[[17,[40]]]],[11,[[17,[40]]]],[9,[[17,[41]]]],[10,[[17,[41]]]],[11,[[17,[41]]]],[1],[2,[[34,[30]]]],[3],[4,[[34,[30]]]],[5],[6,[[34,[30]]]],[7],[8,[[34,[30]]]],[9,[[17,[16]]]],[10,[[17,[16]]]],[11,[[17,[16]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[10],[11],[2,[[17,[30]]]],[4,[[17,[30]]]],[6,[[17,[30]]]],[8,[[17,[30]]]],[2,[[17,[30]]]],[4,[[17,[30]]]],[6,[[17,[30]]]],[8,[[17,[30]]]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[],43],[[9,12],9],[[10,12],10],[[11,12],11],[[9,12,12,12],9],[[10,12,12,12],10],[[11,12,12,12],11],[9,9],[10,10],[11,11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[8,8],8],[[9,9],9],[[10,10],10],[[11,11],11]],"p":[[3,"FieldCanvas"],[3,"Ed25519FieldElement"],[3,"ScalarCanvas"],[3,"Scalar"],[3,"BigScalarCanvas"],[3,"BigScalar"],[3,"BigIntegerCanvas"],[3,"BigInteger"],[3,"CompressedEdPoint"],[3,"SerializedScalar"],[3,"Signature"],[15,"usize"],[15,"bool"],[4,"Ordering"],[6,"EdPoint"],[3,"U8"],[3,"Seq"],[3,"BigInt"],[6,"ByteSeq"],[4,"Option"],[15,"u32"],[3,"Formatter"],[6,"Result"],[4,"Error"],[3,"BigUint"],[8,"SeqTrait"],[15,"str"],[3,"String"],[15,"u128"],[15,"u8"],[3,"U128"],[15,"i128"],[3,"Range"],[3,"Vec"],[3,"RangeFull"],[15,"i32"],[3,"Iter"],[6,"SecretKey"],[6,"PublicKey"],[3,"U32"],[3,"U64"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_gf128":{"doc":"","tn":["Gf128Block","Gf128Key","Gf128Tag","absolute","absolute","absolute","add","add","add","add_mod","add_mod","add_mod","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","concat","concat","concat","create","create","create","declassify_eq","declassify_eq","declassify_eq","default","default","default","divide","divide","divide","equal","equal","equal","equal_bm","equal_bm","equal_bm","exp","exp","exp","fmt","fmt","fmt","from","from","from","from_array","from_array","from_array","from_hex","from_hex","from_hex","from_native_slice","from_native_slice","from_native_slice","from_public_array","from_public_array","from_public_array","from_public_slice","from_public_slice","from_public_slice","from_seq","from_seq","from_seq","from_slice","from_slice","from_slice","from_slice_range","from_slice_range","from_slice_range","from_vec","from_vec","from_vec","get_chunk","get_chunk","get_chunk","get_chunk_len","get_chunk_len","get_chunk_len","gmac","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","inv","inv","inv","iter","iter","iter","len","len","len","length","length","length","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max_val","max_val","max_val","modulo","modulo","modulo","mul","mul","mul","mul_mod","mul_mod","mul_mod","new","new","new","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","num_chunks","num_chunks","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","rem","rem","rem","set_chunk","set_chunk","set_chunk","shl","shl","shl","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","slice","slice","slice","slice_range","slice_range","slice_range","sub","sub","sub","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_le","to_U128s_le","to_U128s_le","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_hex","to_hex","to_hex","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_public_array","to_public_array","to_public_array","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update","update","update","update_slice","update_slice","update_slice","update_start","update_start","update_start","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_gfd":["Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Division.","Division.","Division.","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","","","","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","","","","","","","","","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,1,2,3,1,2,3,1,2,3,1,2,3,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,1,1,1,1,2,2,2,2,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3],"f":[0,0,0,[1,1],[2,2],[3,3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[1,1]],[[2,2]],[[3,3]],[[1,1]],[[2,2]],[[3,3]],[[1,1]],[[2,2]],[[3,3]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[]],[[]],[[]],[1,[[5,[4]]]],[2,[[5,[4]]]],[3,[[5,[4]]]],[6,1],[6,2],[6,3],[[1,1],7],[[2,2],7],[[3,3],7],[[],1],[[],2],[[],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],7],[[2,2],7],[[3,3],7],[[1,1],1],[[2,2],2],[[3,3],3],[[1,8],1],[[2,8],2],[[3,8],3],[[1,9],10],[[2,9],10],[[3,9],10],[[]],[[]],[[]],[[],1],[[],2],[[],3],[11,1],[11,2],[11,3],[[],1],[[],2],[[],3],[[],1],[[],2],[[],3],[[],1],[[],2],[[],3],[[],1],[[],2],[[],3],[[6,6],1],[[6,6],2],[[6,6],3],[[[12,[6]]],1],[[[12,[6]]],2],[[[12,[6]]],3],[[[13,[4]]],1],[[[13,[4]]],2],[[[13,[4]]],3],[[1,6,6]],[[2,6,6]],[[3,6,6]],[[1,6,6],6],[[2,6,6],6],[[3,6,6],6],[[14,2],3],[[1,1],7],[[2,2],7],[[3,3],7],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],7],[[2,2],7],[[3,3],7],[[1,1],1],[[2,2],2],[[3,3],3],[[1,8],4],[[1,15]],[[1,6],4],[[1,16],4],[[1,17],4],[[2,17],4],[[2,6],4],[[2,16],4],[[2,15]],[[2,8],4],[[3,8],4],[[3,15]],[[3,17],4],[[3,16],4],[[3,6],4],[[1,6],4],[[1,16],4],[[1,17],4],[[1,8],4],[[2,6],4],[[2,8],4],[[2,16],4],[[2,17],4],[[3,6],4],[[3,17],4],[[3,16],4],[[3,8],4],[[]],[[]],[[]],[[1,1],1],[[2,2],2],[[3,3],3],[1,[[18,[4]]]],[2,[[18,[4]]]],[3,[[18,[4]]]],[1,6],[2,6],[3,6],[[],6],[[],6],[[],6],[[1,1],7],[[2,2],7],[[3,3],7],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],7],[[2,2],7],[[3,3],7],[[1,1],1],[[2,2],2],[[3,3],3],[[],1],[[],2],[[],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[],1],[[],2],[[],3],[1],[2],[3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,6],6],[[2,6],6],[[3,6],6],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,6,6],1],[[2,6,6],2],[[3,6,6],3],[[1,6]],[[2,6]],[[3,6]],[[1,6]],[[2,6]],[[3,6]],[[1,1],1],[[2,2],2],[[3,3],3],[[1,6,6],[[5,[4]]]],[[2,6,6],[[5,[4]]]],[[3,6,6],[[5,[4]]]],[[1,[12,[6]]],[[5,[4]]]],[[2,[12,[6]]],[[5,[4]]]],[[3,[12,[6]]],[[5,[4]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[1,[[5,[19]]]],[2,[[5,[19]]]],[3,[[5,[19]]]],[1,[[5,[19]]]],[2,[[5,[19]]]],[3,[[5,[19]]]],[1,[[5,[20]]]],[2,[[5,[20]]]],[3,[[5,[20]]]],[1,[[5,[21]]]],[2,[[5,[21]]]],[3,[[5,[21]]]],[1,[[5,[4]]]],[2,[[5,[4]]]],[3,[[5,[4]]]],[1,22],[2,22],[3,22],[1,[[5,[20]]]],[2,[[5,[20]]]],[3,[[5,[20]]]],[1,[[5,[21]]]],[2,[[5,[21]]]],[3,[[5,[21]]]],[1,[[5,[4]]]],[2,[[5,[4]]]],[3,[[5,[4]]]],[[]],[[]],[[]],[1],[2],[3],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],24],[[],24],[[],24],[[1,6],1],[[2,6],2],[[3,6],3],[[1,6,6,6],1],[[2,6,6,6],2],[[3,6,6,6],3],[1,1],[2,2],[3,3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3],[[1,1],1],[[2,2],2],[[3,3],3]],"p":[[3,"Gf128Block"],[3,"Gf128Key"],[3,"Gf128Tag"],[3,"U8"],[3,"Seq"],[15,"usize"],[15,"bool"],[15,"u32"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Range"],[3,"Vec"],[6,"ByteSeq"],[3,"RangeFull"],[15,"u8"],[15,"i32"],[3,"Iter"],[3,"U128"],[3,"U32"],[3,"U64"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_gimli":{"doc":"","tn":["Block","Digest","Key","Nonce","State","StateIdx","Tag","absolute","absolute","absolute","absolute","absolute","absolute","add","add","add","add","add","add","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","concat","concat","concat","concat","concat","concat","create","create","create","create","create","create","declassify_eq","declassify_eq","declassify_eq","declassify_eq","declassify_eq","declassify_eq","default","default","default","default","default","default","divide","divide","divide","divide","divide","divide","equal","equal","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_array","from_array","from_array","from_array","from_array","from_array","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_public_array","from_public_array","from_public_array","from_public_array","from_public_array","from_public_array","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_seq","from_seq","from_seq","from_seq","from_seq","from_seq","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","gimli","gimli_aead_decrypt","gimli_aead_encrypt","gimli_hash","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","inv","inv","inv","inv","inv","inv","iter","iter","iter","iter","iter","iter","key_to_u32s","len","len","len","len","len","len","length","length","length","length","length","length","less_than","less_than","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max_val","max_val","max_val","max_val","max_val","max_val","modulo","modulo","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","new","new","new","new","new","new","nonce_to_u32s","not","not","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rem","rem","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","slice","slice","slice","slice","slice","slice","slice_range","slice_range","slice_range","slice_range","slice_range","slice_range","sub","sub","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_le","to_U128s_le","to_U128s_le","to_U128s_le","to_U128s_le","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_hex","to_hex","to_hex","to_hex","to_hex","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_array","to_public_array","to_public_array","to_public_array","to_public_array","to_public_array","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update","update","update","update","update","update","update_slice","update_slice","update_slice","update_slice","update_slice","update_slice","update_start","update_start","update_start","update_start","update_start","update_start","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_gimlid":["Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","","Fixed length byte array.","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","","","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Division.","Division.","Division.","Division.","Division.","Division.","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","","","","","","","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","","","","","","","","","","","","","","","","","","","","","","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,1,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6],"f":[0,0,0,0,0,0,0,[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[8,[7]]]],[2,[[8,[9]]]],[3,[[8,[9]]]],[4,[[8,[9]]]],[5,[[8,[9]]]],[6,[[8,[9]]]],[10,1],[10,2],[10,3],[10,4],[10,5],[10,6],[[1,1],11],[[2,2],11],[[3,3],11],[[4,4],11],[[5,5],11],[[6,6],11],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],11],[[2,2],11],[[3,3],11],[[4,4],11],[[5,5],11],[[6,6],11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,12],1],[[2,12],2],[[3,12],3],[[4,12],4],[[5,12],5],[[6,12],6],[[1,13],14],[[2,13],14],[[3,13],14],[[4,13],14],[[5,13],14],[[6,13],14],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[15,1],[15,2],[15,3],[15,4],[15,5],[15,6],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[10,10],1],[[10,10],2],[[10,10],3],[[10,10],4],[[10,10],5],[[10,10],6],[[[16,[10]]],1],[[[16,[10]]],2],[[[16,[10]]],3],[[[16,[10]]],4],[[[16,[10]]],5],[[[16,[10]]],6],[[[17,[7]]],1],[[[17,[9]]],2],[[[17,[9]]],3],[[[17,[9]]],4],[[[17,[9]]],5],[[[17,[9]]],6],[[1,10,10]],[[2,10,10]],[[3,10,10]],[[4,10,10]],[[5,10,10]],[[6,10,10]],[[1,10,10],10],[[2,10,10],10],[[3,10,10],10],[[4,10,10],10],[[5,10,10],10],[[6,10,10],10],[1,1],[[18,18,6,4,5],18],[[18,18,4,5]],[18,3],[[1,1],11],[[2,2],11],[[3,3],11],[[4,4],11],[[5,5],11],[[6,6],11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],11],[[2,2],11],[[3,3],11],[[4,4],11],[[5,5],11],[[6,6],11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,19]],[[1,20],7],[[1,12],7],[[1,21],7],[[1,10],7],[[2,21],9],[[2,19]],[[2,20],9],[[2,10],9],[[2,12],9],[[3,12],9],[[3,19]],[[3,10],9],[[3,20],9],[[3,21],9],[[4,21],9],[[4,12],9],[[4,10],9],[[4,20],9],[[4,19]],[[5,19]],[[5,20],9],[[5,10],9],[[5,12],9],[[5,21],9],[[6,21],9],[[6,10],9],[[6,12],9],[[6,20],9],[[6,19]],[[1,12],7],[[1,20],7],[[1,21],7],[[1,10],7],[[2,20],9],[[2,10],9],[[2,21],9],[[2,12],9],[[3,10],9],[[3,20],9],[[3,21],9],[[3,12],9],[[4,20],9],[[4,10],9],[[4,21],9],[[4,12],9],[[5,21],9],[[5,12],9],[[5,20],9],[[5,10],9],[[6,20],9],[[6,12],9],[[6,21],9],[[6,10],9],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[1,[[22,[7]]]],[2,[[22,[9]]]],[3,[[22,[9]]]],[4,[[22,[9]]]],[5,[[22,[9]]]],[6,[[22,[9]]]],[5,[[8,[7]]]],[1,10],[2,10],[3,10],[4,10],[5,10],[6,10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[1,1],11],[[2,2],11],[[3,3],11],[[4,4],11],[[5,5],11],[[6,6],11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],11],[[2,2],11],[[3,3],11],[[4,4],11],[[5,5],11],[[6,6],11],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[4,[[8,[7]]]],[1],[2],[3],[4],[5],[6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,10],10],[[2,10],10],[[3,10],10],[[4,10],10],[[5,10],10],[[6,10],10],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,10,10],1],[[2,10,10],2],[[3,10,10],3],[[4,10,10],4],[[5,10,10],5],[[6,10,10],6],[[1,10]],[[2,10]],[[3,10]],[[4,10]],[[5,10]],[[6,10]],[[1,10]],[[2,10]],[[3,10]],[[4,10]],[[5,10]],[[6,10]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,10,10],[[8,[7]]]],[[2,10,10],[[8,[9]]]],[[3,10,10],[[8,[9]]]],[[4,10,10],[[8,[9]]]],[[5,10,10],[[8,[9]]]],[[6,10,10],[[8,[9]]]],[[1,[16,[10]]],[[8,[7]]]],[[2,[16,[10]]],[[8,[9]]]],[[3,[16,[10]]],[[8,[9]]]],[[4,[16,[10]]],[[8,[9]]]],[[5,[16,[10]]],[[8,[9]]]],[[6,[16,[10]]],[[8,[9]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[2,[[8,[23]]]],[3,[[8,[23]]]],[4,[[8,[23]]]],[5,[[8,[23]]]],[6,[[8,[23]]]],[2,[[8,[23]]]],[3,[[8,[23]]]],[4,[[8,[23]]]],[5,[[8,[23]]]],[6,[[8,[23]]]],[2,[[8,[7]]]],[3,[[8,[7]]]],[4,[[8,[7]]]],[5,[[8,[7]]]],[6,[[8,[7]]]],[2,[[8,[24]]]],[3,[[8,[24]]]],[4,[[8,[24]]]],[5,[[8,[24]]]],[6,[[8,[24]]]],[1,[[8,[9]]]],[2,[[8,[9]]]],[3,[[8,[9]]]],[4,[[8,[9]]]],[5,[[8,[9]]]],[6,[[8,[9]]]],[2,25],[3,25],[4,25],[5,25],[6,25],[2,[[8,[7]]]],[3,[[8,[7]]]],[4,[[8,[7]]]],[5,[[8,[7]]]],[6,[[8,[7]]]],[2,[[8,[24]]]],[3,[[8,[24]]]],[4,[[8,[24]]]],[5,[[8,[24]]]],[6,[[8,[24]]]],[1,[[8,[9]]]],[2,[[8,[9]]]],[3,[[8,[9]]]],[4,[[8,[9]]]],[5,[[8,[9]]]],[6,[[8,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[2],[3],[4],[5],[6],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[1,10],1],[[2,10],2],[[3,10],3],[[4,10],4],[[5,10],5],[[6,10],6],[[1,10,10,10],1],[[2,10,10,10],2],[[3,10,10,10],3],[[4,10,10,10],4],[[5,10,10,10],5],[[6,10,10,10],6],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6]],"p":[[3,"State"],[3,"Block"],[3,"Digest"],[3,"Nonce"],[3,"Key"],[3,"Tag"],[3,"U32"],[3,"Seq"],[3,"U8"],[15,"usize"],[15,"bool"],[15,"u32"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Range"],[3,"Vec"],[6,"ByteSeq"],[3,"RangeFull"],[15,"i32"],[15,"u8"],[3,"Iter"],[3,"U128"],[3,"U64"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_halo2":{"doc":"Protocol","t":[6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["Polyx","add_polyx","add_scalar_polyx","check_not_zero_polyx","degree_polyx","divide_leading_terms","divide_polyx","eval_polyx","lagrange_basis","lagrange_polyx","mul_polyx","mul_scalar_polyx","multi_poly_with_x","multi_poly_with_x_pow","sub_polyx","sub_scalar_polyx","trim_polyx"],"q":["hacspec_halo2","","","","","","","","","","","","","","","",""],"d":["A polynomial represented by its coefficient form, such …","Add two polynomials, return resulting polynomial","Add a scalar (constant) from a polynomial, return …","Checks if all entries in a polynomial is 0","Get the degree of a polynomial","divide the leading terms of two polynomials, returning a …","Perform polynomial long division, returning the quotient …","Evaluate a polynomial at point, return the evaluation","Finds the Lagrange basis for a set of <code>points</code> and a single …","Find lowest degree polynomial passing through a set points …","Polynomial multiplication using sparse multiplication. …","Multiply a polynomial by a scalar, return resulting …","Wrapper function for multiplying a polynomial with the …","Wrapper function for multiplying a polynomial with the …","Subtract two polynomials, return resulting polynomial","Subtract a scalar (constant) from a polynomial, return …","Trim a polynomial of trailing zeros (zero-terms) and …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,[[1,1],1],[[1,2],1],[1,3],[1,4],[[1,1],1],[[1,1]],[[1,2],2],[[5,2],1],[5,1],[[1,1],1],[[1,2],1],[1,1],[[1,4],1],[[1,1],1],[[1,2],1],[1,1]],"p":[[6,"Polyx"],[3,"FpVesta"],[15,"bool"],[15,"usize"],[3,"Seq"]]},\
"hacspec_hkdf":{"doc":"","t":[6,4,13,11,11,5,5,11,11,11,11,11,11],"n":["HkdfByteSeqResult","HkdfError","InvalidOutputLength","borrow","borrow_mut","expand","extract","fmt","from","into","try_from","try_into","type_id"],"q":["hacspec_hkdf","","","","","","","","","","","",""],"d":["","","","","","Expand a key prk, using potentially empty info, and output …","Extract a pseudo-random key from input key material (IKM) …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","",""],"i":[0,0,5,5,5,0,0,5,5,5,5,5,5],"f":[0,0,0,[[]],[[]],[[1,1,2],3],[[1,1],4],[[5,6],7],[[]],[[]],[[],8],[[],8],[[],9]],"p":[[6,"ByteSeq"],[15,"usize"],[6,"HkdfByteSeqResult"],[3,"PRK"],[4,"HkdfError"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_hmac":{"doc":"","tn":["Block","PRK","absolute","absolute","add","add","add_mod","add_mod","bitand","bitand","bitor","bitor","bitxor","bitxor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","concat","concat","create","create","declassify_eq","declassify_eq","default","default","divide","divide","equal","equal","equal_bm","equal_bm","exp","exp","fmt","fmt","from","from","from_array","from_array","from_hex","from_hex","from_native_slice","from_native_slice","from_public_array","from_public_array","from_public_slice","from_public_slice","from_seq","from_seq","from_slice","from_slice","from_slice_range","from_slice_range","from_vec","from_vec","get_chunk","get_chunk","get_chunk_len","get_chunk_len","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","hmac","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","inv","inv","iter","iter","len","len","length","length","less_than","less_than","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","max_val","max_val","modulo","modulo","mul","mul","mul_mod","mul_mod","new","new","not","not","not_equal_bm","not_equal_bm","num_chunks","num_chunks","pow_mod","pow_mod","pow_self","pow_self","rem","rem","set_chunk","set_chunk","shl","shl","shr","shr","signed_modulo","signed_modulo","slice","slice","slice_range","slice_range","sub","sub","sub_mod","sub_mod","to_U128s_be","to_U128s_be","to_U128s_le","to_U128s_le","to_be_U32s","to_be_U32s","to_be_U64s","to_be_U64s","to_be_bytes","to_be_bytes","to_hex","to_hex","to_le_U32s","to_le_U32s","to_le_U64s","to_le_U64s","to_le_bytes","to_le_bytes","to_owned","to_owned","to_public_array","to_public_array","try_from","try_from","try_into","try_into","type_id","type_id","update","update","update_slice","update_slice","update_start","update_start","wrap_add","wrap_add","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_sub","wrap_sub"],"q":["hacspec_hmacd":["Fixed length byte array.","Fixed length byte array.","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","","","","","","","","","","","","","","","","","","","","","","","Division.","Division.","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Read hex string to Bytes.","Read hex string to Bytes.","","","Create an array from a regular Rust array.","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Invert self modulo n.","Invert self modulo n.","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","<code>self % n</code>","<code>self % n</code>","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","","","","","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,0,1,1,1,1,1,2,2,2,2,2,1,1,1,1,2,2,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2],"f":[0,0,[1,1],[2,2],[[1,1],1],[[2,2],2],[[1,1,1],1],[[2,2,2],2],[[1,1]],[[2,2]],[[1,1]],[[2,2]],[[1,1]],[[2,2]],[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[1,[[4,[3]]]],[2,[[4,[3]]]],[5,1],[5,2],[[1,1],6],[[2,2],6],[[],1],[[],2],[[1,1],1],[[2,2],2],[[1,1],6],[[2,2],6],[[1,1],1],[[2,2],2],[[1,7],1],[[2,7],2],[[1,8],9],[[2,8],9],[[]],[[]],[[],1],[[],2],[10,1],[10,2],[[],1],[[],2],[[],1],[[],2],[[],1],[[],2],[[],1],[[],2],[[5,5],1],[[5,5],2],[[[11,[5]]],1],[[[11,[5]]],2],[[[12,[3]]],1],[[[12,[3]]],2],[[1,5,5]],[[2,5,5]],[[1,5,5],5],[[2,5,5],5],[[1,1],6],[[2,2],6],[[1,1],1],[[2,2],2],[[1,1],6],[[2,2],6],[[1,1],1],[[2,2],2],[[13,13],1],[[1,14]],[[1,5],3],[[1,15],3],[[1,7],3],[[1,16],3],[[2,7],3],[[2,15],3],[[2,16],3],[[2,14]],[[2,5],3],[[1,15],3],[[1,7],3],[[1,16],3],[[1,5],3],[[2,5],3],[[2,15],3],[[2,7],3],[[2,16],3],[[]],[[]],[[1,1],1],[[2,2],2],[1,[[17,[3]]]],[2,[[17,[3]]]],[1,5],[2,5],[[],5],[[],5],[[1,1],6],[[2,2],6],[[1,1],1],[[2,2],2],[[1,1],6],[[2,2],6],[[1,1],1],[[2,2],2],[[],1],[[],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1,1],1],[[2,2,2],2],[[],1],[[],2],[1],[2],[[1,1],1],[[2,2],2],[[1,5],5],[[2,5],5],[[1,1,1],1],[[2,2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,5,5],1],[[2,5,5],2],[[1,5]],[[2,5]],[[1,5]],[[2,5]],[[1,1],1],[[2,2],2],[[1,5,5],[[4,[3]]]],[[2,5,5],[[4,[3]]]],[[1,[11,[5]]],[[4,[3]]]],[[2,[11,[5]]],[[4,[3]]]],[[1,1],1],[[2,2],2],[[1,1,1],1],[[2,2,2],2],[1,[[4,[18]]]],[2,[[4,[18]]]],[1,[[4,[18]]]],[2,[[4,[18]]]],[1,[[4,[19]]]],[2,[[4,[19]]]],[1,[[4,[20]]]],[2,[[4,[20]]]],[1,[[4,[3]]]],[2,[[4,[3]]]],[1,21],[2,21],[1,[[4,[19]]]],[2,[[4,[19]]]],[1,[[4,[20]]]],[2,[[4,[20]]]],[1,[[4,[3]]]],[2,[[4,[3]]]],[[]],[[]],[1],[2],[[],22],[[],22],[[],22],[[],22],[[],23],[[],23],[[1,5],1],[[2,5],2],[[1,5,5,5],1],[[2,5,5,5],2],[1,1],[2,2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2]],"p":[[3,"PRK"],[3,"Block"],[3,"U8"],[3,"Seq"],[15,"usize"],[15,"bool"],[15,"u32"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Range"],[3,"Vec"],[6,"ByteSeq"],[3,"RangeFull"],[15,"i32"],[15,"u8"],[3,"Iter"],[3,"U128"],[3,"U32"],[3,"U64"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_p256":{"doc":"","tn":["Affine","AffineResult","Element","Error","FieldCanvas","InvalidAddition","ONE","ONE","ONE","ONE","P256FieldElement","P256Scalar","ScalarCanvas","TWO","TWO","TWO","TWO","ZERO","ZERO","ZERO","ZERO","absolute","absolute","absolute","absolute","absolute","add","add","add","add","add","add_mod","add_mod","add_mod","add_mod","add_mod","bit","bit","bit","bit","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","comp_eq","comp_eq","comp_eq","comp_eq","comp_gt","comp_gt","comp_gt","comp_gt","comp_gte","comp_gte","comp_gte","comp_gte","comp_lt","comp_lt","comp_lt","comp_lt","comp_lte","comp_lte","comp_lte","comp_lte","comp_ne","comp_ne","comp_ne","comp_ne","concat","create","declassify","declassify","declassify_eq","default","default","default","default","default","div","div","div","div","divide","divide","divide","divide","divide","eq","eq","eq","eq","equal","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_array","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_le","from_byte_seq_le","from_canvas","from_canvas","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_native_slice","from_public_array","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_le","from_public_byte_seq_le","from_public_slice","from_secret_literal","from_secret_literal","from_seq","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_slice","from_slice_range","from_vec","get_bit","get_bit","get_bit","get_bit","get_chunk","get_chunk_len","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into_canvas","into_canvas","inv","inv","inv","inv","inv","inv","inv","inv","inv","iter","len","length","less_than","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max","max","max_val","max_val","max_val","max_val","max_val","max_value","max_value","modulo","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","neg","neg","new","not","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","p256_calculate_w","p256_point_mul","p256_point_mul_base","p256_validate_private_key","p256_validate_public_key","partial_cmp","partial_cmp","partial_cmp","partial_cmp","point_add","pow","pow","pow","pow","pow2","pow2","pow2","pow2","pow_felem","pow_felem","pow_felem","pow_felem","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rem","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","set","set","set","set","set_bit","set_bit","set_bit","set_bit","set_chunk","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","slice","slice_range","sub","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_le","to_be_U32s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_le","to_byte_seq_le","to_hex","to_le_U32s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_array","to_public_byte_seq_be","to_public_byte_seq_be","to_public_byte_seq_le","to_public_byte_seq_le","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update","update_slice","update_start","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_pd":["","","Fixed length byte array.","","","","","","","","","","","","","","","","","","","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code> (coefficient-wise)","","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","","","","","","","","","","","","","","","Division.","Division.","Division.","Division.","Division.","","","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Read hex string to Bytes.","","","","","","","","","","","","","","","","","","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Invert self modulo n.","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","","Invert self modulo n.","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","Invert self modulo n.","","","","","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","","","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","Negate the value modulo max: <code>mod_value - self</code>","Negate the value modulo max: <code>mod_value - self</code>","","","","","","","","","","","","","","","","Verify that k != 0 &amp;&amp; k &lt; …","Verify that the point <code>p</code> is a valid public key.","","","","","","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","","","","","","","","","","","","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,13,1,2,3,4,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,13,1,2,3,4,5,13,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,5,2,4,5,1,2,3,4,5,1,2,3,4,1,2,3,4,5,1,2,3,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,13,1,1,1,2,2,2,3,3,3,4,4,4,5,13,1,1,1,2,2,3,3,3,4,4,5,5,1,2,3,4,1,2,3,4,2,4,2,4,1,2,3,4,5,1,2,3,4,1,2,3,4,1,1,2,2,3,3,4,4,5,5,1,2,3,4,2,4,5,2,4,5,1,2,3,4,5,5,5,1,2,3,4,5,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,5,5,5,5,5,5,5,5,5,13,1,1,1,2,2,3,3,3,4,4,5,2,4,1,1,2,2,3,3,4,4,5,5,5,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,2,4,1,2,3,4,5,1,3,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,2,4,5,1,2,3,4,5,1,2,3,4,5,5,0,0,0,0,0,1,2,3,4,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,5,5,1,2,3,4,5,1,2,3,4,5,5,5,5,5,1,2,3,4,5,1,2,3,4,2,4,5,5,5,1,2,3,4,5,1,2,3,4,5,5,2,4,2,4,1,2,3,4,13,1,2,3,4,5,13,1,2,3,4,5,13,1,2,3,4,5,5,5,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5],"f":[0,0,0,0,0,0,[[],1],[[],2],[[],3],[[],4],0,0,0,[[],1],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[1,1],[2,2],[3,3],[4,4],[5,5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[1,6],7],[[2,6],7],[[3,6],7],[[4,6],7],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[[]],[[]],[[]],[[]],[[]],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[5,[[10,[9]]]],[6,5],[2,11],[4,11],[[5,5],7],[[],1],[[],2],[[],3],[[],4],[[],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[5,5],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,12],1],[[2,12],2],[[3,12],3],[[4,12],4],[[5,12],5],[[13,14],15],[[1,14],15],[[1,14],15],[[1,14],15],[[2,14],15],[[2,14],15],[[2,14],15],[[3,14],15],[[3,14],15],[[3,14],15],[[4,14],15],[[4,14],15],[[4,14],15],[[5,14],15],[[]],[11,1],[[]],[16,1],[1,2],[[]],[[]],[16,3],[11,3],[3,4],[[]],[[]],[[],5],[[],1],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[[[17,[9]]],2],[[[17,[9]]],4],[1,2],[3,4],[18,1],[18,2],[18,3],[18,4],[18,5],[19,1],[19,2],[19,3],[19,4],[[],1],[[],2],[[],3],[[],4],[20,1],[20,1],[20,2],[20,2],[20,3],[20,3],[20,4],[20,4],[[],5],[[],5],[[[17,[21]]],1],[[[17,[21]]],2],[[[17,[21]]],3],[[[17,[21]]],4],[[[17,[21]]],2],[[[17,[21]]],4],[[],5],[22,2],[22,4],[[],5],[23,1],[23,2],[23,3],[23,4],[[6,6],5],[[[24,[6]]],5],[[[25,[9]]],5],[[1,6],1],[[2,6],2],[[3,6],3],[[4,6],4],[[5,6,6]],[[5,6,6],6],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[5,5],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[5,5],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[5,6],9],[[5,21],9],[[5,26]],[[5,12],9],[[5,27],9],[[5,6],9],[[5,21],9],[[5,27],9],[[5,12],9],[[]],[[]],[1,11],[1,16],[[]],[2,1],[3,16],[[]],[3,11],[4,3],[[]],[[]],[2,1],[4,3],[[1,1],1],[[1,1],1],[[2,2],2],[2,2],[[3,3],3],[[3,3],3],[[4,4],4],[4,4],[[5,5],5],[5,[[28,[9]]]],[5,6],[[],6],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[5,5],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[5,5],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[],1],[[],3],[[],1],[[],2],[[],3],[[],4],[[],5],[[],1],[[],3],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[2,2],[4,4],[[],5],[1],[2],[3],[4],[5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[5,6],6],[2,2],[[4,29],30],[4,30],[31,7],[29,7],[[1,1],[[32,[8]]]],[[2,2],[[32,[8]]]],[[3,3],[[32,[8]]]],[[4,4],[[32,[8]]]],[[29,29],30],[[1,20,1],1],[[2,20],2],[[3,20,3],3],[[4,20],4],[6,1],[6,2],[6,3],[6,4],[[1,1,1],1],[[2,2],2],[[3,3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,6],1],[[2,6],2],[[3,6],3],[[4,6],4],[[1,6],1],[[2,6],2],[[3,6],3],[[4,6],4],[[1,6,1,6],1],[[2,6,2,6],2],[[3,6,3,6],3],[[4,6,4,6],4],[[1,1,6],1],[[2,2,6],2],[[3,3,6],3],[[4,4,6],4],[[5,6,6],5],[[1,6]],[[2,6]],[[3,6]],[[4,6]],[[5,6]],[[1,6]],[[2,6]],[[3,6]],[[4,6]],[[5,6]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[5,6,6],[[10,[9]]]],[[5,[24,[6]]],[[10,[9]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[5,[[10,[22]]]],[5,[[10,[22]]]],[5,[[10,[33]]]],[5,[[10,[34]]]],[1],[2,[[25,[21]]]],[3],[4,[[25,[21]]]],[5,[[10,[9]]]],[1,[[10,[9]]]],[2,[[10,[9]]]],[3,[[10,[9]]]],[4,[[10,[9]]]],[2,[[10,[9]]]],[4,[[10,[9]]]],[5,19],[5,[[10,[33]]]],[5,[[10,[34]]]],[1],[2,[[25,[21]]]],[3],[4,[[25,[21]]]],[5,[[10,[9]]]],[[]],[[]],[[]],[[]],[[]],[5],[2,[[10,[21]]]],[4,[[10,[21]]]],[2,[[10,[21]]]],[4,[[10,[21]]]],[[],19],[[],19],[[],19],[[],19],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[5,6],5],[[5,6,6,6],5],[5,5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5]],"p":[[3,"FieldCanvas"],[3,"P256FieldElement"],[3,"ScalarCanvas"],[3,"P256Scalar"],[3,"Element"],[15,"usize"],[15,"bool"],[4,"Ordering"],[3,"U8"],[3,"Seq"],[3,"BigInt"],[15,"u32"],[4,"Error"],[3,"Formatter"],[6,"Result"],[3,"BigUint"],[8,"SeqTrait"],[15,"str"],[3,"String"],[15,"u128"],[15,"u8"],[3,"U128"],[15,"i128"],[3,"Range"],[3,"Vec"],[3,"RangeFull"],[15,"i32"],[3,"Iter"],[6,"Affine"],[6,"AffineResult"],[6,"ByteSeq"],[4,"Option"],[3,"U32"],[3,"U64"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_pasta":{"doc":"","tn":["FpPallas","FpVesta","G1_pallas","G1_vesta","ONE","ONE","ONE","ONE","PallasCanvas","TWO","TWO","TWO","TWO","VestaCanvas","ZERO","ZERO","ZERO","ZERO","absolute","absolute","absolute","absolute","add","add","add","add","add_mod","add_mod","add_mod","add_mod","bit","bit","bit","bit","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","comp_eq","comp_eq","comp_eq","comp_eq","comp_gt","comp_gt","comp_gt","comp_gt","comp_gte","comp_gte","comp_gte","comp_gte","comp_lt","comp_lt","comp_lt","comp_lt","comp_lte","comp_lte","comp_lte","comp_lte","comp_ne","comp_ne","comp_ne","comp_ne","declassify","declassify","default","default","default","default","div","div","div","div","divide","divide","divide","divide","eq","eq","eq","eq","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_be_bytes","from_be_bytes","from_be_bytes","from_be_bytes","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_be","from_byte_seq_le","from_byte_seq_le","from_canvas","from_canvas","from_hex","from_hex","from_hex","from_hex","from_hex_string","from_hex_string","from_hex_string","from_hex_string","from_le_bytes","from_le_bytes","from_le_bytes","from_le_bytes","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_literal","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_le","from_public_byte_seq_le","from_secret_literal","from_secret_literal","from_signed_literal","from_signed_literal","from_signed_literal","from_signed_literal","g1_default_pallas","g1_default_vesta","g1_is_identity_pallas","g1_is_identity_vesta","g1_on_curve_pallas","g1_on_curve_vesta","g1add_pallas","g1add_vesta","g1double_pallas","g1double_vesta","g1mul_pallas","g1mul_vesta","g1neg_pallas","g1neg_vesta","get_bit","get_bit","get_bit","get_bit","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","into","into","into","into","into","into","into","into","into","into","into_canvas","into_canvas","inv","inv","inv","inv","inv","inv","inv","inv","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max","max","max_val","max_val","max_val","max_val","max_value","max_value","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","neg","neg","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow2","pow2","pow2","pow2","pow_felem","pow_felem","pow_felem","pow_felem","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rotate_left","rotate_left","rotate_left","rotate_left","rotate_right","rotate_right","rotate_right","rotate_right","set","set","set","set","set_bit","set_bit","set_bit","set_bit","shl","shl","shl","shl","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_be","to_byte_seq_le","to_byte_seq_le","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_public_byte_seq_be","to_public_byte_seq_be","to_public_byte_seq_le","to_public_byte_seq_le","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_pastad":["","","","","","","","","","","","","","","","","","","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","<code>|self|</code>","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","","","","","","","","","","","Division.","Division.","Division.","Division.","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","Invert self modulo n.","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","","Invert self modulo n.","","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","","","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","Negate the value modulo max: <code>mod_value - self</code>","Negate the value modulo max: <code>mod_value - self</code>","","","","","","","","","","","","","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","Returns 2 to the power of the argument","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","","","","","","","","","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,3,4,0,1,2,3,4,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,1,1,2,2,2,3,3,3,4,4,4,1,1,1,2,2,3,3,3,4,4,1,2,3,4,1,2,3,4,2,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,1,2,2,3,3,4,4,1,2,3,4,2,4,2,4,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,1,1,2,2,3,3,3,4,4,2,4,1,1,2,2,3,3,4,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,2,4,1,2,3,4,1,3,1,2,3,4,1,2,3,4,1,2,3,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,2,4,1,2,3,4,1,2,3,4,2,4,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],"f":[0,0,0,0,[[],1],[[],2],[[],3],[[],4],0,[[],1],[[],2],[[],3],[[],4],0,[[],1],[[],2],[[],3],[[],4],[1,1],[2,2],[3,3],[4,4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[1,5],6],[[2,5],6],[[3,5],6],[[4,5],6],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[]],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[2,8],[4,8],[[],1],[[],2],[[],3],[[],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,9],1],[[2,9],2],[[3,9],3],[[4,9],4],[[1,10],11],[[1,10],11],[[1,10],11],[[2,10],11],[[2,10],11],[[2,10],11],[[3,10],11],[[3,10],11],[[3,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[]],[8,1],[12,1],[[]],[1,2],[[]],[8,3],[12,3],[3,4],[[]],[[],1],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[[[14,[13]]],2],[[[14,[13]]],4],[1,2],[3,4],[15,1],[15,2],[15,3],[15,4],[16,1],[16,2],[16,3],[16,4],[[],1],[[],2],[[],3],[[],4],[17,1],[17,1],[17,2],[17,2],[17,3],[17,3],[17,4],[17,4],[[[14,[18]]],1],[[[14,[18]]],2],[[[14,[18]]],3],[[[14,[18]]],4],[[[14,[18]]],2],[[[14,[18]]],4],[19,2],[19,4],[20,1],[20,2],[20,3],[20,4],[[],21],[[],22],[21,6],[22,6],[21,6],[22,6],[[21,21],21],[[22,22],22],[21,21],[22,22],[[4,21],21],[[2,22],22],[21,21],[22,22],[[1,5],1],[[2,5],2],[[3,5],3],[[4,5],4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[1,8],[[]],[1,12],[2,1],[[]],[3,12],[[]],[3,8],[4,3],[[]],[2,1],[4,3],[[1,1],1],[[1,1],1],[[2,2],2],[2,2],[[3,3],3],[[3,3],3],[4,4],[[4,4],4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],6],[[2,2],6],[[3,3],6],[[4,4],6],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[],1],[[],3],[[],1],[[],2],[[],3],[[],4],[[],1],[[],3],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[2,2],[4,4],[1],[2],[3],[4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],[[23,[7]]]],[[2,2],[[23,[7]]]],[[3,3],[[23,[7]]]],[[4,4],[[23,[7]]]],[[1,17,1],1],[[2,17],2],[[3,17,3],3],[[4,17],4],[5,1],[5,2],[5,3],[5,4],[[1,1,1],1],[[2,2],2],[[3,3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,5],1],[[2,5],2],[[3,5],3],[[4,5],4],[[1,5],1],[[2,5],2],[[3,5],3],[[4,5],4],[[1,5,1,5],1],[[2,5,2,5],2],[[3,5,3,5],3],[[4,5,4,5],4],[[1,1,5],1],[[2,2,5],2],[[3,3,5],3],[[4,4,5],4],[[1,5]],[[2,5]],[[3,5]],[[4,5]],[[1,5]],[[2,5]],[[3,5]],[[4,5]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[1],[2,[[24,[18]]]],[3],[4,[[24,[18]]]],[1,[[25,[13]]]],[2,[[25,[13]]]],[3,[[25,[13]]]],[4,[[25,[13]]]],[2,[[25,[13]]]],[4,[[25,[13]]]],[1],[2,[[24,[18]]]],[3],[4,[[24,[18]]]],[[]],[[]],[[]],[[]],[2,[[25,[18]]]],[4,[[25,[18]]]],[2,[[25,[18]]]],[4,[[25,[18]]]],[[],16],[[],16],[[],16],[[],16],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],27],[[],27],[[],27],[[],27],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4]],"p":[[3,"PallasCanvas"],[3,"FpPallas"],[3,"VestaCanvas"],[3,"FpVesta"],[15,"usize"],[15,"bool"],[4,"Ordering"],[3,"BigInt"],[15,"u32"],[3,"Formatter"],[6,"Result"],[3,"BigUint"],[3,"U8"],[8,"SeqTrait"],[15,"str"],[3,"String"],[15,"u128"],[15,"u8"],[3,"U128"],[15,"i128"],[6,"G1_pallas"],[6,"G1_vesta"],[4,"Option"],[3,"Vec"],[3,"Seq"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_poly1305":{"doc":"","t":[6,3,3,11,11,3,3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BlockIndex","FieldCanvas","FieldElement","ONE","ONE","Poly1305Tag","PolyBlock","PolyKey","PolyState","SubBlock","TWO","TWO","ZERO","ZERO","absolute","absolute","absolute","absolute","absolute","add","add","add","add","add","add_mod","add_mod","add_mod","add_mod","add_mod","bit","bit","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","comp_eq","comp_eq","comp_gt","comp_gt","comp_gte","comp_gte","comp_lt","comp_lt","comp_lte","comp_lte","comp_ne","comp_ne","concat","concat","concat","create","create","create","declassify","declassify_eq","declassify_eq","declassify_eq","default","default","default","default","default","div","div","divide","divide","divide","divide","divide","eq","eq","equal","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_be_bytes","from_be_bytes","from_byte_seq_be","from_byte_seq_be","from_byte_seq_le","from_canvas","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex_string","from_hex_string","from_le_bytes","from_le_bytes","from_literal","from_literal","from_literal","from_literal","from_native_slice","from_native_slice","from_native_slice","from_public_array","from_public_array","from_public_array","from_public_byte_seq_be","from_public_byte_seq_be","from_public_byte_seq_le","from_public_slice","from_public_slice","from_public_slice","from_secret_literal","from_seq","from_seq","from_seq","from_signed_literal","from_signed_literal","from_slice","from_slice","from_slice","from_slice_range","from_slice_range","from_slice_range","from_vec","from_vec","from_vec","get_bit","get_bit","get_chunk","get_chunk","get_chunk","get_chunk_len","get_chunk_len","get_chunk_len","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into_canvas","inv","inv","inv","inv","inv","inv","inv","iter","iter","iter","len","len","len","length","length","length","less_than","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max","max_val","max_val","max_val","max_val","max_val","max_value","modulo","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","neg","new","new","new","not","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","num_chunks","num_chunks","partial_cmp","partial_cmp","poly1305","poly1305_encode_block","poly1305_encode_last","poly1305_encode_r","poly1305_finish","poly1305_init","poly1305_update","poly1305_update_block","poly1305_update_blocks","poly1305_update_last","pow","pow","pow2","pow2","pow_felem","pow_felem","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rem","rotate_left","rotate_left","rotate_right","rotate_right","set","set","set_bit","set_bit","set_chunk","set_chunk","set_chunk","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","slice","slice","slice","slice_range","slice_range","slice_range","sub","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_le","to_U128s_le","to_U128s_le","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_byte_seq_be","to_byte_seq_be","to_byte_seq_le","to_hex","to_hex","to_hex","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_array","to_public_array","to_public_array","to_public_byte_seq_be","to_public_byte_seq_le","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update","update","update","update_slice","update_slice","update_slice","update_start","update_start","update_start","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_polyd":["","","","","","Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","","","","","","","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code>","<code>|self|</code>","","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","Gets the <code>i</code>-th least significant bit of this integer.","Gets the <code>i</code>-th least significant bit of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Produces a new integer which is all ones if the two …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","Produces a new integer which is all ones if the first …","","","","","","","","","","","","","","","","","","","Division.","Division.","Division.","Division.","Division.","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","","","","","","","","","","","","","","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","","","","","Get bit <code>i</code> of this integer.","Get bit <code>i</code> of this integer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Calls <code>U::from(self)</code>.","","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","","Invert self modulo n.","Invert self modulo n. <strong>NOTE:</strong> <code>n</code> is ignored and inversion is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","Negate the value modulo max: <code>mod_value - self</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns self to the power of the argument. The exponent is …","Returns self to the power of the argument. The exponent is …","Returns 2 to the power of the argument","Returns 2 to the power of the argument","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>pos</code> of this integer to bit <code>yi</code> of integer <code>y</code>.","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","Set bit <code>i</code> of this integer to <code>b</code> and return the result. Bit <code>b</code>…","","","","","","","","","","","","","","","","","<code>self % n</code> that always returns a positive integer","<code>self % n</code> that always returns a positive integer","","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,2,0,0,0,0,0,1,2,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,4,5,3,4,5,2,3,4,5,3,4,5,1,2,1,2,3,4,5,1,2,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,1,1,2,2,2,3,4,5,1,1,1,2,2,3,4,5,1,2,1,2,2,2,3,4,5,1,2,1,2,1,2,1,1,2,2,3,4,5,3,4,5,1,2,2,3,4,5,2,3,4,5,1,2,3,4,5,3,4,5,3,4,5,1,2,3,4,5,3,4,5,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,3,3,3,3,4,4,4,4,5,5,5,5,3,4,5,1,1,1,2,2,2,3,4,5,1,1,2,2,3,4,5,3,4,5,3,4,5,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,2,3,4,5,1,2,1,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,2,3,4,5,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,1,2,1,2,1,2,1,2,3,4,5,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,3,4,5,3,4,5,1,2,3,4,5,1,2,3,4,5,3,4,5,3,4,5,3,4,5,3,4,5,1,2,1,2,2,3,4,5,3,4,5,3,4,5,3,4,5,1,2,3,4,5,1,2,3,4,5,2,2,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,3,4,5,3,4,5,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2],"f":[0,0,0,[[],1],[[],2],0,0,0,0,0,[[],1],[[],2],[[],1],[[],2],[3,3],[4,4],[5,5],[1,1],[2,2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[1,1,1],1],[[2,2,2],2],[[1,6],7],[[2,6],7],[[3,3]],[[4,4]],[[5,5]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[1,1]],[[2,2]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[5,5],[1,1],[2,2],[[]],[[]],[[]],[[]],[[]],[[1,1],8],[[2,2],8],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[3,[[10,[9]]]],[4,[[10,[9]]]],[5,[[10,[9]]]],[6,3],[6,4],[6,5],[2,11],[[3,3],7],[[4,4],7],[[5,5],7],[[],3],[[],4],[[],5],[[],1],[[],2],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[1,1],7],[[2,2],7],[[3,3],7],[[4,4],7],[[5,5],7],[[1,1],7],[[2,2],7],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,12],3],[[4,12],4],[[5,12],5],[[1,12],1],[[2,12],2],[[3,13],14],[[4,13],14],[[5,13],14],[[1,13],14],[[1,13],14],[[1,13],14],[[2,13],14],[[2,13],14],[[2,13],14],[[]],[[]],[[]],[[]],[15,1],[11,1],[[]],[1,2],[[],3],[[],4],[[],5],[[],1],[[],2],[[],1],[[],2],[[[16,[9]]],2],[1,2],[17,3],[17,4],[17,5],[17,1],[17,2],[18,1],[18,2],[[],1],[[],2],[19,1],[19,1],[19,2],[19,2],[[],3],[[],4],[[],5],[[],3],[[],4],[[],5],[[[16,[20]]],1],[[[16,[20]]],2],[[[16,[20]]],2],[[],3],[[],4],[[],5],[21,2],[[],3],[[],4],[[],5],[22,1],[22,2],[[6,6],3],[[6,6],4],[[6,6],5],[[[23,[6]]],3],[[[23,[6]]],4],[[[23,[6]]],5],[[[24,[9]]],3],[[[24,[9]]],4],[[[24,[9]]],5],[[1,6],1],[[2,6],2],[[3,6,6]],[[4,6,6]],[[5,6,6]],[[3,6,6],6],[[4,6,6],6],[[5,6,6],6],[[3,3],7],[[4,4],7],[[5,5],7],[[1,1],7],[[2,2],7],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],7],[[4,4],7],[[5,5],7],[[1,1],7],[[2,2],7],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,25]],[[3,6],9],[[3,20],9],[[3,12],9],[[3,26],9],[[4,6],9],[[4,20],9],[[4,12],9],[[4,26],9],[[4,25]],[[5,26],9],[[5,12],9],[[5,6],9],[[5,25]],[[5,20],9],[[3,12],9],[[3,20],9],[[3,6],9],[[3,26],9],[[4,6],9],[[4,12],9],[[4,20],9],[[4,26],9],[[5,26],9],[[5,20],9],[[5,12],9],[[5,6],9],[[]],[[]],[[]],[[]],[1,15],[1,11],[2,1],[[]],[2,1],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[1,1],1],[[2,2],2],[2,2],[3,[[27,[9]]]],[4,[[27,[9]]]],[5,[[27,[9]]]],[3,6],[4,6],[5,6],[[],6],[[],6],[[],6],[[3,3],7],[[4,4],7],[[5,5],7],[[1,1],7],[[2,2],7],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],7],[[4,4],7],[[5,5],7],[[1,1],7],[[2,2],7],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[],1],[[],3],[[],4],[[],5],[[],1],[[],2],[[],1],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[1,1,1],1],[[2,2,2],2],[2,2],[[],3],[[],4],[[],5],[3],[4],[5],[1],[2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,6],6],[[4,6],6],[[5,6],6],[[1,1],[[28,[8]]]],[[2,2],[[28,[8]]]],[[29,3],5],[4,2],[[30,31],2],[4,2],[32,5],[3,32],[[29,32],32],[[4,32],32],[[29,32],32],[[6,31,32],32],[[1,19,1],1],[[2,19],2],[6,1],[6,2],[[1,1,1],1],[[2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[1,1,1],1],[[2,2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[1,6],1],[[2,6],2],[[1,6],1],[[2,6],2],[[1,6,1,6],1],[[2,6,2,6],2],[[1,1,6],1],[[2,2,6],2],[[3,6,6],3],[[4,6,6],4],[[5,6,6],5],[[3,6]],[[4,6]],[[5,6]],[[1,6]],[[2,6]],[[3,6]],[[4,6]],[[5,6]],[[1,6]],[[2,6]],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,6,6],[[10,[9]]]],[[4,6,6],[[10,[9]]]],[[5,6,6],[[10,[9]]]],[[3,[23,[6]]],[[10,[9]]]],[[4,[23,[6]]],[[10,[9]]]],[[5,[23,[6]]],[[10,[9]]]],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[1,1,1],1],[[2,2,2],2],[3,[[10,[21]]]],[4,[[10,[21]]]],[5,[[10,[21]]]],[3,[[10,[21]]]],[4,[[10,[21]]]],[5,[[10,[21]]]],[3,[[10,[33]]]],[4,[[10,[33]]]],[5,[[10,[33]]]],[3,[[10,[34]]]],[4,[[10,[34]]]],[5,[[10,[34]]]],[3,[[10,[9]]]],[4,[[10,[9]]]],[5,[[10,[9]]]],[1],[2,[[24,[20]]]],[1,[[10,[9]]]],[2,[[10,[9]]]],[2,[[10,[9]]]],[3,18],[4,18],[5,18],[3,[[10,[33]]]],[4,[[10,[33]]]],[5,[[10,[33]]]],[3,[[10,[34]]]],[4,[[10,[34]]]],[5,[[10,[34]]]],[3,[[10,[9]]]],[4,[[10,[9]]]],[5,[[10,[9]]]],[1],[2,[[24,[20]]]],[[]],[[]],[[]],[[]],[[]],[3],[4],[5],[2,[[10,[20]]]],[2,[[10,[20]]]],[[],18],[[],18],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],36],[[],36],[[],36],[[],36],[[],36],[[3,6],3],[[4,6],4],[[5,6],5],[[3,6,6,6],3],[[4,6,6,6],4],[[5,6,6,6],5],[3,3],[4,4],[5,5],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[1,1],1],[[2,2],2]],"p":[[3,"FieldCanvas"],[3,"FieldElement"],[3,"PolyKey"],[3,"PolyBlock"],[3,"Poly1305Tag"],[15,"usize"],[15,"bool"],[4,"Ordering"],[3,"U8"],[3,"Seq"],[3,"BigInt"],[15,"u32"],[3,"Formatter"],[6,"Result"],[3,"BigUint"],[8,"SeqTrait"],[15,"str"],[3,"String"],[15,"u128"],[15,"u8"],[3,"U128"],[15,"i128"],[3,"Range"],[3,"Vec"],[3,"RangeFull"],[15,"i32"],[3,"Iter"],[4,"Option"],[6,"ByteSeq"],[6,"BlockIndex"],[6,"SubBlock"],[6,"PolyState"],[3,"U32"],[3,"U64"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_sha256":{"doc":"","tn":["Block","HASH_SIZE","Hash","K_SIZE","OpTableType","RoundConstantsTable","Sha256Digest","absolute","absolute","absolute","absolute","add","add","add","add","add_mod","add_mod","add_mod","add_mod","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","ch","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","compress","concat","concat","concat","concat","concat","create","create","create","create","create","declassify_eq","declassify_eq","declassify_eq","declassify_eq","default","default","default","default","default","divide","divide","divide","divide","eq","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_array","from_array","from_array","from_array","from_array","from_hex","from_hex","from_hex","from_hex","from_hex","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_public_array","from_public_array","from_public_array","from_public_array","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_seq","from_seq","from_seq","from_seq","from_seq","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_vec","from_vec","from_vec","from_vec","from_vec","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","hash","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into_le_bytes","inv","inv","inv","inv","iter","iter","iter","iter","iter","len","len","len","len","len","length","length","length","length","length","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","maj","max_val","max_val","max_val","max_val","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","new","new","new","new","new","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","schedule","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","sha256","shl","shl","shl","shl","shr","shr","shr","shr","shuffle","sigma","signed_modulo","signed_modulo","signed_modulo","signed_modulo","slice","slice","slice","slice","slice","slice_range","slice_range","slice_range","slice_range","slice_range","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_be","to_U128s_le","to_U128s_le","to_be_U32s","to_be_U32s","to_be_U64s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_hex","to_hex","to_le_U32s","to_le_U32s","to_le_U64s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_array","to_public_array","to_public_array","to_public_array","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update","update","update","update","update","update_slice","update_slice","update_slice","update_slice","update_slice","update_start","update_start","update_start","update_start","update_start","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_sha256","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Fixed length byte array.","","Fixed length byte array.","","Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Division.","Division.","Division.","Division.","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","","","","","","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","","","","","","","","","","","","","","","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,6,2,3,4,1,6,2,3,4,0,1,6,2,3,4,1,6,2,3,4,0,1,6,2,3,4,1,6,2,3,4,1,2,3,4,1,6,2,3,4,1,2,3,4,6,1,2,3,4,1,2,3,4,1,2,3,4,1,6,2,3,4,1,6,2,3,4,1,6,2,3,4,1,6,2,3,4,1,6,2,3,4,1,2,3,4,1,2,3,4,1,6,2,3,4,1,6,2,3,4,1,6,2,3,4,1,6,2,3,4,1,6,2,3,4,1,6,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,1,1,1,1,1,6,6,6,6,6,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,1,1,1,1,6,6,6,6,2,2,2,2,3,3,3,3,4,4,4,4,1,6,2,3,4,6,1,2,3,4,1,6,2,3,4,1,6,2,3,4,1,6,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,6,2,3,4,1,2,3,4,1,2,3,4,1,6,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,1,6,2,3,4,0,1,2,3,4,1,2,3,4,0,0,1,2,3,4,1,6,2,3,4,1,6,2,3,4,1,2,3,4,1,2,3,4,1,2,1,2,1,2,1,2,1,2,3,4,1,2,1,2,1,2,1,2,3,4,1,6,2,3,4,1,2,3,4,1,6,2,3,4,1,6,2,3,4,1,6,2,3,4,1,6,2,3,4,1,6,2,3,4,1,6,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],"f":[0,0,0,0,0,0,0,[1,1],[2,2],[3,3],[4,4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[5,5,5],5],[1,1],[6,6],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[]],[[]],[[1,4],4],[1,[[8,[7]]]],[6,[[8,[9]]]],[2,[[8,[7]]]],[3,[[8,[5]]]],[4,[[8,[5]]]],[9,1],[9,6],[9,2],[9,3],[9,4],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[],1],[[],6],[[],2],[[],3],[[],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[6,6],10],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,11],1],[[2,11],2],[[3,11],3],[[4,11],4],[[1,12],13],[[6,12],13],[[2,12],13],[[3,12],13],[[4,12],13],[[]],[[]],[[]],[[]],[[]],[[],1],[[],6],[[],2],[[],3],[[],4],[14,1],[14,6],[14,2],[14,3],[14,4],[[],1],[[],6],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[[],1],[[],6],[[],2],[[],3],[[],4],[[9,9],1],[[9,9],6],[[9,9],2],[[9,9],3],[[9,9],4],[[[15,[9]]],1],[[[15,[9]]],6],[[[15,[9]]],2],[[[15,[9]]],3],[[[15,[9]]],4],[[[16,[7]]],1],[[[16,[9]]],6],[[[16,[7]]],2],[[[16,[5]]],3],[[[16,[5]]],4],[[1,9,9]],[[6,9,9]],[[2,9,9]],[[3,9,9]],[[4,9,9]],[[1,9,9],9],[[6,9,9],9],[[2,9,9],9],[[3,9,9],9],[[4,9,9],9],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[17,2],[[1,18]],[[1,19],7],[[1,11],7],[[1,20],7],[[1,9],7],[[6,9],9],[[6,20],9],[[6,11],9],[[6,19],9],[[6,18]],[[2,9],7],[[2,20],7],[[2,11],7],[[2,18]],[[2,19],7],[[3,20],5],[[3,19],5],[[3,11],5],[[3,9],5],[[3,18]],[[4,18]],[[4,11],5],[[4,9],5],[[4,20],5],[[4,19],5],[[1,11],7],[[1,19],7],[[1,9],7],[[1,20],7],[[6,11],9],[[6,20],9],[[6,19],9],[[6,9],9],[[2,19],7],[[2,9],7],[[2,20],7],[[2,11],7],[[3,19],5],[[3,20],5],[[3,9],5],[[3,11],5],[[4,19],5],[[4,20],5],[[4,9],5],[[4,11],5],[[]],[[]],[[]],[[]],[[]],[6,[[8,[20]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[1,[[21,[7]]]],[6,[[21,[9]]]],[2,[[21,[7]]]],[3,[[21,[5]]]],[4,[[21,[5]]]],[1,9],[6,9],[2,9],[3,9],[4,9],[[],9],[[],9],[[],9],[[],9],[[],9],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5,5],5],[[],1],[[],2],[[],3],[[],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[],1],[[],6],[[],2],[[],3],[[],4],[1],[2],[3],[4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,9],9],[[6,9],9],[[2,9],9],[[3,9],9],[[4,9],9],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[1,3],[[1,9,9],1],[[6,9,9],6],[[2,9,9],2],[[3,9,9],3],[[4,9,9],4],[17,2],[[1,9]],[[2,9]],[[3,9]],[[4,9]],[[1,9]],[[2,9]],[[3,9]],[[4,9]],[[3,4],4],[[5,9,9],5],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,9,9],[[8,[7]]]],[[6,9,9],[[8,[9]]]],[[2,9,9],[[8,[7]]]],[[3,9,9],[[8,[5]]]],[[4,9,9],[[8,[5]]]],[[1,[15,[9]]],[[8,[7]]]],[[6,[15,[9]]],[[8,[9]]]],[[2,[15,[9]]],[[8,[7]]]],[[3,[15,[9]]],[[8,[5]]]],[[4,[15,[9]]],[[8,[5]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[1,[[8,[22]]]],[2,[[8,[22]]]],[1,[[8,[22]]]],[2,[[8,[22]]]],[1,[[8,[5]]]],[2,[[8,[5]]]],[1,[[8,[23]]]],[2,[[8,[23]]]],[1,[[8,[7]]]],[2,[[8,[7]]]],[3,[[8,[7]]]],[4,[[8,[7]]]],[1,24],[2,24],[1,[[8,[5]]]],[2,[[8,[5]]]],[1,[[8,[23]]]],[2,[[8,[23]]]],[1,[[8,[7]]]],[2,[[8,[7]]]],[3,[[8,[7]]]],[4,[[8,[7]]]],[[]],[[]],[[]],[[]],[[]],[1],[2],[3],[4],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],26],[[],26],[[],26],[[],26],[[],26],[[1,9],1],[[6,9],6],[[2,9],2],[[3,9],3],[[4,9],4],[[1,9,9,9],1],[[6,9,9,9],6],[[2,9,9,9],2],[[3,9,9,9],3],[[4,9,9,9],4],[1,1],[6,6],[2,2],[3,3],[4,4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4]],"p":[[3,"Block"],[3,"Sha256Digest"],[3,"RoundConstantsTable"],[3,"Hash"],[3,"U32"],[3,"OpTableType"],[3,"U8"],[3,"Seq"],[15,"usize"],[15,"bool"],[15,"u32"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Range"],[3,"Vec"],[6,"ByteSeq"],[3,"RangeFull"],[15,"i32"],[15,"u8"],[3,"Iter"],[3,"U128"],[3,"U64"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_sha3":{"doc":"","tn":["Digest224","Digest256","Digest384","Digest512","RotationConstants","RoundConstants","Row","SHA3224_RATE","SHA3256_RATE","SHA3384_RATE","SHA3512_RATE","SHAKE128_RATE","SHAKE256_RATE","State","absolute","absolute","absolute","absolute","absolute","absolute","absolute","add","add","add","add","add","add","add","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","add_mod","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","concat","concat","concat","concat","concat","concat","concat","concat","create","create","create","create","create","create","create","create","declassify_eq","declassify_eq","declassify_eq","declassify_eq","declassify_eq","declassify_eq","default","default","default","default","default","default","default","default","div","divide","divide","divide","divide","divide","divide","divide","eq","eq","equal","equal","equal","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_array","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_hex","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_public_array","from_public_array","from_public_array","from_public_array","from_public_array","from_public_array","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_seq","from_seq","from_seq","from_seq","from_seq","from_seq","from_seq","from_seq","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into","into","into","into_le_bytes","into_le_bytes","inv","inv","inv","inv","inv","inv","inv","iter","iter","iter","iter","iter","iter","iter","iter","keccakf1600","len","len","len","len","len","len","len","len","length","length","length","length","length","length","length","length","less_than","less_than","less_than","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max_val","max_val","max_val","max_val","max_val","max_val","max_val","modulo","modulo","modulo","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","mul_mod","new","new","new","new","new","new","new","new","not","not","not","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","partial_cmp","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","rem","rem","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","sha3224","sha3256","sha3384","sha3512","shake128","shake256","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","signed_modulo","slice","slice","slice","slice","slice","slice","slice","slice","slice_range","slice_range","slice_range","slice_range","slice_range","slice_range","slice_range","slice_range","sub","sub","sub","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_be","to_U128s_le","to_U128s_le","to_U128s_le","to_U128s_le","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U32s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_hex","to_hex","to_hex","to_hex","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U32s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_array","to_public_array","to_public_array","to_public_array","to_public_array","to_public_array","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","update","update","update","update","update","update","update","update_slice","update_slice","update_slice","update_slice","update_slice","update_slice","update_slice","update_slice","update_start","update_start","update_start","update_start","update_start","update_start","update_start","update_start","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_shad":["Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","","","","","","","Fixed length byte array.","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","","","","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code> (coefficient-wise)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Division.","Division.","Division.","Division.","Division.","Division.","<code>self / rhs</code> (coefficient-wise and wrapping).","","","","","","","","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code> (coefficient-wise and …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","","","","","","","","","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","<strong>Not implemented</strong>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented. <strong>Not </strong>…","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code> (coefficient-wise)","","","","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code> (coefficient-wise) Note that the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code> (coefficient-wise) Note that the …","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<strong>Not implemented</strong>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>self % n</code> (coefficient-wise)","","","","","","","","","","","","","","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","<code>(self - rhs) % n</code> (coefficient-wise)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>self + rhs</code> (coefficient-wise and wrapping)","","","","","","","<code>self + rhs</code> (coefficient-wise and wrapping)","","","","","","","<code>self * rhs</code> (coefficient-wise and wrapping)","","","","","","","<code>self - rhs</code> (coefficient-wise and wrapping)"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,7,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,1,2,3,4,5,6,7,8,7,1,2,3,4,5,6,7,7,8,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,8,8,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,1,2,3,4,5,6,7,8,7,8,1,2,3,4,5,6,7,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,8,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,1,2,3,4,5,6,7,8,0,0,0,0,0,0,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,1,2,3,4,5,6,7,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,1,2,3,4,5,6,3,4,5,6,3,4,5,6,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,7,8,1,2,3,4,5,6,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[7,7,7],7],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[7,7]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[7,7]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[5,5]],[[6,6]],[[7,7]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[7,7],9],[1,[[11,[10]]]],[2,[[11,[10]]]],[3,[[11,[12]]]],[4,[[11,[12]]]],[5,[[11,[12]]]],[6,[[11,[12]]]],[7,[[11,[13]]]],[8,[[11,[14]]]],[14,1],[14,2],[14,3],[14,4],[14,5],[14,6],[14,7],[14,8],[[1,1],15],[[2,2],15],[[3,3],15],[[4,4],15],[[5,5],15],[[6,6],15],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[7,7],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[7,7],15],[[8,8],15],[[1,1],15],[[2,2],15],[[3,3],15],[[4,4],15],[[5,5],15],[[6,6],15],[[7,7],15],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[1,16],1],[[2,16],2],[[3,16],3],[[4,16],4],[[5,16],5],[[6,16],6],[[7,16],7],[[1,17],18],[[2,17],18],[[3,17],18],[[4,17],18],[[5,17],18],[[6,17],18],[[7,17],18],[[8,17],18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[19,1],[19,2],[19,3],[19,4],[19,5],[19,6],[19,7],[19,8],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[14,14],1],[[14,14],2],[[14,14],3],[[14,14],4],[[14,14],5],[[14,14],6],[[14,14],7],[[14,14],8],[[[20,[14]]],1],[[[20,[14]]],2],[[[20,[14]]],3],[[[20,[14]]],4],[[[20,[14]]],5],[[[20,[14]]],6],[[[20,[14]]],7],[[[20,[14]]],8],[[[21,[10]]],1],[[[21,[10]]],2],[[[21,[12]]],3],[[[21,[12]]],4],[[[21,[12]]],5],[[[21,[12]]],6],[[[21,[13]]],7],[[[21,[14]]],8],[[1,14,14]],[[2,14,14]],[[3,14,14]],[[4,14,14]],[[5,14,14]],[[6,14,14]],[[7,14,14]],[[8,14,14]],[[1,14,14],14],[[2,14,14],14],[[3,14,14],14],[[4,14,14],14],[[5,14,14],14],[[6,14,14],14],[[7,14,14],14],[[8,14,14],14],[[1,1],15],[[2,2],15],[[3,3],15],[[4,4],15],[[5,5],15],[[6,6],15],[[7,7],15],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[1,1],15],[[2,2],15],[[3,3],15],[[4,4],15],[[5,5],15],[[6,6],15],[[7,7],15],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[1,14],10],[[1,22],10],[[1,16],10],[[1,23],10],[[1,24]],[[2,22],10],[[2,14],10],[[2,24]],[[2,23],10],[[2,16],10],[[3,14],12],[[3,23],12],[[3,16],12],[[3,22],12],[[3,24]],[[4,16],12],[[4,23],12],[[4,14],12],[[4,24]],[[4,22],12],[[5,23],12],[[5,16],12],[[5,22],12],[[5,24]],[[5,14],12],[[6,14],12],[[6,24]],[[6,23],12],[[6,16],12],[[6,22],12],[[7,23],13],[[7,14],13],[[7,24]],[[7,16],13],[[7,22],13],[[8,23],14],[[8,24]],[[8,16],14],[[8,22],14],[[8,14],14],[[1,23],10],[[1,16],10],[[1,22],10],[[1,14],10],[[2,16],10],[[2,23],10],[[2,22],10],[[2,14],10],[[3,23],12],[[3,16],12],[[3,14],12],[[3,22],12],[[4,23],12],[[4,16],12],[[4,14],12],[[4,22],12],[[5,14],12],[[5,22],12],[[5,16],12],[[5,23],12],[[6,14],12],[[6,22],12],[[6,16],12],[[6,23],12],[[7,23],13],[[7,16],13],[[7,22],13],[[7,14],13],[[8,22],14],[[8,23],14],[[8,14],14],[[8,16],14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,[[11,[22]]]],[8,[[11,[22]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[1,[[25,[10]]]],[2,[[25,[10]]]],[3,[[25,[12]]]],[4,[[25,[12]]]],[5,[[25,[12]]]],[6,[[25,[12]]]],[7,[[25,[13]]]],[8,[[25,[14]]]],[1,1],[1,14],[2,14],[3,14],[4,14],[5,14],[6,14],[7,14],[8,14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[1,1],15],[[2,2],15],[[3,3],15],[[4,4],15],[[5,5],15],[[6,6],15],[[7,7],15],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[1,1],15],[[2,2],15],[[3,3],15],[[4,4],15],[[5,5],15],[[6,6],15],[[7,7],15],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[7,7,7],7],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[1],[2],[3],[4],[5],[6],[7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[1,14],14],[[2,14],14],[[3,14],14],[[4,14],14],[[5,14],14],[[6,14],14],[[7,14],14],[[8,14],14],[[7,7],[[26,[9]]]],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[7,7,7],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[1,14,14],1],[[2,14,14],2],[[3,14,14],3],[[4,14,14],4],[[5,14,14],5],[[6,14,14],6],[[7,14,14],7],[[8,14,14],8],[27,3],[27,4],[27,5],[27,6],[[27,14],27],[[27,14],27],[[1,14]],[[2,14]],[[3,14]],[[4,14]],[[5,14]],[[6,14]],[[7,14]],[[1,14]],[[2,14]],[[3,14]],[[4,14]],[[5,14]],[[6,14]],[[7,14]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[1,14,14],[[11,[10]]]],[[2,14,14],[[11,[10]]]],[[3,14,14],[[11,[12]]]],[[4,14,14],[[11,[12]]]],[[5,14,14],[[11,[12]]]],[[6,14,14],[[11,[12]]]],[[7,14,14],[[11,[13]]]],[[8,14,14],[[11,[14]]]],[[1,[20,[14]]],[[11,[10]]]],[[2,[20,[14]]],[[11,[10]]]],[[3,[20,[14]]],[[11,[12]]]],[[4,[20,[14]]],[[11,[12]]]],[[5,[20,[14]]],[[11,[12]]]],[[6,[20,[14]]],[[11,[12]]]],[[7,[20,[14]]],[[11,[13]]]],[[8,[20,[14]]],[[11,[14]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[5,5,5],5],[[6,6,6],6],[[7,7,7],7],[3,[[11,[28]]]],[4,[[11,[28]]]],[5,[[11,[28]]]],[6,[[11,[28]]]],[3,[[11,[28]]]],[4,[[11,[28]]]],[5,[[11,[28]]]],[6,[[11,[28]]]],[3,[[11,[29]]]],[4,[[11,[29]]]],[5,[[11,[29]]]],[6,[[11,[29]]]],[3,[[11,[10]]]],[4,[[11,[10]]]],[5,[[11,[10]]]],[6,[[11,[10]]]],[1,[[11,[12]]]],[2,[[11,[12]]]],[3,[[11,[12]]]],[4,[[11,[12]]]],[5,[[11,[12]]]],[6,[[11,[12]]]],[3,30],[4,30],[5,30],[6,30],[3,[[11,[29]]]],[4,[[11,[29]]]],[5,[[11,[29]]]],[6,[[11,[29]]]],[3,[[11,[10]]]],[4,[[11,[10]]]],[5,[[11,[10]]]],[6,[[11,[10]]]],[1,[[11,[12]]]],[2,[[11,[12]]]],[3,[[11,[12]]]],[4,[[11,[12]]]],[5,[[11,[12]]]],[6,[[11,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[2],[3],[4],[5],[6],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[1,14],1],[[2,14],2],[[3,14],3],[[4,14],4],[[5,14],5],[[6,14],6],[[7,14],7],[[8,14],8],[[1,14,14,14],1],[[2,14,14,14],2],[[3,14,14,14],3],[[4,14,14,14],4],[[5,14,14,14],5],[[6,14,14,14],6],[[7,14,14,14],7],[[8,14,14,14],8],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],5],[[6,6],6],[[7,7],7]],"p":[[3,"State"],[3,"Row"],[3,"Digest224"],[3,"Digest256"],[3,"Digest384"],[3,"Digest512"],[3,"RoundConstants"],[3,"RotationConstants"],[4,"Ordering"],[3,"U64"],[3,"Seq"],[3,"U8"],[15,"u64"],[15,"usize"],[15,"bool"],[15,"u32"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Range"],[3,"Vec"],[15,"u8"],[15,"i32"],[3,"RangeFull"],[3,"Iter"],[4,"Option"],[6,"ByteSeq"],[3,"U128"],[3,"U32"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_sha512":{"doc":"","tn":["Block","HASH_SIZE","Hash","K_SIZE","OpTableType","RoundConstantsTable","Sha512Digest","absolute","absolute","absolute","absolute","add","add","add","add","add_mod","add_mod","add_mod","add_mod","bitand","bitand","bitand","bitand","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","concat","concat","concat","concat","concat","create","create","create","create","create","declassify_eq","declassify_eq","declassify_eq","declassify_eq","default","default","default","default","default","divide","divide","divide","divide","eq","equal","equal","equal","equal","equal_bm","equal_bm","equal_bm","equal_bm","exp","exp","exp","exp","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_array","from_array","from_array","from_array","from_array","from_hex","from_hex","from_hex","from_hex","from_hex","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_native_slice","from_public_array","from_public_array","from_public_array","from_public_array","from_public_slice","from_public_slice","from_public_slice","from_public_slice","from_seq","from_seq","from_seq","from_seq","from_seq","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_slice_range","from_vec","from_vec","from_vec","from_vec","from_vec","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","get_chunk_len","greater_than","greater_than","greater_than","greater_than","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_bm","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","greater_than_or_equal_bm","hash","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","into","into","into","into","into","into_le_bytes","inv","inv","inv","inv","iter","iter","iter","iter","iter","len","len","len","len","len","length","length","length","length","length","less_than","less_than","less_than","less_than","less_than_bm","less_than_bm","less_than_bm","less_than_bm","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","less_than_or_equal_bm","max_val","max_val","max_val","max_val","modulo","modulo","modulo","modulo","mul","mul","mul","mul","mul_mod","mul_mod","mul_mod","mul_mod","new","new","new","new","new","not","not","not","not","not_equal_bm","not_equal_bm","not_equal_bm","not_equal_bm","num_chunks","num_chunks","num_chunks","num_chunks","num_chunks","pow_mod","pow_mod","pow_mod","pow_mod","pow_self","pow_self","pow_self","pow_self","rem","rem","rem","rem","set_chunk","set_chunk","set_chunk","set_chunk","set_chunk","sha512","shl","shl","shl","shl","shr","shr","shr","shr","signed_modulo","signed_modulo","signed_modulo","signed_modulo","slice","slice","slice","slice","slice","slice_range","slice_range","slice_range","slice_range","slice_range","sub","sub","sub","sub","sub_mod","sub_mod","sub_mod","sub_mod","to_U128s_be","to_U128s_be","to_U128s_le","to_U128s_le","to_be_U32s","to_be_U32s","to_be_U64s","to_be_U64s","to_be_bytes","to_be_bytes","to_be_bytes","to_be_bytes","to_hex","to_hex","to_le_U32s","to_le_U32s","to_le_U64s","to_le_U64s","to_le_bytes","to_le_bytes","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_public_array","to_public_array","to_public_array","to_public_array","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update","update","update","update","update","update_slice","update_slice","update_slice","update_slice","update_slice","update_start","update_start","update_start","update_start","update_start","wrap_add","wrap_add","wrap_add","wrap_add","wrap_div","wrap_div","wrap_div","wrap_div","wrap_mul","wrap_mul","wrap_mul","wrap_mul","wrap_sub","wrap_sub","wrap_sub","wrap_sub"],"q":["hacspec_shad":["Fixed length byte array.","","Fixed length byte array.","","Fixed length byte array.","Fixed length byte array.","Fixed length byte array.","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","<code>|self|</code> (coefficient-wise)","","","","","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","<code>(self + rhs) % n</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Division.","Division.","Division.","Division.","","","","","","","","","","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>u32</code>.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","Read hex string to Bytes.","","","","","","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","Create an array from a regular Rust array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","Invert self modulo n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","Return largest value that can be represented.","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","<code>self % n</code>","","","","","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","<code>(self * rhs) % n</code>","","","","","","","","","","","","","","","","","","","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>(self ^ exp) % n</code>","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","<code>self ^ exp</code> where <code>exp</code> is a <code>Self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","(self - rhs) % n.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,2,3,4,1,5,2,3,4,1,2,3,4,5,1,2,3,4,1,2,3,4,1,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,2,3,4,1,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,1,1,1,1,1,5,5,5,5,5,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,1,1,1,1,5,5,5,5,2,2,2,2,3,3,3,3,4,4,4,4,1,5,2,3,4,5,1,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,5,2,3,4,1,2,3,4,1,2,3,4,1,5,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,5,2,3,4,0,1,2,3,4,1,2,3,4,1,2,3,4,1,5,2,3,4,1,5,2,3,4,1,2,3,4,1,2,3,4,1,2,1,2,1,2,1,2,1,2,3,4,1,2,1,2,1,2,1,2,3,4,1,5,2,3,4,1,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],"f":[0,0,0,0,0,0,0,[1,1],[2,2],[3,3],[4,4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[1,1]],[[2,2]],[[3,3]],[[4,4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[5,5],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[]],[[]],[1,[[7,[6]]]],[5,[[7,[8]]]],[2,[[7,[6]]]],[3,[[7,[9]]]],[4,[[7,[9]]]],[8,1],[8,5],[8,2],[8,3],[8,4],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[],1],[[],5],[[],2],[[],3],[[],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[5,5],10],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,11],1],[[2,11],2],[[3,11],3],[[4,11],4],[[1,12],13],[[5,12],13],[[2,12],13],[[3,12],13],[[4,12],13],[[]],[[]],[[]],[[]],[[]],[[],1],[[],5],[[],2],[[],3],[[],4],[14,1],[14,5],[14,2],[14,3],[14,4],[[],1],[[],5],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[[],1],[[],2],[[],3],[[],4],[[],1],[[],5],[[],2],[[],3],[[],4],[[8,8],1],[[8,8],5],[[8,8],2],[[8,8],3],[[8,8],4],[[[15,[8]]],1],[[[15,[8]]],5],[[[15,[8]]],2],[[[15,[8]]],3],[[[15,[8]]],4],[[[16,[6]]],1],[[[16,[8]]],5],[[[16,[6]]],2],[[[16,[9]]],3],[[[16,[9]]],4],[[1,8,8]],[[5,8,8]],[[2,8,8]],[[3,8,8]],[[4,8,8]],[[1,8,8],8],[[5,8,8],8],[[2,8,8],8],[[3,8,8],8],[[4,8,8],8],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[17,2],[[1,18]],[[1,11],6],[[1,19],6],[[1,8],6],[[1,20],6],[[5,18]],[[5,8],8],[[5,20],8],[[5,19],8],[[5,11],8],[[2,18]],[[2,19],6],[[2,20],6],[[2,11],6],[[2,8],6],[[3,20],9],[[3,19],9],[[3,8],9],[[3,11],9],[[3,18]],[[4,18]],[[4,8],9],[[4,19],9],[[4,11],9],[[4,20],9],[[1,11],6],[[1,20],6],[[1,8],6],[[1,19],6],[[5,8],8],[[5,19],8],[[5,11],8],[[5,20],8],[[2,8],6],[[2,19],6],[[2,11],6],[[2,20],6],[[3,19],9],[[3,8],9],[[3,20],9],[[3,11],9],[[4,20],9],[[4,11],9],[[4,19],9],[[4,8],9],[[]],[[]],[[]],[[]],[[]],[5,[[7,[19]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[1,[[21,[6]]]],[5,[[21,[8]]]],[2,[[21,[6]]]],[3,[[21,[9]]]],[4,[[21,[9]]]],[1,8],[5,8],[2,8],[3,8],[4,8],[[],8],[[],8],[[],8],[[],8],[[],8],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],10],[[2,2],10],[[3,3],10],[[4,4],10],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[],1],[[],2],[[],3],[[],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[],1],[[],5],[[],2],[[],3],[[],4],[1],[2],[3],[4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,8],8],[[5,8],8],[[2,8],8],[[3,8],8],[[4,8],8],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,8,8],1],[[5,8,8],5],[[2,8,8],2],[[3,8,8],3],[[4,8,8],4],[17,2],[[1,8]],[[2,8]],[[3,8]],[[4,8]],[[1,8]],[[2,8]],[[3,8]],[[4,8]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,8,8],[[7,[6]]]],[[5,8,8],[[7,[8]]]],[[2,8,8],[[7,[6]]]],[[3,8,8],[[7,[9]]]],[[4,8,8],[[7,[9]]]],[[1,[15,[8]]],[[7,[6]]]],[[5,[15,[8]]],[[7,[8]]]],[[2,[15,[8]]],[[7,[6]]]],[[3,[15,[8]]],[[7,[9]]]],[[4,[15,[8]]],[[7,[9]]]],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1,1],1],[[2,2,2],2],[[3,3,3],3],[[4,4,4],4],[1,[[7,[22]]]],[2,[[7,[22]]]],[1,[[7,[22]]]],[2,[[7,[22]]]],[1,[[7,[23]]]],[2,[[7,[23]]]],[1,[[7,[9]]]],[2,[[7,[9]]]],[1,[[7,[6]]]],[2,[[7,[6]]]],[3,[[7,[6]]]],[4,[[7,[6]]]],[1,24],[2,24],[1,[[7,[23]]]],[2,[[7,[23]]]],[1,[[7,[9]]]],[2,[[7,[9]]]],[1,[[7,[6]]]],[2,[[7,[6]]]],[3,[[7,[6]]]],[4,[[7,[6]]]],[[]],[[]],[[]],[[]],[[]],[1],[2],[3],[4],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],26],[[],26],[[],26],[[],26],[[],26],[[1,8],1],[[5,8],5],[[2,8],2],[[3,8],3],[[4,8],4],[[1,8,8,8],1],[[5,8,8,8],5],[[2,8,8,8],2],[[3,8,8,8],3],[[4,8,8,8],4],[1,1],[5,5],[2,2],[3,3],[4,4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4],[[1,1],1],[[2,2],2],[[3,3],3],[[4,4],4]],"p":[[3,"Block"],[3,"Sha512Digest"],[3,"RoundConstantsTable"],[3,"Hash"],[3,"OpTableType"],[3,"U8"],[3,"Seq"],[15,"usize"],[3,"U64"],[15,"bool"],[15,"u32"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"Range"],[3,"Vec"],[6,"ByteSeq"],[3,"RangeFull"],[15,"u8"],[15,"i32"],[3,"Iter"],[3,"U128"],[3,"U32"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"hacspec_weierstrass":{"doc":"","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["EllipticCurvePoint","WeiestrassCurve","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","double","eq","from","from","into","into","is_identity","is_on_curve","mul","neg","new","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["hacspec_weierstrass","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Adds two curve points","","","","","","","","","","Creates default instance of ‘EllipticCurvePoint’ as …","Doubles point","Checks if two curve points are identical, regardless of …","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if point is identity/point at infinity","Checks if point is on the curve point is on the curve IFF …","Scalar multiplication as G * m G is curve point and m is …","negates point as (x,-y)","Create a weierstrass curve","Create point on a weierstrass curve. If given point is not …","","","","","","","",""],"i":[0,0,6,8,6,8,6,8,6,8,6,8,6,6,6,8,6,8,6,6,6,6,6,8,6,8,6,8,6,8,6,8,6],"f":[0,0,[[[6,[[0,[1,2,3,4,5]]]],[6,[[0,[1,2,3,4,5]]]]],[[6,[[0,[1,2,3,4,5]]]]]],[[]],[[]],[[]],[[]],[[[8,[7]]],[[8,[7]]]],[[[6,[7]]],[[6,[7]]]],[[]],[[]],[[],[[8,[4]]]],[[],[[6,[[0,[1,2,4]]]]]],[[[6,[[0,[1,2,3,4,5]]]]],[[6,[[0,[1,2,3,4,5]]]]]],[[[6,[[0,[1,2,3,4]]]],[6,[[0,[1,2,3,4]]]]],9],[[]],[[]],[[]],[[]],[[[6,[[0,[1,2,3,4,5]]]]],9],[[[6,[[0,[1,2,3,4,5]]]]],9],[[[6,[[0,[1,2,3,4,5]]]],[0,[1,2,3,4,5]]]],[[[6,[[0,[1,2,3,4,5]]]]],[[6,[[0,[1,2,3,4,5]]]]]],[10,8],[[[0,[1,2,3,4,5]],[0,[1,2,3,4,5]],9,[8,[[0,[1,2,3,4,5]]]]],[[6,[[0,[1,2,3,4,5]]]]]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12]],"p":[[8,"Numeric"],[8,"NumericCopy"],[8,"PartialEq"],[8,"Integer"],[8,"Div"],[3,"EllipticCurvePoint"],[8,"Clone"],[3,"WeiestrassCurve"],[15,"bool"],[15,"usize"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
